
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008b8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a50  08000a50  00001a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a5c  08000a5c  00001a6c  2**0
                  CONTENTS
  4 .ARM          00000008  08000a5c  08000a5c  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000a64  08000a6c  00001a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a64  08000a64  00001a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a68  08000a68  00001a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a6c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a6c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000102e  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c3  00000000  00000000  00002aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00002e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c5  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023d1  00000000  00000000  0000306d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017a8  00000000  00000000  0000543e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009806  00000000  00000000  00006be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000103ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000038c  00000000  00000000  00010430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000107bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a38 	.word	0x08000a38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a38 	.word	0x08000a38

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <SPI2_PinsInit>:
 */
#include "stm32f411xx.h"
#include<stdio.h>
#include<string.h>

void SPI2_PinsInit(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <SPI2_PinsInit+0x40>)
 80001f0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode=5;
 80001f6:	2305      	movs	r3, #5
 80001f8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 80001fa:	2300      	movs	r3, #0
 80001fc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000202:	2300      	movs	r3, #0
 8000204:	72fb      	strb	r3, [r7, #11]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 8000206:	230d      	movs	r3, #13
 8000208:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f90f 	bl	8000430 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_15;
 8000212:	230f      	movs	r3, #15
 8000214:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f909 	bl	8000430 <GPIO_Init>
//	//NSS
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_12;
//	GPIO_Init(&SPIPins);


}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40020400 	.word	0x40020400

0800022c <SPI2_Init>:

void SPI2_Init(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000232:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <SPI2_Init+0x38>)
 8000234:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000236:	2301      	movs	r3, #1
 8000238:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_SClkSpeed = SPI_SCLK_SPEED_DIV2;
 800023e:	2300      	movs	r3, #0
 8000240:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EI;
 8000246:	2301      	movs	r3, #1
 8000248:	73bb      	strb	r3, [r7, #14]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]

	SPI_Init(&SPI2Handle);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fae9 	bl	800082c <SPI_Init>
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40003800 	.word	0x40003800

08000268 <main>:

int main(void){
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
	char user_data[] ="Hello world";
 800026e:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <main+0x40>)
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	ca07      	ldmia	r2, {r0, r1, r2}
 8000274:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI2_PinsInit();   // to initialize GPIO pins to behave as SPI2 pins
 8000278:	f7ff ffb6 	bl	80001e8 <SPI2_PinsInit>

    SPI2_Init();	   // To Initialize SPI2 peripheral parameters
 800027c:	f7ff ffd6 	bl	800022c <SPI2_Init>


    SPI_SSIConfig(SPI2,ENABLE); // to make NSS signal internally high avoid MODF error
 8000280:	2101      	movs	r1, #1
 8000282:	480a      	ldr	r0, [pc, #40]	@ (80002ac <main+0x44>)
 8000284:	f000 fb98 	bl	80009b8 <SPI_SSIConfig>

    SPI_Peripheralcontrol(SPI2,ENABLE); // To enable SPI2 peripheral
 8000288:	2101      	movs	r1, #1
 800028a:	4808      	ldr	r0, [pc, #32]	@ (80002ac <main+0x44>)
 800028c:	f000 fb78 	bl	8000980 <SPI_Peripheralcontrol>


    SPI_SendData(SPI2,(uint8_t*)user_data, strlen(user_data)); // to send data
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffa0 	bl	80001d8 <strlen>
 8000298:	4602      	mov	r2, r0
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <main+0x44>)
 80002a0:	f000 fb37 	bl	8000912 <SPI_SendData>

    while(1);
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <main+0x3c>
 80002a8:	08000a50 	.word	0x08000a50
 80002ac:	40003800 	.word	0x40003800

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fb87 	bl	80009f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffc1 	bl	8000268 <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	08000a6c 	.word	0x08000a6c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <GPIO_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d13d      	bne.n	8000392 <GPIO_PeriClockControl+0x8e>
		if(pGPIOx == GPIOA){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a3f      	ldr	r2, [pc, #252]	@ (8000418 <GPIO_PeriClockControl+0x114>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800031e:	4b3f      	ldr	r3, [pc, #252]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	4a3e      	ldr	r2, [pc, #248]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6313      	str	r3, [r2, #48]	@ 0x30
		else{
			GPIOH_PCLK_DI();
		}

	}
}
 800032a:	e06f      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a3c      	ldr	r2, [pc, #240]	@ (8000420 <GPIO_PeriClockControl+0x11c>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000334:	4b39      	ldr	r3, [pc, #228]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000338:	4a38      	ldr	r2, [pc, #224]	@ (800041c <GPIO_PeriClockControl+0x118>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000340:	e064      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a37      	ldr	r2, [pc, #220]	@ (8000424 <GPIO_PeriClockControl+0x120>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034a:	4b34      	ldr	r3, [pc, #208]	@ (800041c <GPIO_PeriClockControl+0x118>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034e:	4a33      	ldr	r2, [pc, #204]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000356:	e059      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a33      	ldr	r2, [pc, #204]	@ (8000428 <GPIO_PeriClockControl+0x124>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000360:	4b2e      	ldr	r3, [pc, #184]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a2d      	ldr	r2, [pc, #180]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036c:	e04e      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a2e      	ldr	r2, [pc, #184]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000376:	4b29      	ldr	r3, [pc, #164]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <GPIO_PeriClockControl+0x118>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000382:	e043      	b.n	800040c <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_EN();
 8000384:	4b25      	ldr	r3, [pc, #148]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a24      	ldr	r2, [pc, #144]	@ (800041c <GPIO_PeriClockControl+0x118>)
 800038a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000390:	e03c      	b.n	800040c <GPIO_PeriClockControl+0x108>
		if(pGPIOx == GPIOA){
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a20      	ldr	r2, [pc, #128]	@ (8000418 <GPIO_PeriClockControl+0x114>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0xa4>
			GPIOA_PCLK_DI();
 800039a:	4b20      	ldr	r3, [pc, #128]	@ (800041c <GPIO_PeriClockControl+0x118>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a1f      	ldr	r2, [pc, #124]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003a0:	f023 0301 	bic.w	r3, r3, #1
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a6:	e031      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000420 <GPIO_PeriClockControl+0x11c>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0xba>
			GPIOB_PCLK_DI();
 80003b0:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a19      	ldr	r2, [pc, #100]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003b6:	f023 0302 	bic.w	r3, r3, #2
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003bc:	e026      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a18      	ldr	r2, [pc, #96]	@ (8000424 <GPIO_PeriClockControl+0x120>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0xd0>
			GPIOC_PCLK_DI();
 80003c6:	4b15      	ldr	r3, [pc, #84]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a14      	ldr	r2, [pc, #80]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003cc:	f023 0304 	bic.w	r3, r3, #4
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d2:	e01b      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a14      	ldr	r2, [pc, #80]	@ (8000428 <GPIO_PeriClockControl+0x124>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0xe6>
			GPIOD_PCLK_DI();
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e0:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003e2:	f023 0308 	bic.w	r3, r3, #8
 80003e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e8:	e010      	b.n	800040c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a0f      	ldr	r2, [pc, #60]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0xfc>
			GPIOE_PCLK_DI();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f6:	4a09      	ldr	r2, [pc, #36]	@ (800041c <GPIO_PeriClockControl+0x118>)
 80003f8:	f023 0310 	bic.w	r3, r3, #16
 80003fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fe:	e005      	b.n	800040c <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_DI();
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a05      	ldr	r2, [pc, #20]	@ (800041c <GPIO_PeriClockControl+0x118>)
 8000406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40020000 	.word	0x40020000
 800041c:	40023800 	.word	0x40023800
 8000420:	40020400 	.word	0x40020400
 8000424:	40020800 	.word	0x40020800
 8000428:	40020c00 	.word	0x40020c00
 800042c:	40021000 	.word	0x40021000

08000430 <GPIO_Init>:


/* Init and DeInit  */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]

	//Enable Peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2101      	movs	r1, #1
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff5e 	bl	8000304 <GPIO_PeriClockControl>

	//1.configure modes
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG ){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	795b      	ldrb	r3, [r3, #5]
 800044c:	2b03      	cmp	r3, #3
 800044e:	d81f      	bhi.n	8000490 <GPIO_Init+0x60>
       //non interrupt mode
       temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	461a      	mov	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	617b      	str	r3, [r7, #20]
       pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing 2bits before setting
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	791b      	ldrb	r3, [r3, #4]
 800046c:	4619      	mov	r1, r3
 800046e:	2303      	movs	r3, #3
 8000470:	408b      	lsls	r3, r1
 8000472:	43db      	mvns	r3, r3
 8000474:	4619      	mov	r1, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	400a      	ands	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
       pGPIOHandle->pGPIOx->MODER |=temp; //setting
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	6819      	ldr	r1, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	430a      	orrs	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	e09e      	b.n	80005ce <GPIO_Init+0x19e>
	 }
	 else{
		 //this for interrupt mode
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	2b04      	cmp	r3, #4
 8000496:	d117      	bne.n	80004c8 <GPIO_Init+0x98>
			 //1. configure Falling Trigger Selection Register
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b9c      	ldr	r3, [pc, #624]	@ (800070c <GPIO_Init+0x2dc>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a98      	ldr	r2, [pc, #608]	@ (800070c <GPIO_Init+0x2dc>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	60d3      	str	r3, [r2, #12]
			 //clearing RTSR bit to avoid previous configuration issues
			 EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b97      	ldr	r3, [pc, #604]	@ (800070c <GPIO_Init+0x2dc>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	43d2      	mvns	r2, r2
 80004be:	4611      	mov	r1, r2
 80004c0:	4a92      	ldr	r2, [pc, #584]	@ (800070c <GPIO_Init+0x2dc>)
 80004c2:	400b      	ands	r3, r1
 80004c4:	6093      	str	r3, [r2, #8]
 80004c6:	e035      	b.n	8000534 <GPIO_Init+0x104>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	795b      	ldrb	r3, [r3, #5]
 80004cc:	2b05      	cmp	r3, #5
 80004ce:	d117      	bne.n	8000500 <GPIO_Init+0xd0>
			 //1. configure Rising Trigger Selection Register
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d0:	4b8e      	ldr	r3, [pc, #568]	@ (800070c <GPIO_Init+0x2dc>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	4611      	mov	r1, r2
 80004e0:	4a8a      	ldr	r2, [pc, #552]	@ (800070c <GPIO_Init+0x2dc>)
 80004e2:	430b      	orrs	r3, r1
 80004e4:	6093      	str	r3, [r2, #8]
			//clearing FTSR bit to avoid previous configuration issues
             EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	4b89      	ldr	r3, [pc, #548]	@ (800070c <GPIO_Init+0x2dc>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7912      	ldrb	r2, [r2, #4]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a84      	ldr	r2, [pc, #528]	@ (800070c <GPIO_Init+0x2dc>)
 80004fa:	400b      	ands	r3, r1
 80004fc:	60d3      	str	r3, [r2, #12]
 80004fe:	e019      	b.n	8000534 <GPIO_Init+0x104>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	2b06      	cmp	r3, #6
 8000506:	d115      	bne.n	8000534 <GPIO_Init+0x104>
			 //1. configure both FTSR and RTSR
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000508:	4b80      	ldr	r3, [pc, #512]	@ (800070c <GPIO_Init+0x2dc>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7912      	ldrb	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	4611      	mov	r1, r2
 8000518:	4a7c      	ldr	r2, [pc, #496]	@ (800070c <GPIO_Init+0x2dc>)
 800051a:	430b      	orrs	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b7b      	ldr	r3, [pc, #492]	@ (800070c <GPIO_Init+0x2dc>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a77      	ldr	r2, [pc, #476]	@ (800070c <GPIO_Init+0x2dc>)
 8000530:	430b      	orrs	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
		 }
		 //2.configure GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	089b      	lsrs	r3, r3, #2
 800053a:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	791b      	ldrb	r3, [r3, #4]
 8000540:	f003 0303 	and.w	r3, r3, #3
 8000544:	74bb      	strb	r3, [r7, #18]

		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a71      	ldr	r2, [pc, #452]	@ (8000710 <GPIO_Init+0x2e0>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d024      	beq.n	800059a <GPIO_Init+0x16a>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a6f      	ldr	r2, [pc, #444]	@ (8000714 <GPIO_Init+0x2e4>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d01d      	beq.n	8000596 <GPIO_Init+0x166>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a6e      	ldr	r2, [pc, #440]	@ (8000718 <GPIO_Init+0x2e8>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d016      	beq.n	8000592 <GPIO_Init+0x162>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a6c      	ldr	r2, [pc, #432]	@ (800071c <GPIO_Init+0x2ec>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d00f      	beq.n	800058e <GPIO_Init+0x15e>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a6b      	ldr	r2, [pc, #428]	@ (8000720 <GPIO_Init+0x2f0>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d008      	beq.n	800058a <GPIO_Init+0x15a>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a69      	ldr	r2, [pc, #420]	@ (8000724 <GPIO_Init+0x2f4>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d101      	bne.n	8000586 <GPIO_Init+0x156>
 8000582:	2307      	movs	r3, #7
 8000584:	e00a      	b.n	800059c <GPIO_Init+0x16c>
 8000586:	2300      	movs	r3, #0
 8000588:	e008      	b.n	800059c <GPIO_Init+0x16c>
 800058a:	2304      	movs	r3, #4
 800058c:	e006      	b.n	800059c <GPIO_Init+0x16c>
 800058e:	2303      	movs	r3, #3
 8000590:	e004      	b.n	800059c <GPIO_Init+0x16c>
 8000592:	2302      	movs	r3, #2
 8000594:	e002      	b.n	800059c <GPIO_Init+0x16c>
 8000596:	2301      	movs	r3, #1
 8000598:	e000      	b.n	800059c <GPIO_Init+0x16c>
 800059a:	2300      	movs	r3, #0
 800059c:	747b      	strb	r3, [r7, #17]

		 SYSCFG_PCLK_EN();
 800059e:	4b62      	ldr	r3, [pc, #392]	@ (8000728 <GPIO_Init+0x2f8>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	4a61      	ldr	r2, [pc, #388]	@ (8000728 <GPIO_Init+0x2f8>)
 80005a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a8:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 80005aa:	7c7a      	ldrb	r2, [r7, #17]
 80005ac:	7cbb      	ldrb	r3, [r7, #18]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	fa02 f103 	lsl.w	r1, r2, r3
 80005b4:	4a5d      	ldr	r2, [pc, #372]	@ (800072c <GPIO_Init+0x2fc>)
 80005b6:	7cfb      	ldrb	r3, [r7, #19]
 80005b8:	3302      	adds	r3, #2
 80005ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 //3.enable EXTI interrupt delivery using IMR
		 EXTI->IMR =(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	461a      	mov	r2, r3
 80005c4:	2301      	movs	r3, #1
 80005c6:	fa03 f202 	lsl.w	r2, r3, r2
 80005ca:	4b50      	ldr	r3, [pc, #320]	@ (800070c <GPIO_Init+0x2dc>)
 80005cc:	601a      	str	r2, [r3, #0]
	 }
	 temp=0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

	 //2.configure speed
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	799b      	ldrb	r3, [r3, #6]
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	4619      	mov	r1, r3
 80005f0:	2303      	movs	r3, #3
 80005f2:	408b      	lsls	r3, r1
 80005f4:	43db      	mvns	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	400a      	ands	r2, r1
 80005fe:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDR |=temp; //setting
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6899      	ldr	r1, [r3, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	697a      	ldr	r2, [r7, #20]
 800060c:	430a      	orrs	r2, r1
 800060e:	609a      	str	r2, [r3, #8]

	 temp=0;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]

	 //3.configure output types
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7a1b      	ldrb	r3, [r3, #8]
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 1bit before setting
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	4619      	mov	r1, r3
 8000630:	2301      	movs	r3, #1
 8000632:	408b      	lsls	r3, r1
 8000634:	43db      	mvns	r3, r3
 8000636:	4619      	mov	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	400a      	ands	r2, r1
 800063e:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |=temp; //setting
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6859      	ldr	r1, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	430a      	orrs	r2, r1
 800064e:	605a      	str	r2, [r3, #4]

	 temp=0;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]

	 //4. configure pull up/pull down
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	79db      	ldrb	r3, [r3, #7]
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	4619      	mov	r1, r3
 8000672:	2303      	movs	r3, #3
 8000674:	408b      	lsls	r3, r1
 8000676:	43db      	mvns	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	60da      	str	r2, [r3, #12]
     pGPIOHandle->pGPIOx->PUPDR |=temp;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68d9      	ldr	r1, [r3, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]

	 temp=0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

	 //5.configure alternate functionality
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_ALTFN ){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7a5b      	ldrb	r3, [r3, #9]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d131      	bne.n	8000702 <GPIO_Init+0x2d2>
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xFF <<(4*temp2));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	7c3a      	ldrb	r2, [r7, #16]
 80006b6:	3208      	adds	r2, #8
 80006b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	22ff      	movs	r2, #255	@ 0xff
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	7c3a      	ldrb	r2, [r7, #16]
 80006d0:	4001      	ands	r1, r0
 80006d2:	3208      	adds	r2, #8
 80006d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	7c3a      	ldrb	r2, [r7, #16]
 80006de:	3208      	adds	r2, #8
 80006e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7a5b      	ldrb	r3, [r3, #9]
 80006e8:	461a      	mov	r2, r3
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7c3a      	ldrb	r2, [r7, #16]
 80006fa:	4301      	orrs	r1, r0
 80006fc:	3208      	adds	r2, #8
 80006fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }

}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40013c00 	.word	0x40013c00
 8000710:	40020000 	.word	0x40020000
 8000714:	40020400 	.word	0x40020400
 8000718:	40020800 	.word	0x40020800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40021000 	.word	0x40021000
 8000724:	40021c00 	.word	0x40021c00
 8000728:	40023800 	.word	0x40023800
 800072c:	40013800 	.word	0x40013800

08000730 <SPI_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi){
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d132      	bne.n	80007a8 <SPI_PeriClockControl+0x78>
		if(pSPIx == SPI1){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a34      	ldr	r2, [pc, #208]	@ (8000818 <SPI_PeriClockControl+0xe8>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800074a:	4b34      	ldr	r3, [pc, #208]	@ (800081c <SPI_PeriClockControl+0xec>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074e:	4a33      	ldr	r2, [pc, #204]	@ (800081c <SPI_PeriClockControl+0xec>)
 8000750:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000754:	6453      	str	r3, [r2, #68]	@ 0x44
		}
		else{
			SPI5_PCLK_DI();
		}
	}
}
 8000756:	e059      	b.n	800080c <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI2){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a31      	ldr	r2, [pc, #196]	@ (8000820 <SPI_PeriClockControl+0xf0>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000760:	4b2e      	ldr	r3, [pc, #184]	@ (800081c <SPI_PeriClockControl+0xec>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a2d      	ldr	r2, [pc, #180]	@ (800081c <SPI_PeriClockControl+0xec>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800076c:	e04e      	b.n	800080c <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI3){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a2c      	ldr	r2, [pc, #176]	@ (8000824 <SPI_PeriClockControl+0xf4>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000776:	4b29      	ldr	r3, [pc, #164]	@ (800081c <SPI_PeriClockControl+0xec>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a28      	ldr	r2, [pc, #160]	@ (800081c <SPI_PeriClockControl+0xec>)
 800077c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000782:	e043      	b.n	800080c <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI4){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a28      	ldr	r2, [pc, #160]	@ (8000828 <SPI_PeriClockControl+0xf8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 800078c:	4b23      	ldr	r3, [pc, #140]	@ (800081c <SPI_PeriClockControl+0xec>)
 800078e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000790:	4a22      	ldr	r2, [pc, #136]	@ (800081c <SPI_PeriClockControl+0xec>)
 8000792:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000796:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000798:	e038      	b.n	800080c <SPI_PeriClockControl+0xdc>
			SPI5_PCLK_EN();
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <SPI_PeriClockControl+0xec>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	4a1f      	ldr	r2, [pc, #124]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007a4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007a6:	e031      	b.n	800080c <SPI_PeriClockControl+0xdc>
		if(pSPIx == SPI1){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <SPI_PeriClockControl+0xe8>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <SPI_PeriClockControl+0x8e>
			SPI1_PCLK_DI();
 80007b0:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b4:	4a19      	ldr	r2, [pc, #100]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007ba:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007bc:	e026      	b.n	800080c <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI2){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a17      	ldr	r2, [pc, #92]	@ (8000820 <SPI_PeriClockControl+0xf0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <SPI_PeriClockControl+0xa4>
			SPI2_PCLK_DI();
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007d2:	e01b      	b.n	800080c <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI3){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <SPI_PeriClockControl+0xf4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <SPI_PeriClockControl+0xba>
			SPI3_PCLK_DI();
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007e8:	e010      	b.n	800080c <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI4){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000828 <SPI_PeriClockControl+0xf8>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <SPI_PeriClockControl+0xd0>
			SPI4_PCLK_DI();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	4a09      	ldr	r2, [pc, #36]	@ (800081c <SPI_PeriClockControl+0xec>)
 80007f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007fe:	e005      	b.n	800080c <SPI_PeriClockControl+0xdc>
			SPI5_PCLK_DI();
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SPI_PeriClockControl+0xec>)
 8000802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000804:	4a05      	ldr	r2, [pc, #20]	@ (800081c <SPI_PeriClockControl+0xec>)
 8000806:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800080a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40013000 	.word	0x40013000
 800081c:	40023800 	.word	0x40023800
 8000820:	40003800 	.word	0x40003800
 8000824:	40003c00 	.word	0x40003c00
 8000828:	40013400 	.word	0x40013400

0800082c <SPI_Init>:

/* Init and DeInit  */

void SPI_Init(SPI_Handle_t *pSPIHandle){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

      //Enable peripheral clock
	  SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2101      	movs	r1, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff78 	bl	8000730 <SPI_PeriClockControl>

	  uint32_t tempreg = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
	  //1. Configure Device Mode
	  tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]

	  //2.Configure Bus Config
	  if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	795b      	ldrb	r3, [r3, #5]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d104      	bne.n	8000862 <SPI_Init+0x36>
		  //clear bidi mode
		  tempreg &= ~(1<<15);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	e01d      	b.n	800089e <SPI_Init+0x72>
	  }
	  else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795b      	ldrb	r3, [r3, #5]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d104      	bne.n	8000874 <SPI_Init+0x48>
		  //set bidi mode
		  tempreg |= (1<<15);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e014      	b.n	800089e <SPI_Init+0x72>
	  }
	  else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_TXONLY){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d104      	bne.n	8000886 <SPI_Init+0x5a>
		  //set bidi mode
		  tempreg |= (1<<14);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e00b      	b.n	800089e <SPI_Init+0x72>
	  }
	  else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d107      	bne.n	800089e <SPI_Init+0x72>
		  //clear bidi mode
		  tempreg &= ~(1<<15);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000894:	60fb      	str	r3, [r7, #12]
		  //set RXONLY bit
		  tempreg |= (1<<10);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800089c:	60fb      	str	r3, [r7, #12]
	  }

	  //3. configure clk speed
	  tempreg |= pSPIHandle->SPIConfig.SPI_SClkSpeed << SPI_CR1_BR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	799b      	ldrb	r3, [r3, #6]
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]

	  //4.Configure DFF
	  tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	79db      	ldrb	r3, [r3, #7]
 80008ae:	02db      	lsls	r3, r3, #11
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]

	  //5. Configure CPOL
	  tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7a5b      	ldrb	r3, [r3, #9]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]

	  //6.Configure CPHA
	  tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7a1b      	ldrb	r3, [r3, #8]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]

	  //7.configure SSM
	  tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7a9b      	ldrb	r3, [r3, #10]
 80008d2:	025b      	lsls	r3, r3, #9
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]

	  pSPIHandle->pSPIx->CR1 = tempreg;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <SPI_GetFlagStatus>:
	else{
		SPI5_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName){
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	4013      	ands	r3, r2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SPI_SendData>:

/* Data Send and Receive  */
// This is Blocking Call

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
	 while(Len>0){
 800091e:	e027      	b.n	8000970 <SPI_SendData+0x5e>
		 //wait until tx buffer is set (set 1 denotes empty)
		 while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET); //polling for TXE flag to set
 8000920:	bf00      	nop
 8000922:	2102      	movs	r1, #2
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f7ff ffe0 	bl	80008ea <SPI_GetFlagStatus>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f8      	beq.n	8000922 <SPI_SendData+0x10>

		 //check DFF bit in CR1
		 if((pSPIx->CR1 & (1<<SPI_CR1_DFF))){
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00e      	beq.n	800095a <SPI_SendData+0x48>
			 //16bit DFF
			 pSPIx->DR = *((uint16_t*)pTxBuffer); // buffer is type casting to store 16bit
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	60da      	str	r2, [r3, #12]
			 Len--;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b01      	subs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
			 Len--; // two time decrement -> 2bytes
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
			 (uint16_t*)pTxBuffer++; //inc pointer
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3301      	adds	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	e00a      	b.n	8000970 <SPI_SendData+0x5e>
		 }
		 else{
			 //8bit DFF
			 pSPIx->DR = *pTxBuffer;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	60da      	str	r2, [r3, #12]
			 Len--; // one time decrement -> 1byte
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
			 pTxBuffer++;
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	3301      	adds	r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
	 while(Len>0){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1d4      	bne.n	8000920 <SPI_SendData+0xe>
		 }
	 }
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SPI_Peripheralcontrol>:

void SPI_IRQHandling(SPI_Handle_t *pHandle);



void SPI_Peripheralcontrol(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <SPI_Peripheralcontrol+0x20>
	pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
	}
	else{
	pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);

	}
}
 800099e:	e005      	b.n	80009ac <SPI_Peripheralcontrol+0x2c>
	pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d106      	bne.n	80009d8 <SPI_SSIConfig+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SSI);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	601a      	str	r2, [r3, #0]
		}
		else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);

		}
}
 80009d6:	e005      	b.n	80009e4 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <__libc_init_array>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000a28 <__libc_init_array+0x38>)
 80009f4:	4c0d      	ldr	r4, [pc, #52]	@ (8000a2c <__libc_init_array+0x3c>)
 80009f6:	1b64      	subs	r4, r4, r5
 80009f8:	10a4      	asrs	r4, r4, #2
 80009fa:	2600      	movs	r6, #0
 80009fc:	42a6      	cmp	r6, r4
 80009fe:	d109      	bne.n	8000a14 <__libc_init_array+0x24>
 8000a00:	4d0b      	ldr	r5, [pc, #44]	@ (8000a30 <__libc_init_array+0x40>)
 8000a02:	4c0c      	ldr	r4, [pc, #48]	@ (8000a34 <__libc_init_array+0x44>)
 8000a04:	f000 f818 	bl	8000a38 <_init>
 8000a08:	1b64      	subs	r4, r4, r5
 8000a0a:	10a4      	asrs	r4, r4, #2
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	42a6      	cmp	r6, r4
 8000a10:	d105      	bne.n	8000a1e <__libc_init_array+0x2e>
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a18:	4798      	blx	r3
 8000a1a:	3601      	adds	r6, #1
 8000a1c:	e7ee      	b.n	80009fc <__libc_init_array+0xc>
 8000a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a22:	4798      	blx	r3
 8000a24:	3601      	adds	r6, #1
 8000a26:	e7f2      	b.n	8000a0e <__libc_init_array+0x1e>
 8000a28:	08000a64 	.word	0x08000a64
 8000a2c:	08000a64 	.word	0x08000a64
 8000a30:	08000a64 	.word	0x08000a64
 8000a34:	08000a68 	.word	0x08000a68

08000a38 <_init>:
 8000a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3a:	bf00      	nop
 8000a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3e:	bc08      	pop	{r3}
 8000a40:	469e      	mov	lr, r3
 8000a42:	4770      	bx	lr

08000a44 <_fini>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr
