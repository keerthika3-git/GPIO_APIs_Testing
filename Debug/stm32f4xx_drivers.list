
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800281c  0800281c  0000381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002930  08002930  00004084  2**0
                  CONTENTS
  4 .ARM          00000008  08002930  08002930  00003930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002938  08002938  00004084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002938  08002938  00003938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800293c  0800293c  0000393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08002940  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  20000084  080029c4  00004084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  080029c4  000046c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019b4  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000670  00000000  00000000  00005a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  000060d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000140  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000030d7  00000000  00000000  000063d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029cc  00000000  00000000  000094af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000afaf  00000000  00000000  0000be7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00016e2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001154  00000000  00000000  00016e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00017fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002804 	.word	0x08002804

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08002804 	.word	0x08002804

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <USART2_Init>:
uint8_t g_data = 0;



void USART2_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART1;
 8000294:	4b0d      	ldr	r3, [pc, #52]	@ (80002cc <USART2_Init+0x3c>)
 8000296:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <USART2_Init+0x40>)
 8000298:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800029a:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <USART2_Init+0x3c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a0:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <USART2_Init+0x3c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80002a8:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <USART2_Init+0x3c>)
 80002aa:	2202      	movs	r2, #2
 80002ac:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <USART2_Init+0x3c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <USART2_Init+0x3c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002ba:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <USART2_Init+0x3c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 80002c0:	4802      	ldr	r0, [pc, #8]	@ (80002cc <USART2_Init+0x3c>)
 80002c2:	f000 fcf1 	bl	8000ca8 <USART_Init>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200004a0 	.word	0x200004a0
 80002d0:	40011000 	.word	0x40011000

080002d4 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOB;
 80002da:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <USART2_GPIOInit+0x6c>)
 80002dc:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002de:	2302      	movs	r3, #2
 80002e0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002e2:	2300      	movs	r3, #0
 80002e4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 80002e6:	2301      	movs	r3, #1
 80002e8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ea:	2302      	movs	r3, #2
 80002ec:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 80002ee:	2307      	movs	r3, #7
 80002f0:	737b      	strb	r3, [r7, #13]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	4812      	ldr	r0, [pc, #72]	@ (8000340 <USART2_GPIOInit+0x6c>)
 80002f6:	f000 f98b 	bl	8000610 <GPIO_PeriClockControl>
	usart_gpios.pGPIOx->MODER = 0x00000000;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
	usart_gpios.pGPIOx->OSPEEDR= 0x00000000;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
	usart_gpios.pGPIOx->OTYPER=0x00000000;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
	usart_gpios.pGPIOx->PUPDR=0x00000000;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
	usart_gpios.pGPIOx->AFRL[0]=0x00000000;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
	usart_gpios.pGPIOx->AFRL[1]=0x00000000;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	@ 0x24

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_6; // pin no d10
 800031e:	2306      	movs	r3, #6
 8000320:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa09 	bl	800073c <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;// In CN7(21 pin)
 800032a:	2307      	movs	r3, #7
 800032c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fa03 	bl	800073c <GPIO_Init>

}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40020400 	.word	0x40020400

08000344 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 800034a:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <GPIO_ButtonInit+0x7c>)
 800034c:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800034e:	230d      	movs	r3, #13
 8000350:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000352:	2300      	movs	r3, #0
 8000354:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000356:	2302      	movs	r3, #2
 8000358:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800035a:	2300      	movs	r3, #0
 800035c:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOBtn.pGPIOx, ENABLE);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	2101      	movs	r1, #1
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f954 	bl	8000610 <GPIO_PeriClockControl>
	GPIOBtn.pGPIOx->MODER = 0x00000000;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
	GPIOBtn.pGPIOx->OSPEEDR= 0x00000000;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
	GPIOBtn.pGPIOx->PUPDR=0x00000000;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
	GPIOBtn.pGPIOx->AFRL[0]=0x00000000;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
	GPIOBtn.pGPIOx->AFRL[1]=0x00000000;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIO_Init(&GPIOBtn);
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f9d6 	bl	800073c <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000390:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <GPIO_ButtonInit+0x80>)
 8000392:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000394:	230c      	movs	r3, #12
 8000396:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000398:	2301      	movs	r3, #1
 800039a:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800039c:	2302      	movs	r3, #2
 800039e:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80003a0:	2301      	movs	r3, #1
 80003a2:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003a4:	2300      	movs	r3, #0
 80003a6:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80003a8:	2101      	movs	r1, #1
 80003aa:	4806      	ldr	r0, [pc, #24]	@ (80003c4 <GPIO_ButtonInit+0x80>)
 80003ac:	f000 f930 	bl	8000610 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80003b0:	463b      	mov	r3, r7
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f9c2 	bl	800073c <GPIO_Init>

}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40020800 	.word	0x40020800
 80003c4:	40020c00 	.word	0x40020c00

080003c8 <delay>:

void delay(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	e002      	b.n	80003da <delay+0x12>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3301      	adds	r3, #1
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <delay+0x28>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d9f8      	bls.n	80003d4 <delay+0xc>
}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	0003d08f 	.word	0x0003d08f

080003f4 <main>:

int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 80003fa:	f002 f985 	bl	8002708 <initialise_monitor_handles>

    printf("Application is running\n");
 80003fe:	4839      	ldr	r0, [pc, #228]	@ (80004e4 <main+0xf0>)
 8000400:	f001 f906 	bl	8001610 <puts>
	uint32_t cnt = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]

	GPIO_ButtonInit();
 8000408:	f7ff ff9c 	bl	8000344 <GPIO_ButtonInit>
	USART2_GPIOInit();
 800040c:	f7ff ff62 	bl	80002d4 <USART2_GPIOInit>
    USART2_Init();
 8000410:	f7ff ff3e 	bl	8000290 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART1,ENABLE);
 8000414:	2101      	movs	r1, #1
 8000416:	2025      	movs	r0, #37	@ 0x25
 8000418:	f000 fda8 	bl	8000f6c <USART_IRQInterruptConfig>

    USART_Peripheralcontrol(USART1,ENABLE);
 800041c:	2101      	movs	r1, #1
 800041e:	4832      	ldr	r0, [pc, #200]	@ (80004e8 <main+0xf4>)
 8000420:	f000 fcc3 	bl	8000daa <USART_Peripheralcontrol>

    printf("All Peripheral and GPIO initializations are done\n");
 8000424:	4831      	ldr	r0, [pc, #196]	@ (80004ec <main+0xf8>)
 8000426:	f001 f8f3 	bl	8001610 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) == BTN_PRESSED );
 800042a:	bf00      	nop
 800042c:	210d      	movs	r1, #13
 800042e:	4830      	ldr	r0, [pc, #192]	@ (80004f0 <main+0xfc>)
 8000430:	f000 fb02 	bl	8000a38 <GPIO_ReadFromInputPin>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1f8      	bne.n	800042c <main+0x38>

		printf("Communication Started....\n");
 800043a:	482e      	ldr	r0, [pc, #184]	@ (80004f4 <main+0x100>)
 800043c:	f001 f8e8 	bl	8001610 <puts>
		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000440:	f7ff ffc2 	bl	80003c8 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <main+0x104>)
 8000448:	fba3 1302 	umull	r1, r3, r3, r2
 800044c:	0859      	lsrs	r1, r3, #1
 800044e:	460b      	mov	r3, r1
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	440b      	add	r3, r1
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 8000458:	bf00      	nop
 800045a:	4a28      	ldr	r2, [pc, #160]	@ (80004fc <main+0x108>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff febc 	bl	80001e0 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4924      	ldr	r1, [pc, #144]	@ (8000500 <main+0x10c>)
 800046e:	4825      	ldr	r0, [pc, #148]	@ (8000504 <main+0x110>)
 8000470:	f000 fd53 	bl	8000f1a <USART_ReceiveDataIT>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1ef      	bne.n	800045a <main+0x66>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 800047a:	4a20      	ldr	r2, [pc, #128]	@ (80004fc <main+0x108>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000482:	4a1e      	ldr	r2, [pc, #120]	@ (80004fc <main+0x108>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fea8 	bl	80001e0 <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	461a      	mov	r2, r3
 8000494:	4621      	mov	r1, r4
 8000496:	481b      	ldr	r0, [pc, #108]	@ (8000504 <main+0x110>)
 8000498:	f000 fcf1 	bl	8000e7e <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 800049c:	4a17      	ldr	r2, [pc, #92]	@ (80004fc <main+0x108>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a4:	4619      	mov	r1, r3
 80004a6:	4818      	ldr	r0, [pc, #96]	@ (8000508 <main+0x114>)
 80004a8:	f001 f84a 	bl	8001540 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 80004ac:	bf00      	nop
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <main+0x118>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d1fb      	bne.n	80004ae <main+0xba>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 80004b6:	4a11      	ldr	r2, [pc, #68]	@ (80004fc <main+0x108>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fe8e 	bl	80001e0 <strlen>
 80004c4:	4603      	mov	r3, r0
 80004c6:	3301      	adds	r3, #1
 80004c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <main+0x10c>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 80004ce:	490c      	ldr	r1, [pc, #48]	@ (8000500 <main+0x10c>)
 80004d0:	480f      	ldr	r0, [pc, #60]	@ (8000510 <main+0x11c>)
 80004d2:	f001 f835 	bl	8001540 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <main+0x118>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) == BTN_PRESSED );
 80004e2:	e7a2      	b.n	800042a <main+0x36>
 80004e4:	08002854 	.word	0x08002854
 80004e8:	40011000 	.word	0x40011000
 80004ec:	0800286c 	.word	0x0800286c
 80004f0:	40020800 	.word	0x40020800
 80004f4:	080028a0 	.word	0x080028a0
 80004f8:	aaaaaaab 	.word	0xaaaaaaab
 80004fc:	20000000 	.word	0x20000000
 8000500:	200000a0 	.word	0x200000a0
 8000504:	200004a0 	.word	0x200004a0
 8000508:	080028bc 	.word	0x080028bc
 800050c:	200004c4 	.word	0x200004c4
 8000510:	080028d0 	.word	0x080028d0

08000514 <USART1_IRQHandler>:
	return 0;
}


void USART1_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8000518:	4802      	ldr	r0, [pc, #8]	@ (8000524 <USART1_IRQHandler+0x10>)
 800051a:	f000 fdad 	bl	8001078 <USART_IRQHandling>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200004a0 	.word	0x200004a0

08000528 <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d102      	bne.n	8000540 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 800053a:	4b04      	ldr	r3, [pc, #16]	@ (800054c <USART_ApplicationEventCallback+0x24>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	200004c4 	.word	0x200004c4

08000550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000558:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <_sbrk+0x5c>)
 800055a:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <_sbrk+0x60>)
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000564:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800056c:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <_sbrk+0x64>)
 800056e:	4a12      	ldr	r2, [pc, #72]	@ (80005b8 <_sbrk+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	429a      	cmp	r2, r3
 800057e:	d207      	bcs.n	8000590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000580:	f001 f974 	bl	800186c <__errno>
 8000584:	4603      	mov	r3, r0
 8000586:	220c      	movs	r2, #12
 8000588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	e009      	b.n	80005a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <_sbrk+0x64>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000596:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	4a05      	ldr	r2, [pc, #20]	@ (80005b4 <_sbrk+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20020000 	.word	0x20020000
 80005b0:	00000400 	.word	0x00000400
 80005b4:	200004c8 	.word	0x200004c8
 80005b8:	200006c8 	.word	0x200006c8

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	@ (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ea:	f001 f945 	bl	8001878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff ff01 	bl	80003f4 <main>

080005f2 <LoopForever>:

LoopForever:
  b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000600:	08002940 	.word	0x08002940
  ldr r2, =_sbss
 8000604:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000608:	200006c4 	.word	0x200006c4

0800060c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <GPIO_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d13d      	bne.n	800069e <GPIO_PeriClockControl+0x8e>
		if(pGPIOx == GPIOA){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a3f      	ldr	r2, [pc, #252]	@ (8000724 <GPIO_PeriClockControl+0x114>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800062a:	4b3f      	ldr	r3, [pc, #252]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a3e      	ldr	r2, [pc, #248]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
		else{
			GPIOH_PCLK_DI();
		}

	}
}
 8000636:	e06f      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a3c      	ldr	r2, [pc, #240]	@ (800072c <GPIO_PeriClockControl+0x11c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000640:	4b39      	ldr	r3, [pc, #228]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000644:	4a38      	ldr	r2, [pc, #224]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000646:	f043 0302 	orr.w	r3, r3, #2
 800064a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800064c:	e064      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a37      	ldr	r2, [pc, #220]	@ (8000730 <GPIO_PeriClockControl+0x120>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a33      	ldr	r2, [pc, #204]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000662:	e059      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a33      	ldr	r2, [pc, #204]	@ (8000734 <GPIO_PeriClockControl+0x124>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d106      	bne.n	800067a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800066c:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000670:	4a2d      	ldr	r2, [pc, #180]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000678:	e04e      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a2e      	ldr	r2, [pc, #184]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a28      	ldr	r2, [pc, #160]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800068e:	e043      	b.n	8000718 <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_EN();
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	4a24      	ldr	r2, [pc, #144]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800069c:	e03c      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		if(pGPIOx == GPIOA){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <GPIO_PeriClockControl+0x114>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_PeriClockControl+0xa4>
			GPIOA_PCLK_DI();
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006ac:	f023 0301 	bic.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006b2:	e031      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a1d      	ldr	r2, [pc, #116]	@ (800072c <GPIO_PeriClockControl+0x11c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <GPIO_PeriClockControl+0xba>
			GPIOB_PCLK_DI();
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006c2:	f023 0302 	bic.w	r3, r3, #2
 80006c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c8:	e026      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <GPIO_PeriClockControl+0x120>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <GPIO_PeriClockControl+0xd0>
			GPIOC_PCLK_DI();
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a14      	ldr	r2, [pc, #80]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006d8:	f023 0304 	bic.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006de:	e01b      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <GPIO_PeriClockControl+0x124>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d106      	bne.n	80006f6 <GPIO_PeriClockControl+0xe6>
			GPIOD_PCLK_DI();
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 80006ee:	f023 0308 	bic.w	r3, r3, #8
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f4:	e010      	b.n	8000718 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d106      	bne.n	800070c <GPIO_PeriClockControl+0xfc>
			GPIOE_PCLK_DI();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a09      	ldr	r2, [pc, #36]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000704:	f023 0310 	bic.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800070a:	e005      	b.n	8000718 <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_DI();
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <GPIO_PeriClockControl+0x118>)
 8000712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40020000 	.word	0x40020000
 8000728:	40023800 	.word	0x40023800
 800072c:	40020400 	.word	0x40020400
 8000730:	40020800 	.word	0x40020800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40021000 	.word	0x40021000

0800073c <GPIO_Init>:


/* Init and DeInit  */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]

//	//Enable Peripheral clock
//	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);

	//1.configure modes
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG ){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	795b      	ldrb	r3, [r3, #5]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d81f      	bhi.n	8000790 <GPIO_Init+0x54>

       //non interrupt mode
       temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	461a      	mov	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	617b      	str	r3, [r7, #20]
       pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing 2bits before setting
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	2303      	movs	r3, #3
 8000770:	408b      	lsls	r3, r1
 8000772:	43db      	mvns	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	400a      	ands	r2, r1
 800077c:	601a      	str	r2, [r3, #0]
       pGPIOHandle->pGPIOx->MODER |=temp; //setting
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6819      	ldr	r1, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e09e      	b.n	80008ce <GPIO_Init+0x192>
	 }
	 else{


		 //this for interrupt mode
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	795b      	ldrb	r3, [r3, #5]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d117      	bne.n	80007c8 <GPIO_Init+0x8c>
			 //1. configure Falling Trigger Selection Register
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000798:	4b9e      	ldr	r3, [pc, #632]	@ (8000a14 <GPIO_Init+0x2d8>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	7912      	ldrb	r2, [r2, #4]
 80007a0:	4611      	mov	r1, r2
 80007a2:	2201      	movs	r2, #1
 80007a4:	408a      	lsls	r2, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a9a      	ldr	r2, [pc, #616]	@ (8000a14 <GPIO_Init+0x2d8>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	60d3      	str	r3, [r2, #12]
			 //clearing RTSR bit to avoid previous configuration issues
			 EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ae:	4b99      	ldr	r3, [pc, #612]	@ (8000a14 <GPIO_Init+0x2d8>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	7912      	ldrb	r2, [r2, #4]
 80007b6:	4611      	mov	r1, r2
 80007b8:	2201      	movs	r2, #1
 80007ba:	408a      	lsls	r2, r1
 80007bc:	43d2      	mvns	r2, r2
 80007be:	4611      	mov	r1, r2
 80007c0:	4a94      	ldr	r2, [pc, #592]	@ (8000a14 <GPIO_Init+0x2d8>)
 80007c2:	400b      	ands	r3, r1
 80007c4:	6093      	str	r3, [r2, #8]
 80007c6:	e035      	b.n	8000834 <GPIO_Init+0xf8>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	d117      	bne.n	8000800 <GPIO_Init+0xc4>
			 //1. configure Rising Trigger Selection Register
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d0:	4b90      	ldr	r3, [pc, #576]	@ (8000a14 <GPIO_Init+0x2d8>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7912      	ldrb	r2, [r2, #4]
 80007d8:	4611      	mov	r1, r2
 80007da:	2201      	movs	r2, #1
 80007dc:	408a      	lsls	r2, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	4a8c      	ldr	r2, [pc, #560]	@ (8000a14 <GPIO_Init+0x2d8>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6093      	str	r3, [r2, #8]
			//clearing FTSR bit to avoid previous configuration issues
             EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e6:	4b8b      	ldr	r3, [pc, #556]	@ (8000a14 <GPIO_Init+0x2d8>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	7912      	ldrb	r2, [r2, #4]
 80007ee:	4611      	mov	r1, r2
 80007f0:	2201      	movs	r2, #1
 80007f2:	408a      	lsls	r2, r1
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a86      	ldr	r2, [pc, #536]	@ (8000a14 <GPIO_Init+0x2d8>)
 80007fa:	400b      	ands	r3, r1
 80007fc:	60d3      	str	r3, [r2, #12]
 80007fe:	e019      	b.n	8000834 <GPIO_Init+0xf8>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	2b06      	cmp	r3, #6
 8000806:	d115      	bne.n	8000834 <GPIO_Init+0xf8>
			 //1. configure both FTSR and RTSR
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000808:	4b82      	ldr	r3, [pc, #520]	@ (8000a14 <GPIO_Init+0x2d8>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	7912      	ldrb	r2, [r2, #4]
 8000810:	4611      	mov	r1, r2
 8000812:	2201      	movs	r2, #1
 8000814:	408a      	lsls	r2, r1
 8000816:	4611      	mov	r1, r2
 8000818:	4a7e      	ldr	r2, [pc, #504]	@ (8000a14 <GPIO_Init+0x2d8>)
 800081a:	430b      	orrs	r3, r1
 800081c:	60d3      	str	r3, [r2, #12]
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081e:	4b7d      	ldr	r3, [pc, #500]	@ (8000a14 <GPIO_Init+0x2d8>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	7912      	ldrb	r2, [r2, #4]
 8000826:	4611      	mov	r1, r2
 8000828:	2201      	movs	r2, #1
 800082a:	408a      	lsls	r2, r1
 800082c:	4611      	mov	r1, r2
 800082e:	4a79      	ldr	r2, [pc, #484]	@ (8000a14 <GPIO_Init+0x2d8>)
 8000830:	430b      	orrs	r3, r1
 8000832:	6093      	str	r3, [r2, #8]
		 }
		 //2.configure GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	089b      	lsrs	r3, r3, #2
 800083a:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	74bb      	strb	r3, [r7, #18]

		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a73      	ldr	r2, [pc, #460]	@ (8000a18 <GPIO_Init+0x2dc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d024      	beq.n	800089a <GPIO_Init+0x15e>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a71      	ldr	r2, [pc, #452]	@ (8000a1c <GPIO_Init+0x2e0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d01d      	beq.n	8000896 <GPIO_Init+0x15a>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a70      	ldr	r2, [pc, #448]	@ (8000a20 <GPIO_Init+0x2e4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d016      	beq.n	8000892 <GPIO_Init+0x156>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a6e      	ldr	r2, [pc, #440]	@ (8000a24 <GPIO_Init+0x2e8>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d00f      	beq.n	800088e <GPIO_Init+0x152>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a6d      	ldr	r2, [pc, #436]	@ (8000a28 <GPIO_Init+0x2ec>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d008      	beq.n	800088a <GPIO_Init+0x14e>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a6b      	ldr	r2, [pc, #428]	@ (8000a2c <GPIO_Init+0x2f0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <GPIO_Init+0x14a>
 8000882:	2307      	movs	r3, #7
 8000884:	e00a      	b.n	800089c <GPIO_Init+0x160>
 8000886:	2300      	movs	r3, #0
 8000888:	e008      	b.n	800089c <GPIO_Init+0x160>
 800088a:	2304      	movs	r3, #4
 800088c:	e006      	b.n	800089c <GPIO_Init+0x160>
 800088e:	2303      	movs	r3, #3
 8000890:	e004      	b.n	800089c <GPIO_Init+0x160>
 8000892:	2302      	movs	r3, #2
 8000894:	e002      	b.n	800089c <GPIO_Init+0x160>
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <GPIO_Init+0x160>
 800089a:	2300      	movs	r3, #0
 800089c:	747b      	strb	r3, [r7, #17]

		 SYSCFG_PCLK_EN();
 800089e:	4b64      	ldr	r3, [pc, #400]	@ (8000a30 <GPIO_Init+0x2f4>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a63      	ldr	r2, [pc, #396]	@ (8000a30 <GPIO_Init+0x2f4>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 80008aa:	7c7a      	ldrb	r2, [r7, #17]
 80008ac:	7cbb      	ldrb	r3, [r7, #18]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	fa02 f103 	lsl.w	r1, r2, r3
 80008b4:	4a5f      	ldr	r2, [pc, #380]	@ (8000a34 <GPIO_Init+0x2f8>)
 80008b6:	7cfb      	ldrb	r3, [r7, #19]
 80008b8:	3302      	adds	r3, #2
 80008ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 //3.enable EXTI interrupt delivery using IMR
		 EXTI->IMR =(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	461a      	mov	r2, r3
 80008c4:	2301      	movs	r3, #1
 80008c6:	fa03 f202 	lsl.w	r2, r3, r2
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <GPIO_Init+0x2d8>)
 80008cc:	601a      	str	r2, [r3, #0]
	 }

	 temp=0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
	 //2.configure speed
//	 if(pGPIOHandle->pGPIOx == GPIOA){
//
//	 pGPIOHandle->pGPIOx->OSPEEDR= 0x00000000;}
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	799b      	ldrb	r3, [r3, #6]
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2103      	movs	r1, #3
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	400a      	ands	r2, r1
 8000900:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDR |=temp; //setting
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6899      	ldr	r1, [r3, #8]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	430a      	orrs	r2, r1
 8000910:	609a      	str	r2, [r3, #8]

	 temp=0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

	 //3.configure output types
//	 if(pGPIOHandle->pGPIOx == GPIOA){
//	 pGPIOHandle->pGPIOx->OTYPER=0x00000000;}
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7a1b      	ldrb	r3, [r3, #8]
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 1bit before setting
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	4619      	mov	r1, r3
 8000932:	2301      	movs	r3, #1
 8000934:	408b      	lsls	r3, r1
 8000936:	43db      	mvns	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	400a      	ands	r2, r1
 8000940:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |=temp; //setting
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6859      	ldr	r1, [r3, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	430a      	orrs	r2, r1
 8000950:	605a      	str	r2, [r3, #4]

	 temp=0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]

	 //4. configure pull up/pull down
//	 if(pGPIOHandle->pGPIOx == GPIOA){
//	 pGPIOHandle->pGPIOx->PUPDR=0x00000000;}
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	79db      	ldrb	r3, [r3, #7]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << 2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	791b      	ldrb	r3, [r3, #4]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2103      	movs	r1, #3
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	400a      	ands	r2, r1
 8000984:	60da      	str	r2, [r3, #12]
     pGPIOHandle->pGPIOx->PUPDR |=temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68d9      	ldr	r1, [r3, #12]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	430a      	orrs	r2, r1
 8000994:	60da      	str	r2, [r3, #12]

	 temp=0;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]

	 //5.configure alternate functionality
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN ){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	795b      	ldrb	r3, [r3, #5]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d131      	bne.n	8000a06 <GPIO_Init+0x2ca>

		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xFF <<(4*temp2));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	7c3a      	ldrb	r2, [r7, #16]
 80009ba:	3208      	adds	r2, #8
 80009bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	22ff      	movs	r2, #255	@ 0xff
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	7c3a      	ldrb	r2, [r7, #16]
 80009d4:	4001      	ands	r1, r0
 80009d6:	3208      	adds	r2, #8
 80009d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	7c3a      	ldrb	r2, [r7, #16]
 80009e2:	3208      	adds	r2, #8
 80009e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7a5b      	ldrb	r3, [r3, #9]
 80009ec:	461a      	mov	r2, r3
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	7c3a      	ldrb	r2, [r7, #16]
 80009fe:	4301      	orrs	r1, r0
 8000a00:	3208      	adds	r2, #8
 8000a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }

}
 8000a06:	bf00      	nop
 8000a08:	371c      	adds	r7, #28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40013c00 	.word	0x40013c00
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40021c00 	.word	0x40021c00
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40013800 	.word	0x40013800

08000a38 <GPIO_ReadFromInputPin>:

}

/* Data read and write  */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
	uint8_t value =(uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001); //right shifting any pin number to least significant bit by setting everything 0
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	691a      	ldr	r2, [r3, #16]
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000a6a:	4b25      	ldr	r3, [pc, #148]	@ (8000b00 <RCC_GetPCLK1Value+0x9c>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000a78:	7a7b      	ldrb	r3, [r7, #9]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <RCC_GetPCLK1Value+0xa0>)
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e00b      	b.n	8000a9c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000a84:	7a7b      	ldrb	r3, [r7, #9]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d102      	bne.n	8000a90 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <RCC_GetPCLK1Value+0xa4>)
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e005      	b.n	8000a9c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000a90:	7a7b      	ldrb	r3, [r7, #9]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d102      	bne.n	8000a9c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000a96:	f000 f88d 	bl	8000bb4 <RCC_GetPLLOutputClock>
 8000a9a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <RCC_GetPCLK1Value+0x9c>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f003 030f 	and.w	r3, r3, #15
 8000aa8:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000aaa:	7a3b      	ldrb	r3, [r7, #8]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d802      	bhi.n	8000ab6 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	72fb      	strb	r3, [r7, #11]
 8000ab4:	e005      	b.n	8000ac2 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000ab6:	7a3b      	ldrb	r3, [r7, #8]
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <RCC_GetPCLK1Value+0xa8>)
 8000abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac0:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <RCC_GetPCLK1Value+0x9c>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	0a9b      	lsrs	r3, r3, #10
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000ad0:	7a3b      	ldrb	r3, [r7, #8]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d802      	bhi.n	8000adc <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	72bb      	strb	r3, [r7, #10]
 8000ada:	e004      	b.n	8000ae6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000adc:	7a3b      	ldrb	r3, [r7, #8]
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b10 <RCC_GetPCLK1Value+0xac>)
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000ae6:	7afb      	ldrb	r3, [r7, #11]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aee:	7abb      	ldrb	r3, [r7, #10]
 8000af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af4:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000af6:	687b      	ldr	r3, [r7, #4]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	00f42400 	.word	0x00f42400
 8000b08:	007a1200 	.word	0x007a1200
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	2000001c 	.word	0x2000001c

08000b14 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000b1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <RCC_GetPCLK2Value+0x8c>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f003 0303 	and.w	r3, r3, #3
 8000b2a:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000b2c:	7a7b      	ldrb	r3, [r7, #9]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <RCC_GetPCLK2Value+0x90>)
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e001      	b.n	8000b3c <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <RCC_GetPCLK2Value+0x94>)
 8000b3a:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <RCC_GetPCLK2Value+0x8c>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d802      	bhi.n	8000b54 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	72fb      	strb	r3, [r7, #11]
 8000b52:	e005      	b.n	8000b60 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b08      	subs	r3, #8
 8000b58:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <RCC_GetPCLK2Value+0x98>)
 8000b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <RCC_GetPCLK2Value+0x8c>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	0b5b      	lsrs	r3, r3, #13
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d802      	bhi.n	8000b78 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	72bb      	strb	r3, [r7, #10]
 8000b76:	e004      	b.n	8000b82 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb0 <RCC_GetPCLK2Value+0x9c>)
 8000b7e:	5cd3      	ldrb	r3, [r2, r3]
 8000b80:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b8a:	7abb      	ldrb	r3, [r7, #10]
 8000b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b90:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000b92:	683b      	ldr	r3, [r7, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	00f42400 	.word	0x00f42400
 8000ba8:	007a1200 	.word	0x007a1200
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	2000001c 	.word	0x2000001c

08000bb4 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

	return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	@ (8000c9c <USART_SetBaudRate+0xd8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d003      	beq.n	8000be2 <USART_SetBaudRate+0x1e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a30      	ldr	r2, [pc, #192]	@ (8000ca0 <USART_SetBaudRate+0xdc>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d103      	bne.n	8000bea <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000be2:	f7ff ff97 	bl	8000b14 <RCC_GetPCLK2Value>
 8000be6:	61f8      	str	r0, [r7, #28]
 8000be8:	e002      	b.n	8000bf0 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000bea:	f7ff ff3b 	bl	8000a64 <RCC_GetPCLK1Value>
 8000bee:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00b      	beq.n	8000c14 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000bfc:	69fa      	ldr	r2, [r7, #28]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	009a      	lsls	r2, r3, #2
 8000c06:	441a      	add	r2, r3
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	e00a      	b.n	8000c2a <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000c14:	69fa      	ldr	r2, [r7, #28]
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009a      	lsls	r2, r3, #2
 8000c1e:	441a      	add	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca4 <USART_SetBaudRate+0xe0>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2264      	movs	r2, #100	@ 0x64
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00a      	beq.n	8000c70 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	3332      	adds	r3, #50	@ 0x32
 8000c60:	4a10      	ldr	r2, [pc, #64]	@ (8000ca4 <USART_SetBaudRate+0xe0>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e009      	b.n	8000c84 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	3332      	adds	r3, #50	@ 0x32
 8000c76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <USART_SetBaudRate+0xe0>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	609a      	str	r2, [r3, #8]
}
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40011400 	.word	0x40011400
 8000ca4:	51eb851f 	.word	0x51eb851f

08000ca8 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f892 	bl	8000de4 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	791b      	ldrb	r3, [r3, #4]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	e010      	b.n	8000cf4 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d104      	bne.n	8000ce4 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e007      	b.n	8000cf4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d103      	bne.n	8000cf4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 030c 	orr.w	r3, r3, #12
 8000cf2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7b5b      	ldrb	r3, [r3, #13]
 8000cf8:	031b      	lsls	r3, r3, #12
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7b9b      	ldrb	r3, [r3, #14]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d104      	bne.n	8000d12 <USART_Init+0x6a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e00b      	b.n	8000d2a <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7b9b      	ldrb	r3, [r3, #14]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d107      	bne.n	8000d2a <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d20:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d28:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7b1b      	ldrb	r3, [r3, #12]
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7bdb      	ldrb	r3, [r3, #15]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d104      	bne.n	8000d60 <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e014      	b.n	8000d8a <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7bdb      	ldrb	r3, [r3, #15]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d104      	bne.n	8000d72 <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e00b      	b.n	8000d8a <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7bdb      	ldrb	r3, [r3, #15]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d107      	bne.n	8000d8a <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d80:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d88:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	f7ff ff11 	bl	8000bc4 <USART_SetBaudRate>

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <USART_Peripheralcontrol>:
 *
 * @Note              -

 */
void USART_Peripheralcontrol(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d106      	bne.n	8000dca <USART_Peripheralcontrol+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000dc8:	e005      	b.n	8000dd6 <USART_Peripheralcontrol+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60da      	str	r2, [r3, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d11f      	bne.n	8000e36 <USART_PeriClockControl+0x52>
	{
		if(pUSARTx == USART1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <USART_PeriClockControl+0x60>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d106      	bne.n	8000e0c <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <USART_PeriClockControl+0x64>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a11      	ldr	r2, [pc, #68]	@ (8000e48 <USART_PeriClockControl+0x64>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
	else
	{
		//TODO
	}

}
 8000e0a:	e014      	b.n	8000e36 <USART_PeriClockControl+0x52>
		}else if (pUSARTx == USART2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e4c <USART_PeriClockControl+0x68>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d106      	bne.n	8000e22 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <USART_PeriClockControl+0x64>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <USART_PeriClockControl+0x64>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e20:	e009      	b.n	8000e36 <USART_PeriClockControl+0x52>
		}else if (pUSARTx == USART6)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <USART_PeriClockControl+0x6c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d105      	bne.n	8000e36 <USART_PeriClockControl+0x52>
			USART6_PCLK_EN();
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <USART_PeriClockControl+0x64>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a06      	ldr	r2, [pc, #24]	@ (8000e48 <USART_PeriClockControl+0x64>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	40011400 	.word	0x40011400

08000e54 <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e031      	b.n	8000ef4 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000e90:	bf00      	nop
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ffdb 	bl	8000e54 <USART_GetFlagStatus>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f6      	beq.n	8000e92 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	7b5b      	ldrb	r3, [r3, #13]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d118      	bne.n	8000ede <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ebe:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	7b9b      	ldrb	r3, [r3, #14]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d106      	bne.n	8000ed6 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	e00b      	b.n	8000eee <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	e007      	b.n	8000eee <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = *pTxBuffer;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3c9      	bcc.n	8000e90 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000efc:	bf00      	nop
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2140      	movs	r1, #64	@ 0x40
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ffa5 	bl	8000e54 <USART_GetFlagStatus>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f6      	beq.n	8000efe <USART_SendData+0x80>
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <USART_ReceiveDataIT>:
 *
 * @Note              -

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b087      	sub	sp, #28
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f2c:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d014      	beq.n	8000f5e <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0220 	orr.w	r2, r2, #32
 8000f5c:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <USART_IRQInterruptConfig>:
 *
 * @Note              -

 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d133      	bne.n	8000fea <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b1f      	cmp	r3, #31
 8000f86:	d80a      	bhi.n	8000f9e <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000f88:	4b35      	ldr	r3, [pc, #212]	@ (8001060 <USART_IRQInterruptConfig+0xf4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	4611      	mov	r1, r2
 8000f96:	4a32      	ldr	r2, [pc, #200]	@ (8001060 <USART_IRQInterruptConfig+0xf4>)
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000f9c:	e059      	b.n	8001052 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b1f      	cmp	r3, #31
 8000fa2:	d90f      	bls.n	8000fc4 <USART_IRQInterruptConfig+0x58>
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fa8:	d80c      	bhi.n	8000fc4 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000faa:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <USART_IRQInterruptConfig+0xf8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	f002 021f 	and.w	r2, r2, #31
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4a29      	ldr	r2, [pc, #164]	@ (8001064 <USART_IRQInterruptConfig+0xf8>)
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e046      	b.n	8001052 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fc8:	d943      	bls.n	8001052 <USART_IRQInterruptConfig+0xe6>
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b5f      	cmp	r3, #95	@ 0x5f
 8000fce:	d840      	bhi.n	8001052 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <USART_IRQInterruptConfig+0xfc>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4a21      	ldr	r2, [pc, #132]	@ (8001068 <USART_IRQInterruptConfig+0xfc>)
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	e033      	b.n	8001052 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b1f      	cmp	r3, #31
 8000fee:	d80a      	bhi.n	8001006 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <USART_IRQInterruptConfig+0x100>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <USART_IRQInterruptConfig+0x100>)
 8001000:	430b      	orrs	r3, r1
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	e025      	b.n	8001052 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b1f      	cmp	r3, #31
 800100a:	d90f      	bls.n	800102c <USART_IRQInterruptConfig+0xc0>
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001010:	d80c      	bhi.n	800102c <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <USART_IRQInterruptConfig+0x104>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	f002 021f 	and.w	r2, r2, #31
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	4611      	mov	r1, r2
 8001024:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <USART_IRQInterruptConfig+0x104>)
 8001026:	430b      	orrs	r3, r1
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e012      	b.n	8001052 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d90f      	bls.n	8001052 <USART_IRQInterruptConfig+0xe6>
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b5f      	cmp	r3, #95	@ 0x5f
 8001036:	d80c      	bhi.n	8001052 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <USART_IRQInterruptConfig+0x108>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4611      	mov	r1, r2
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <USART_IRQInterruptConfig+0x108>)
 800104c:	430b      	orrs	r3, r1
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	e7ff      	b.n	8001052 <USART_IRQInterruptConfig+0xe6>
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000e104 	.word	0xe000e104
 8001068:	e000e10c 	.word	0xe000e10c
 800106c:	e000e180 	.word	0xe000e180
 8001070:	e000e184 	.word	0xe000e184
 8001074:	e000e18c 	.word	0xe000e18c

08001078 <USART_IRQHandling>:
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800108a:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001096:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d021      	beq.n	80010e2 <USART_IRQHandling+0x6a>
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d01e      	beq.n	80010e2 <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d119      	bne.n	80010e2 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d115      	bne.n	80010e2 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010c4:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 80010da:	2100      	movs	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fa23 	bl	8000528 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ec:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f8:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d055      	beq.n	80011ac <USART_IRQHandling+0x134>
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d052      	beq.n	80011ac <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d14d      	bne.n	80011ac <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03d      	beq.n	8001194 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7b5b      	ldrb	r3, [r3, #13]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d129      	bne.n	8001174 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001134:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7b9b      	ldrb	r3, [r3, #14]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10f      	bne.n	800115e <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	1e9a      	subs	r2, r3, #2
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
 800115c:	e01a      	b.n	8001194 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
 8001172:	e00f      	b.n	8001194 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d107      	bne.n	80011ac <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011aa:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d073      	beq.n	80012b2 <USART_IRQHandling+0x23a>
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d070      	beq.n	80012b2 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d16b      	bne.n	80012b2 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d053      	beq.n	800128a <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7b5b      	ldrb	r3, [r3, #13]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d12f      	bne.n	800124a <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7b9b      	ldrb	r3, [r3, #14]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d119      	bne.n	8001226 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001202:	b292      	uxth	r2, r2
 8001204:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	1e9a      	subs	r2, r3, #2
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	61da      	str	r2, [r3, #28]
 8001224:	e031      	b.n	800128a <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	1e5a      	subs	r2, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	61da      	str	r2, [r3, #28]
 8001248:	e01f      	b.n	800128a <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7b9b      	ldrb	r3, [r3, #14]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d107      	bne.n	8001262 <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e009      	b.n	8001276 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10f      	bne.n	80012b2 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0220 	bic.w	r2, r2, #32
 80012a0:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 80012aa:	2101      	movs	r1, #1
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff f93b 	bl	8000528 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012bc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012c8:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d4:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00e      	beq.n	80012fa <USART_IRQHandling+0x282>
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80012f0:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 80012f2:	2103      	movs	r1, #3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff f917 	bl	8000528 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00f      	beq.n	8001338 <USART_IRQHandling+0x2c0>
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	f023 0310 	bic.w	r3, r3, #16
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001330:	2102      	movs	r1, #2
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff f8f8 	bl	8000528 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f003 0305 	and.w	r3, r3, #5
 800134e:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <USART_IRQHandling+0x2ec>
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800135c:	2107      	movs	r1, #7
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff f8e2 	bl	8000528 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01e      	beq.n	80013b4 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001388:	2105      	movs	r1, #5
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff f8cc 	bl	8000528 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NF) )
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 800139a:	2106      	movs	r1, #6
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff f8c3 	bl	8000528 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80013ac:	2107      	movs	r1, #7
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff f8ba 	bl	8000528 <USART_ApplicationEventCallback>
		}
	}


}
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <std>:
 80013bc:	2300      	movs	r3, #0
 80013be:	b510      	push	{r4, lr}
 80013c0:	4604      	mov	r4, r0
 80013c2:	e9c0 3300 	strd	r3, r3, [r0]
 80013c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013ca:	6083      	str	r3, [r0, #8]
 80013cc:	8181      	strh	r1, [r0, #12]
 80013ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80013d0:	81c2      	strh	r2, [r0, #14]
 80013d2:	6183      	str	r3, [r0, #24]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2208      	movs	r2, #8
 80013d8:	305c      	adds	r0, #92	@ 0x5c
 80013da:	f000 f9f9 	bl	80017d0 <memset>
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <std+0x58>)
 80013e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <std+0x5c>)
 80013e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <std+0x60>)
 80013e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <std+0x64>)
 80013ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <std+0x68>)
 80013f0:	6224      	str	r4, [r4, #32]
 80013f2:	429c      	cmp	r4, r3
 80013f4:	d006      	beq.n	8001404 <std+0x48>
 80013f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80013fa:	4294      	cmp	r4, r2
 80013fc:	d002      	beq.n	8001404 <std+0x48>
 80013fe:	33d0      	adds	r3, #208	@ 0xd0
 8001400:	429c      	cmp	r4, r3
 8001402:	d105      	bne.n	8001410 <std+0x54>
 8001404:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f000 ba58 	b.w	80018c0 <__retarget_lock_init_recursive>
 8001410:	bd10      	pop	{r4, pc}
 8001412:	bf00      	nop
 8001414:	08001621 	.word	0x08001621
 8001418:	08001643 	.word	0x08001643
 800141c:	0800167b 	.word	0x0800167b
 8001420:	0800169f 	.word	0x0800169f
 8001424:	200004cc 	.word	0x200004cc

08001428 <stdio_exit_handler>:
 8001428:	4a02      	ldr	r2, [pc, #8]	@ (8001434 <stdio_exit_handler+0xc>)
 800142a:	4903      	ldr	r1, [pc, #12]	@ (8001438 <stdio_exit_handler+0x10>)
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <stdio_exit_handler+0x14>)
 800142e:	f000 b869 	b.w	8001504 <_fwalk_sglue>
 8001432:	bf00      	nop
 8001434:	20000020 	.word	0x20000020
 8001438:	08002161 	.word	0x08002161
 800143c:	20000030 	.word	0x20000030

08001440 <cleanup_stdio>:
 8001440:	6841      	ldr	r1, [r0, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <cleanup_stdio+0x34>)
 8001444:	4299      	cmp	r1, r3
 8001446:	b510      	push	{r4, lr}
 8001448:	4604      	mov	r4, r0
 800144a:	d001      	beq.n	8001450 <cleanup_stdio+0x10>
 800144c:	f000 fe88 	bl	8002160 <_fflush_r>
 8001450:	68a1      	ldr	r1, [r4, #8]
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <cleanup_stdio+0x38>)
 8001454:	4299      	cmp	r1, r3
 8001456:	d002      	beq.n	800145e <cleanup_stdio+0x1e>
 8001458:	4620      	mov	r0, r4
 800145a:	f000 fe81 	bl	8002160 <_fflush_r>
 800145e:	68e1      	ldr	r1, [r4, #12]
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <cleanup_stdio+0x3c>)
 8001462:	4299      	cmp	r1, r3
 8001464:	d004      	beq.n	8001470 <cleanup_stdio+0x30>
 8001466:	4620      	mov	r0, r4
 8001468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800146c:	f000 be78 	b.w	8002160 <_fflush_r>
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	200004cc 	.word	0x200004cc
 8001478:	20000534 	.word	0x20000534
 800147c:	2000059c 	.word	0x2000059c

08001480 <global_stdio_init.part.0>:
 8001480:	b510      	push	{r4, lr}
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <global_stdio_init.part.0+0x30>)
 8001484:	4c0b      	ldr	r4, [pc, #44]	@ (80014b4 <global_stdio_init.part.0+0x34>)
 8001486:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <global_stdio_init.part.0+0x38>)
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4620      	mov	r0, r4
 800148c:	2200      	movs	r2, #0
 800148e:	2104      	movs	r1, #4
 8001490:	f7ff ff94 	bl	80013bc <std>
 8001494:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001498:	2201      	movs	r2, #1
 800149a:	2109      	movs	r1, #9
 800149c:	f7ff ff8e 	bl	80013bc <std>
 80014a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80014a4:	2202      	movs	r2, #2
 80014a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014aa:	2112      	movs	r1, #18
 80014ac:	f7ff bf86 	b.w	80013bc <std>
 80014b0:	20000604 	.word	0x20000604
 80014b4:	200004cc 	.word	0x200004cc
 80014b8:	08001429 	.word	0x08001429

080014bc <__sfp_lock_acquire>:
 80014bc:	4801      	ldr	r0, [pc, #4]	@ (80014c4 <__sfp_lock_acquire+0x8>)
 80014be:	f000 ba00 	b.w	80018c2 <__retarget_lock_acquire_recursive>
 80014c2:	bf00      	nop
 80014c4:	2000060d 	.word	0x2000060d

080014c8 <__sfp_lock_release>:
 80014c8:	4801      	ldr	r0, [pc, #4]	@ (80014d0 <__sfp_lock_release+0x8>)
 80014ca:	f000 b9fb 	b.w	80018c4 <__retarget_lock_release_recursive>
 80014ce:	bf00      	nop
 80014d0:	2000060d 	.word	0x2000060d

080014d4 <__sinit>:
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
 80014d8:	f7ff fff0 	bl	80014bc <__sfp_lock_acquire>
 80014dc:	6a23      	ldr	r3, [r4, #32]
 80014de:	b11b      	cbz	r3, 80014e8 <__sinit+0x14>
 80014e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014e4:	f7ff bff0 	b.w	80014c8 <__sfp_lock_release>
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <__sinit+0x28>)
 80014ea:	6223      	str	r3, [r4, #32]
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__sinit+0x2c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f5      	bne.n	80014e0 <__sinit+0xc>
 80014f4:	f7ff ffc4 	bl	8001480 <global_stdio_init.part.0>
 80014f8:	e7f2      	b.n	80014e0 <__sinit+0xc>
 80014fa:	bf00      	nop
 80014fc:	08001441 	.word	0x08001441
 8001500:	20000604 	.word	0x20000604

08001504 <_fwalk_sglue>:
 8001504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001508:	4607      	mov	r7, r0
 800150a:	4688      	mov	r8, r1
 800150c:	4614      	mov	r4, r2
 800150e:	2600      	movs	r6, #0
 8001510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001514:	f1b9 0901 	subs.w	r9, r9, #1
 8001518:	d505      	bpl.n	8001526 <_fwalk_sglue+0x22>
 800151a:	6824      	ldr	r4, [r4, #0]
 800151c:	2c00      	cmp	r4, #0
 800151e:	d1f7      	bne.n	8001510 <_fwalk_sglue+0xc>
 8001520:	4630      	mov	r0, r6
 8001522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001526:	89ab      	ldrh	r3, [r5, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d907      	bls.n	800153c <_fwalk_sglue+0x38>
 800152c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001530:	3301      	adds	r3, #1
 8001532:	d003      	beq.n	800153c <_fwalk_sglue+0x38>
 8001534:	4629      	mov	r1, r5
 8001536:	4638      	mov	r0, r7
 8001538:	47c0      	blx	r8
 800153a:	4306      	orrs	r6, r0
 800153c:	3568      	adds	r5, #104	@ 0x68
 800153e:	e7e9      	b.n	8001514 <_fwalk_sglue+0x10>

08001540 <iprintf>:
 8001540:	b40f      	push	{r0, r1, r2, r3}
 8001542:	b507      	push	{r0, r1, r2, lr}
 8001544:	4906      	ldr	r1, [pc, #24]	@ (8001560 <iprintf+0x20>)
 8001546:	ab04      	add	r3, sp, #16
 8001548:	6808      	ldr	r0, [r1, #0]
 800154a:	f853 2b04 	ldr.w	r2, [r3], #4
 800154e:	6881      	ldr	r1, [r0, #8]
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	f000 fadb 	bl	8001b0c <_vfiprintf_r>
 8001556:	b003      	add	sp, #12
 8001558:	f85d eb04 	ldr.w	lr, [sp], #4
 800155c:	b004      	add	sp, #16
 800155e:	4770      	bx	lr
 8001560:	2000002c 	.word	0x2000002c

08001564 <_puts_r>:
 8001564:	6a03      	ldr	r3, [r0, #32]
 8001566:	b570      	push	{r4, r5, r6, lr}
 8001568:	6884      	ldr	r4, [r0, #8]
 800156a:	4605      	mov	r5, r0
 800156c:	460e      	mov	r6, r1
 800156e:	b90b      	cbnz	r3, 8001574 <_puts_r+0x10>
 8001570:	f7ff ffb0 	bl	80014d4 <__sinit>
 8001574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001576:	07db      	lsls	r3, r3, #31
 8001578:	d405      	bmi.n	8001586 <_puts_r+0x22>
 800157a:	89a3      	ldrh	r3, [r4, #12]
 800157c:	0598      	lsls	r0, r3, #22
 800157e:	d402      	bmi.n	8001586 <_puts_r+0x22>
 8001580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001582:	f000 f99e 	bl	80018c2 <__retarget_lock_acquire_recursive>
 8001586:	89a3      	ldrh	r3, [r4, #12]
 8001588:	0719      	lsls	r1, r3, #28
 800158a:	d502      	bpl.n	8001592 <_puts_r+0x2e>
 800158c:	6923      	ldr	r3, [r4, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d135      	bne.n	80015fe <_puts_r+0x9a>
 8001592:	4621      	mov	r1, r4
 8001594:	4628      	mov	r0, r5
 8001596:	f000 f8c5 	bl	8001724 <__swsetup_r>
 800159a:	b380      	cbz	r0, 80015fe <_puts_r+0x9a>
 800159c:	f04f 35ff 	mov.w	r5, #4294967295
 80015a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015a2:	07da      	lsls	r2, r3, #31
 80015a4:	d405      	bmi.n	80015b2 <_puts_r+0x4e>
 80015a6:	89a3      	ldrh	r3, [r4, #12]
 80015a8:	059b      	lsls	r3, r3, #22
 80015aa:	d402      	bmi.n	80015b2 <_puts_r+0x4e>
 80015ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015ae:	f000 f989 	bl	80018c4 <__retarget_lock_release_recursive>
 80015b2:	4628      	mov	r0, r5
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da04      	bge.n	80015c4 <_puts_r+0x60>
 80015ba:	69a2      	ldr	r2, [r4, #24]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dc17      	bgt.n	80015f0 <_puts_r+0x8c>
 80015c0:	290a      	cmp	r1, #10
 80015c2:	d015      	beq.n	80015f0 <_puts_r+0x8c>
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	6022      	str	r2, [r4, #0]
 80015ca:	7019      	strb	r1, [r3, #0]
 80015cc:	68a3      	ldr	r3, [r4, #8]
 80015ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80015d2:	3b01      	subs	r3, #1
 80015d4:	60a3      	str	r3, [r4, #8]
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d1ed      	bne.n	80015b6 <_puts_r+0x52>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da11      	bge.n	8001602 <_puts_r+0x9e>
 80015de:	4622      	mov	r2, r4
 80015e0:	210a      	movs	r1, #10
 80015e2:	4628      	mov	r0, r5
 80015e4:	f000 f85f 	bl	80016a6 <__swbuf_r>
 80015e8:	3001      	adds	r0, #1
 80015ea:	d0d7      	beq.n	800159c <_puts_r+0x38>
 80015ec:	250a      	movs	r5, #10
 80015ee:	e7d7      	b.n	80015a0 <_puts_r+0x3c>
 80015f0:	4622      	mov	r2, r4
 80015f2:	4628      	mov	r0, r5
 80015f4:	f000 f857 	bl	80016a6 <__swbuf_r>
 80015f8:	3001      	adds	r0, #1
 80015fa:	d1e7      	bne.n	80015cc <_puts_r+0x68>
 80015fc:	e7ce      	b.n	800159c <_puts_r+0x38>
 80015fe:	3e01      	subs	r6, #1
 8001600:	e7e4      	b.n	80015cc <_puts_r+0x68>
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	6022      	str	r2, [r4, #0]
 8001608:	220a      	movs	r2, #10
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	e7ee      	b.n	80015ec <_puts_r+0x88>
	...

08001610 <puts>:
 8001610:	4b02      	ldr	r3, [pc, #8]	@ (800161c <puts+0xc>)
 8001612:	4601      	mov	r1, r0
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	f7ff bfa5 	b.w	8001564 <_puts_r>
 800161a:	bf00      	nop
 800161c:	2000002c 	.word	0x2000002c

08001620 <__sread>:
 8001620:	b510      	push	{r4, lr}
 8001622:	460c      	mov	r4, r1
 8001624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001628:	f000 f8fc 	bl	8001824 <_read_r>
 800162c:	2800      	cmp	r0, #0
 800162e:	bfab      	itete	ge
 8001630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001632:	89a3      	ldrhlt	r3, [r4, #12]
 8001634:	181b      	addge	r3, r3, r0
 8001636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800163a:	bfac      	ite	ge
 800163c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800163e:	81a3      	strhlt	r3, [r4, #12]
 8001640:	bd10      	pop	{r4, pc}

08001642 <__swrite>:
 8001642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001646:	461f      	mov	r7, r3
 8001648:	898b      	ldrh	r3, [r1, #12]
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	4605      	mov	r5, r0
 800164e:	460c      	mov	r4, r1
 8001650:	4616      	mov	r6, r2
 8001652:	d505      	bpl.n	8001660 <__swrite+0x1e>
 8001654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001658:	2302      	movs	r3, #2
 800165a:	2200      	movs	r2, #0
 800165c:	f000 f8d0 	bl	8001800 <_lseek_r>
 8001660:	89a3      	ldrh	r3, [r4, #12]
 8001662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800166a:	81a3      	strh	r3, [r4, #12]
 800166c:	4632      	mov	r2, r6
 800166e:	463b      	mov	r3, r7
 8001670:	4628      	mov	r0, r5
 8001672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001676:	f000 b8e7 	b.w	8001848 <_write_r>

0800167a <__sseek>:
 800167a:	b510      	push	{r4, lr}
 800167c:	460c      	mov	r4, r1
 800167e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001682:	f000 f8bd 	bl	8001800 <_lseek_r>
 8001686:	1c43      	adds	r3, r0, #1
 8001688:	89a3      	ldrh	r3, [r4, #12]
 800168a:	bf15      	itete	ne
 800168c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800168e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001696:	81a3      	strheq	r3, [r4, #12]
 8001698:	bf18      	it	ne
 800169a:	81a3      	strhne	r3, [r4, #12]
 800169c:	bd10      	pop	{r4, pc}

0800169e <__sclose>:
 800169e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a2:	f000 b89d 	b.w	80017e0 <_close_r>

080016a6 <__swbuf_r>:
 80016a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a8:	460e      	mov	r6, r1
 80016aa:	4614      	mov	r4, r2
 80016ac:	4605      	mov	r5, r0
 80016ae:	b118      	cbz	r0, 80016b8 <__swbuf_r+0x12>
 80016b0:	6a03      	ldr	r3, [r0, #32]
 80016b2:	b90b      	cbnz	r3, 80016b8 <__swbuf_r+0x12>
 80016b4:	f7ff ff0e 	bl	80014d4 <__sinit>
 80016b8:	69a3      	ldr	r3, [r4, #24]
 80016ba:	60a3      	str	r3, [r4, #8]
 80016bc:	89a3      	ldrh	r3, [r4, #12]
 80016be:	071a      	lsls	r2, r3, #28
 80016c0:	d501      	bpl.n	80016c6 <__swbuf_r+0x20>
 80016c2:	6923      	ldr	r3, [r4, #16]
 80016c4:	b943      	cbnz	r3, 80016d8 <__swbuf_r+0x32>
 80016c6:	4621      	mov	r1, r4
 80016c8:	4628      	mov	r0, r5
 80016ca:	f000 f82b 	bl	8001724 <__swsetup_r>
 80016ce:	b118      	cbz	r0, 80016d8 <__swbuf_r+0x32>
 80016d0:	f04f 37ff 	mov.w	r7, #4294967295
 80016d4:	4638      	mov	r0, r7
 80016d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	6922      	ldr	r2, [r4, #16]
 80016dc:	1a98      	subs	r0, r3, r2
 80016de:	6963      	ldr	r3, [r4, #20]
 80016e0:	b2f6      	uxtb	r6, r6
 80016e2:	4283      	cmp	r3, r0
 80016e4:	4637      	mov	r7, r6
 80016e6:	dc05      	bgt.n	80016f4 <__swbuf_r+0x4e>
 80016e8:	4621      	mov	r1, r4
 80016ea:	4628      	mov	r0, r5
 80016ec:	f000 fd38 	bl	8002160 <_fflush_r>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d1ed      	bne.n	80016d0 <__swbuf_r+0x2a>
 80016f4:	68a3      	ldr	r3, [r4, #8]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60a3      	str	r3, [r4, #8]
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	6022      	str	r2, [r4, #0]
 8001700:	701e      	strb	r6, [r3, #0]
 8001702:	6962      	ldr	r2, [r4, #20]
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	429a      	cmp	r2, r3
 8001708:	d004      	beq.n	8001714 <__swbuf_r+0x6e>
 800170a:	89a3      	ldrh	r3, [r4, #12]
 800170c:	07db      	lsls	r3, r3, #31
 800170e:	d5e1      	bpl.n	80016d4 <__swbuf_r+0x2e>
 8001710:	2e0a      	cmp	r6, #10
 8001712:	d1df      	bne.n	80016d4 <__swbuf_r+0x2e>
 8001714:	4621      	mov	r1, r4
 8001716:	4628      	mov	r0, r5
 8001718:	f000 fd22 	bl	8002160 <_fflush_r>
 800171c:	2800      	cmp	r0, #0
 800171e:	d0d9      	beq.n	80016d4 <__swbuf_r+0x2e>
 8001720:	e7d6      	b.n	80016d0 <__swbuf_r+0x2a>
	...

08001724 <__swsetup_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <__swsetup_r+0xa8>)
 8001728:	4605      	mov	r5, r0
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	460c      	mov	r4, r1
 800172e:	b118      	cbz	r0, 8001738 <__swsetup_r+0x14>
 8001730:	6a03      	ldr	r3, [r0, #32]
 8001732:	b90b      	cbnz	r3, 8001738 <__swsetup_r+0x14>
 8001734:	f7ff fece 	bl	80014d4 <__sinit>
 8001738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800173c:	0719      	lsls	r1, r3, #28
 800173e:	d422      	bmi.n	8001786 <__swsetup_r+0x62>
 8001740:	06da      	lsls	r2, r3, #27
 8001742:	d407      	bmi.n	8001754 <__swsetup_r+0x30>
 8001744:	2209      	movs	r2, #9
 8001746:	602a      	str	r2, [r5, #0]
 8001748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174c:	81a3      	strh	r3, [r4, #12]
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	e033      	b.n	80017bc <__swsetup_r+0x98>
 8001754:	0758      	lsls	r0, r3, #29
 8001756:	d512      	bpl.n	800177e <__swsetup_r+0x5a>
 8001758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800175a:	b141      	cbz	r1, 800176e <__swsetup_r+0x4a>
 800175c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001760:	4299      	cmp	r1, r3
 8001762:	d002      	beq.n	800176a <__swsetup_r+0x46>
 8001764:	4628      	mov	r0, r5
 8001766:	f000 f8af 	bl	80018c8 <_free_r>
 800176a:	2300      	movs	r3, #0
 800176c:	6363      	str	r3, [r4, #52]	@ 0x34
 800176e:	89a3      	ldrh	r3, [r4, #12]
 8001770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001774:	81a3      	strh	r3, [r4, #12]
 8001776:	2300      	movs	r3, #0
 8001778:	6063      	str	r3, [r4, #4]
 800177a:	6923      	ldr	r3, [r4, #16]
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	89a3      	ldrh	r3, [r4, #12]
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	81a3      	strh	r3, [r4, #12]
 8001786:	6923      	ldr	r3, [r4, #16]
 8001788:	b94b      	cbnz	r3, 800179e <__swsetup_r+0x7a>
 800178a:	89a3      	ldrh	r3, [r4, #12]
 800178c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001794:	d003      	beq.n	800179e <__swsetup_r+0x7a>
 8001796:	4621      	mov	r1, r4
 8001798:	4628      	mov	r0, r5
 800179a:	f000 fd2f 	bl	80021fc <__smakebuf_r>
 800179e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017a2:	f013 0201 	ands.w	r2, r3, #1
 80017a6:	d00a      	beq.n	80017be <__swsetup_r+0x9a>
 80017a8:	2200      	movs	r2, #0
 80017aa:	60a2      	str	r2, [r4, #8]
 80017ac:	6962      	ldr	r2, [r4, #20]
 80017ae:	4252      	negs	r2, r2
 80017b0:	61a2      	str	r2, [r4, #24]
 80017b2:	6922      	ldr	r2, [r4, #16]
 80017b4:	b942      	cbnz	r2, 80017c8 <__swsetup_r+0xa4>
 80017b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80017ba:	d1c5      	bne.n	8001748 <__swsetup_r+0x24>
 80017bc:	bd38      	pop	{r3, r4, r5, pc}
 80017be:	0799      	lsls	r1, r3, #30
 80017c0:	bf58      	it	pl
 80017c2:	6962      	ldrpl	r2, [r4, #20]
 80017c4:	60a2      	str	r2, [r4, #8]
 80017c6:	e7f4      	b.n	80017b2 <__swsetup_r+0x8e>
 80017c8:	2000      	movs	r0, #0
 80017ca:	e7f7      	b.n	80017bc <__swsetup_r+0x98>
 80017cc:	2000002c 	.word	0x2000002c

080017d0 <memset>:
 80017d0:	4402      	add	r2, r0
 80017d2:	4603      	mov	r3, r0
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d100      	bne.n	80017da <memset+0xa>
 80017d8:	4770      	bx	lr
 80017da:	f803 1b01 	strb.w	r1, [r3], #1
 80017de:	e7f9      	b.n	80017d4 <memset+0x4>

080017e0 <_close_r>:
 80017e0:	b538      	push	{r3, r4, r5, lr}
 80017e2:	4d06      	ldr	r5, [pc, #24]	@ (80017fc <_close_r+0x1c>)
 80017e4:	2300      	movs	r3, #0
 80017e6:	4604      	mov	r4, r0
 80017e8:	4608      	mov	r0, r1
 80017ea:	602b      	str	r3, [r5, #0]
 80017ec:	f000 fe46 	bl	800247c <_close>
 80017f0:	1c43      	adds	r3, r0, #1
 80017f2:	d102      	bne.n	80017fa <_close_r+0x1a>
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	b103      	cbz	r3, 80017fa <_close_r+0x1a>
 80017f8:	6023      	str	r3, [r4, #0]
 80017fa:	bd38      	pop	{r3, r4, r5, pc}
 80017fc:	20000608 	.word	0x20000608

08001800 <_lseek_r>:
 8001800:	b538      	push	{r3, r4, r5, lr}
 8001802:	4d07      	ldr	r5, [pc, #28]	@ (8001820 <_lseek_r+0x20>)
 8001804:	4604      	mov	r4, r0
 8001806:	4608      	mov	r0, r1
 8001808:	4611      	mov	r1, r2
 800180a:	2200      	movs	r2, #0
 800180c:	602a      	str	r2, [r5, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	f000 fdf5 	bl	80023fe <_lseek>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d102      	bne.n	800181e <_lseek_r+0x1e>
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	b103      	cbz	r3, 800181e <_lseek_r+0x1e>
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	bd38      	pop	{r3, r4, r5, pc}
 8001820:	20000608 	.word	0x20000608

08001824 <_read_r>:
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	4d07      	ldr	r5, [pc, #28]	@ (8001844 <_read_r+0x20>)
 8001828:	4604      	mov	r4, r0
 800182a:	4608      	mov	r0, r1
 800182c:	4611      	mov	r1, r2
 800182e:	2200      	movs	r2, #0
 8001830:	602a      	str	r2, [r5, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	f000 fd8d 	bl	8002352 <_read>
 8001838:	1c43      	adds	r3, r0, #1
 800183a:	d102      	bne.n	8001842 <_read_r+0x1e>
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	b103      	cbz	r3, 8001842 <_read_r+0x1e>
 8001840:	6023      	str	r3, [r4, #0]
 8001842:	bd38      	pop	{r3, r4, r5, pc}
 8001844:	20000608 	.word	0x20000608

08001848 <_write_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4d07      	ldr	r5, [pc, #28]	@ (8001868 <_write_r+0x20>)
 800184c:	4604      	mov	r4, r0
 800184e:	4608      	mov	r0, r1
 8001850:	4611      	mov	r1, r2
 8001852:	2200      	movs	r2, #0
 8001854:	602a      	str	r2, [r5, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	f000 fde3 	bl	8002422 <_write>
 800185c:	1c43      	adds	r3, r0, #1
 800185e:	d102      	bne.n	8001866 <_write_r+0x1e>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	b103      	cbz	r3, 8001866 <_write_r+0x1e>
 8001864:	6023      	str	r3, [r4, #0]
 8001866:	bd38      	pop	{r3, r4, r5, pc}
 8001868:	20000608 	.word	0x20000608

0800186c <__errno>:
 800186c:	4b01      	ldr	r3, [pc, #4]	@ (8001874 <__errno+0x8>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	2000002c 	.word	0x2000002c

08001878 <__libc_init_array>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	4d0d      	ldr	r5, [pc, #52]	@ (80018b0 <__libc_init_array+0x38>)
 800187c:	4c0d      	ldr	r4, [pc, #52]	@ (80018b4 <__libc_init_array+0x3c>)
 800187e:	1b64      	subs	r4, r4, r5
 8001880:	10a4      	asrs	r4, r4, #2
 8001882:	2600      	movs	r6, #0
 8001884:	42a6      	cmp	r6, r4
 8001886:	d109      	bne.n	800189c <__libc_init_array+0x24>
 8001888:	4d0b      	ldr	r5, [pc, #44]	@ (80018b8 <__libc_init_array+0x40>)
 800188a:	4c0c      	ldr	r4, [pc, #48]	@ (80018bc <__libc_init_array+0x44>)
 800188c:	f000 ffba 	bl	8002804 <_init>
 8001890:	1b64      	subs	r4, r4, r5
 8001892:	10a4      	asrs	r4, r4, #2
 8001894:	2600      	movs	r6, #0
 8001896:	42a6      	cmp	r6, r4
 8001898:	d105      	bne.n	80018a6 <__libc_init_array+0x2e>
 800189a:	bd70      	pop	{r4, r5, r6, pc}
 800189c:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a0:	4798      	blx	r3
 80018a2:	3601      	adds	r6, #1
 80018a4:	e7ee      	b.n	8001884 <__libc_init_array+0xc>
 80018a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018aa:	4798      	blx	r3
 80018ac:	3601      	adds	r6, #1
 80018ae:	e7f2      	b.n	8001896 <__libc_init_array+0x1e>
 80018b0:	08002938 	.word	0x08002938
 80018b4:	08002938 	.word	0x08002938
 80018b8:	08002938 	.word	0x08002938
 80018bc:	0800293c 	.word	0x0800293c

080018c0 <__retarget_lock_init_recursive>:
 80018c0:	4770      	bx	lr

080018c2 <__retarget_lock_acquire_recursive>:
 80018c2:	4770      	bx	lr

080018c4 <__retarget_lock_release_recursive>:
 80018c4:	4770      	bx	lr
	...

080018c8 <_free_r>:
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4605      	mov	r5, r0
 80018cc:	2900      	cmp	r1, #0
 80018ce:	d041      	beq.n	8001954 <_free_r+0x8c>
 80018d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018d4:	1f0c      	subs	r4, r1, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bfb8      	it	lt
 80018da:	18e4      	addlt	r4, r4, r3
 80018dc:	f000 f8e0 	bl	8001aa0 <__malloc_lock>
 80018e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <_free_r+0x90>)
 80018e2:	6813      	ldr	r3, [r2, #0]
 80018e4:	b933      	cbnz	r3, 80018f4 <_free_r+0x2c>
 80018e6:	6063      	str	r3, [r4, #4]
 80018e8:	6014      	str	r4, [r2, #0]
 80018ea:	4628      	mov	r0, r5
 80018ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018f0:	f000 b8dc 	b.w	8001aac <__malloc_unlock>
 80018f4:	42a3      	cmp	r3, r4
 80018f6:	d908      	bls.n	800190a <_free_r+0x42>
 80018f8:	6820      	ldr	r0, [r4, #0]
 80018fa:	1821      	adds	r1, r4, r0
 80018fc:	428b      	cmp	r3, r1
 80018fe:	bf01      	itttt	eq
 8001900:	6819      	ldreq	r1, [r3, #0]
 8001902:	685b      	ldreq	r3, [r3, #4]
 8001904:	1809      	addeq	r1, r1, r0
 8001906:	6021      	streq	r1, [r4, #0]
 8001908:	e7ed      	b.n	80018e6 <_free_r+0x1e>
 800190a:	461a      	mov	r2, r3
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	b10b      	cbz	r3, 8001914 <_free_r+0x4c>
 8001910:	42a3      	cmp	r3, r4
 8001912:	d9fa      	bls.n	800190a <_free_r+0x42>
 8001914:	6811      	ldr	r1, [r2, #0]
 8001916:	1850      	adds	r0, r2, r1
 8001918:	42a0      	cmp	r0, r4
 800191a:	d10b      	bne.n	8001934 <_free_r+0x6c>
 800191c:	6820      	ldr	r0, [r4, #0]
 800191e:	4401      	add	r1, r0
 8001920:	1850      	adds	r0, r2, r1
 8001922:	4283      	cmp	r3, r0
 8001924:	6011      	str	r1, [r2, #0]
 8001926:	d1e0      	bne.n	80018ea <_free_r+0x22>
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	6053      	str	r3, [r2, #4]
 800192e:	4408      	add	r0, r1
 8001930:	6010      	str	r0, [r2, #0]
 8001932:	e7da      	b.n	80018ea <_free_r+0x22>
 8001934:	d902      	bls.n	800193c <_free_r+0x74>
 8001936:	230c      	movs	r3, #12
 8001938:	602b      	str	r3, [r5, #0]
 800193a:	e7d6      	b.n	80018ea <_free_r+0x22>
 800193c:	6820      	ldr	r0, [r4, #0]
 800193e:	1821      	adds	r1, r4, r0
 8001940:	428b      	cmp	r3, r1
 8001942:	bf04      	itt	eq
 8001944:	6819      	ldreq	r1, [r3, #0]
 8001946:	685b      	ldreq	r3, [r3, #4]
 8001948:	6063      	str	r3, [r4, #4]
 800194a:	bf04      	itt	eq
 800194c:	1809      	addeq	r1, r1, r0
 800194e:	6021      	streq	r1, [r4, #0]
 8001950:	6054      	str	r4, [r2, #4]
 8001952:	e7ca      	b.n	80018ea <_free_r+0x22>
 8001954:	bd38      	pop	{r3, r4, r5, pc}
 8001956:	bf00      	nop
 8001958:	20000614 	.word	0x20000614

0800195c <sbrk_aligned>:
 800195c:	b570      	push	{r4, r5, r6, lr}
 800195e:	4e0f      	ldr	r6, [pc, #60]	@ (800199c <sbrk_aligned+0x40>)
 8001960:	460c      	mov	r4, r1
 8001962:	6831      	ldr	r1, [r6, #0]
 8001964:	4605      	mov	r5, r0
 8001966:	b911      	cbnz	r1, 800196e <sbrk_aligned+0x12>
 8001968:	f000 fca6 	bl	80022b8 <_sbrk_r>
 800196c:	6030      	str	r0, [r6, #0]
 800196e:	4621      	mov	r1, r4
 8001970:	4628      	mov	r0, r5
 8001972:	f000 fca1 	bl	80022b8 <_sbrk_r>
 8001976:	1c43      	adds	r3, r0, #1
 8001978:	d103      	bne.n	8001982 <sbrk_aligned+0x26>
 800197a:	f04f 34ff 	mov.w	r4, #4294967295
 800197e:	4620      	mov	r0, r4
 8001980:	bd70      	pop	{r4, r5, r6, pc}
 8001982:	1cc4      	adds	r4, r0, #3
 8001984:	f024 0403 	bic.w	r4, r4, #3
 8001988:	42a0      	cmp	r0, r4
 800198a:	d0f8      	beq.n	800197e <sbrk_aligned+0x22>
 800198c:	1a21      	subs	r1, r4, r0
 800198e:	4628      	mov	r0, r5
 8001990:	f000 fc92 	bl	80022b8 <_sbrk_r>
 8001994:	3001      	adds	r0, #1
 8001996:	d1f2      	bne.n	800197e <sbrk_aligned+0x22>
 8001998:	e7ef      	b.n	800197a <sbrk_aligned+0x1e>
 800199a:	bf00      	nop
 800199c:	20000610 	.word	0x20000610

080019a0 <_malloc_r>:
 80019a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019a4:	1ccd      	adds	r5, r1, #3
 80019a6:	f025 0503 	bic.w	r5, r5, #3
 80019aa:	3508      	adds	r5, #8
 80019ac:	2d0c      	cmp	r5, #12
 80019ae:	bf38      	it	cc
 80019b0:	250c      	movcc	r5, #12
 80019b2:	2d00      	cmp	r5, #0
 80019b4:	4606      	mov	r6, r0
 80019b6:	db01      	blt.n	80019bc <_malloc_r+0x1c>
 80019b8:	42a9      	cmp	r1, r5
 80019ba:	d904      	bls.n	80019c6 <_malloc_r+0x26>
 80019bc:	230c      	movs	r3, #12
 80019be:	6033      	str	r3, [r6, #0]
 80019c0:	2000      	movs	r0, #0
 80019c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a9c <_malloc_r+0xfc>
 80019ca:	f000 f869 	bl	8001aa0 <__malloc_lock>
 80019ce:	f8d8 3000 	ldr.w	r3, [r8]
 80019d2:	461c      	mov	r4, r3
 80019d4:	bb44      	cbnz	r4, 8001a28 <_malloc_r+0x88>
 80019d6:	4629      	mov	r1, r5
 80019d8:	4630      	mov	r0, r6
 80019da:	f7ff ffbf 	bl	800195c <sbrk_aligned>
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	4604      	mov	r4, r0
 80019e2:	d158      	bne.n	8001a96 <_malloc_r+0xf6>
 80019e4:	f8d8 4000 	ldr.w	r4, [r8]
 80019e8:	4627      	mov	r7, r4
 80019ea:	2f00      	cmp	r7, #0
 80019ec:	d143      	bne.n	8001a76 <_malloc_r+0xd6>
 80019ee:	2c00      	cmp	r4, #0
 80019f0:	d04b      	beq.n	8001a8a <_malloc_r+0xea>
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	4639      	mov	r1, r7
 80019f6:	4630      	mov	r0, r6
 80019f8:	eb04 0903 	add.w	r9, r4, r3
 80019fc:	f000 fc5c 	bl	80022b8 <_sbrk_r>
 8001a00:	4581      	cmp	r9, r0
 8001a02:	d142      	bne.n	8001a8a <_malloc_r+0xea>
 8001a04:	6821      	ldr	r1, [r4, #0]
 8001a06:	1a6d      	subs	r5, r5, r1
 8001a08:	4629      	mov	r1, r5
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f7ff ffa6 	bl	800195c <sbrk_aligned>
 8001a10:	3001      	adds	r0, #1
 8001a12:	d03a      	beq.n	8001a8a <_malloc_r+0xea>
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	442b      	add	r3, r5
 8001a18:	6023      	str	r3, [r4, #0]
 8001a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	bb62      	cbnz	r2, 8001a7c <_malloc_r+0xdc>
 8001a22:	f8c8 7000 	str.w	r7, [r8]
 8001a26:	e00f      	b.n	8001a48 <_malloc_r+0xa8>
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	1b52      	subs	r2, r2, r5
 8001a2c:	d420      	bmi.n	8001a70 <_malloc_r+0xd0>
 8001a2e:	2a0b      	cmp	r2, #11
 8001a30:	d917      	bls.n	8001a62 <_malloc_r+0xc2>
 8001a32:	1961      	adds	r1, r4, r5
 8001a34:	42a3      	cmp	r3, r4
 8001a36:	6025      	str	r5, [r4, #0]
 8001a38:	bf18      	it	ne
 8001a3a:	6059      	strne	r1, [r3, #4]
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	bf08      	it	eq
 8001a40:	f8c8 1000 	streq.w	r1, [r8]
 8001a44:	5162      	str	r2, [r4, r5]
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f000 f82f 	bl	8001aac <__malloc_unlock>
 8001a4e:	f104 000b 	add.w	r0, r4, #11
 8001a52:	1d23      	adds	r3, r4, #4
 8001a54:	f020 0007 	bic.w	r0, r0, #7
 8001a58:	1ac2      	subs	r2, r0, r3
 8001a5a:	bf1c      	itt	ne
 8001a5c:	1a1b      	subne	r3, r3, r0
 8001a5e:	50a3      	strne	r3, [r4, r2]
 8001a60:	e7af      	b.n	80019c2 <_malloc_r+0x22>
 8001a62:	6862      	ldr	r2, [r4, #4]
 8001a64:	42a3      	cmp	r3, r4
 8001a66:	bf0c      	ite	eq
 8001a68:	f8c8 2000 	streq.w	r2, [r8]
 8001a6c:	605a      	strne	r2, [r3, #4]
 8001a6e:	e7eb      	b.n	8001a48 <_malloc_r+0xa8>
 8001a70:	4623      	mov	r3, r4
 8001a72:	6864      	ldr	r4, [r4, #4]
 8001a74:	e7ae      	b.n	80019d4 <_malloc_r+0x34>
 8001a76:	463c      	mov	r4, r7
 8001a78:	687f      	ldr	r7, [r7, #4]
 8001a7a:	e7b6      	b.n	80019ea <_malloc_r+0x4a>
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	42a3      	cmp	r3, r4
 8001a82:	d1fb      	bne.n	8001a7c <_malloc_r+0xdc>
 8001a84:	2300      	movs	r3, #0
 8001a86:	6053      	str	r3, [r2, #4]
 8001a88:	e7de      	b.n	8001a48 <_malloc_r+0xa8>
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	6033      	str	r3, [r6, #0]
 8001a8e:	4630      	mov	r0, r6
 8001a90:	f000 f80c 	bl	8001aac <__malloc_unlock>
 8001a94:	e794      	b.n	80019c0 <_malloc_r+0x20>
 8001a96:	6005      	str	r5, [r0, #0]
 8001a98:	e7d6      	b.n	8001a48 <_malloc_r+0xa8>
 8001a9a:	bf00      	nop
 8001a9c:	20000614 	.word	0x20000614

08001aa0 <__malloc_lock>:
 8001aa0:	4801      	ldr	r0, [pc, #4]	@ (8001aa8 <__malloc_lock+0x8>)
 8001aa2:	f7ff bf0e 	b.w	80018c2 <__retarget_lock_acquire_recursive>
 8001aa6:	bf00      	nop
 8001aa8:	2000060c 	.word	0x2000060c

08001aac <__malloc_unlock>:
 8001aac:	4801      	ldr	r0, [pc, #4]	@ (8001ab4 <__malloc_unlock+0x8>)
 8001aae:	f7ff bf09 	b.w	80018c4 <__retarget_lock_release_recursive>
 8001ab2:	bf00      	nop
 8001ab4:	2000060c 	.word	0x2000060c

08001ab8 <__sfputc_r>:
 8001ab8:	6893      	ldr	r3, [r2, #8]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	b410      	push	{r4}
 8001ac0:	6093      	str	r3, [r2, #8]
 8001ac2:	da08      	bge.n	8001ad6 <__sfputc_r+0x1e>
 8001ac4:	6994      	ldr	r4, [r2, #24]
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	db01      	blt.n	8001ace <__sfputc_r+0x16>
 8001aca:	290a      	cmp	r1, #10
 8001acc:	d103      	bne.n	8001ad6 <__sfputc_r+0x1e>
 8001ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ad2:	f7ff bde8 	b.w	80016a6 <__swbuf_r>
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	1c58      	adds	r0, r3, #1
 8001ada:	6010      	str	r0, [r2, #0]
 8001adc:	7019      	strb	r1, [r3, #0]
 8001ade:	4608      	mov	r0, r1
 8001ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <__sfputs_r>:
 8001ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae8:	4606      	mov	r6, r0
 8001aea:	460f      	mov	r7, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	18d5      	adds	r5, r2, r3
 8001af0:	42ac      	cmp	r4, r5
 8001af2:	d101      	bne.n	8001af8 <__sfputs_r+0x12>
 8001af4:	2000      	movs	r0, #0
 8001af6:	e007      	b.n	8001b08 <__sfputs_r+0x22>
 8001af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001afc:	463a      	mov	r2, r7
 8001afe:	4630      	mov	r0, r6
 8001b00:	f7ff ffda 	bl	8001ab8 <__sfputc_r>
 8001b04:	1c43      	adds	r3, r0, #1
 8001b06:	d1f3      	bne.n	8001af0 <__sfputs_r+0xa>
 8001b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b0c <_vfiprintf_r>:
 8001b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b10:	460d      	mov	r5, r1
 8001b12:	b09d      	sub	sp, #116	@ 0x74
 8001b14:	4614      	mov	r4, r2
 8001b16:	4698      	mov	r8, r3
 8001b18:	4606      	mov	r6, r0
 8001b1a:	b118      	cbz	r0, 8001b24 <_vfiprintf_r+0x18>
 8001b1c:	6a03      	ldr	r3, [r0, #32]
 8001b1e:	b90b      	cbnz	r3, 8001b24 <_vfiprintf_r+0x18>
 8001b20:	f7ff fcd8 	bl	80014d4 <__sinit>
 8001b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b26:	07d9      	lsls	r1, r3, #31
 8001b28:	d405      	bmi.n	8001b36 <_vfiprintf_r+0x2a>
 8001b2a:	89ab      	ldrh	r3, [r5, #12]
 8001b2c:	059a      	lsls	r2, r3, #22
 8001b2e:	d402      	bmi.n	8001b36 <_vfiprintf_r+0x2a>
 8001b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b32:	f7ff fec6 	bl	80018c2 <__retarget_lock_acquire_recursive>
 8001b36:	89ab      	ldrh	r3, [r5, #12]
 8001b38:	071b      	lsls	r3, r3, #28
 8001b3a:	d501      	bpl.n	8001b40 <_vfiprintf_r+0x34>
 8001b3c:	692b      	ldr	r3, [r5, #16]
 8001b3e:	b99b      	cbnz	r3, 8001b68 <_vfiprintf_r+0x5c>
 8001b40:	4629      	mov	r1, r5
 8001b42:	4630      	mov	r0, r6
 8001b44:	f7ff fdee 	bl	8001724 <__swsetup_r>
 8001b48:	b170      	cbz	r0, 8001b68 <_vfiprintf_r+0x5c>
 8001b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b4c:	07dc      	lsls	r4, r3, #31
 8001b4e:	d504      	bpl.n	8001b5a <_vfiprintf_r+0x4e>
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	b01d      	add	sp, #116	@ 0x74
 8001b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b5a:	89ab      	ldrh	r3, [r5, #12]
 8001b5c:	0598      	lsls	r0, r3, #22
 8001b5e:	d4f7      	bmi.n	8001b50 <_vfiprintf_r+0x44>
 8001b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b62:	f7ff feaf 	bl	80018c4 <__retarget_lock_release_recursive>
 8001b66:	e7f3      	b.n	8001b50 <_vfiprintf_r+0x44>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b76:	2330      	movs	r3, #48	@ 0x30
 8001b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001d28 <_vfiprintf_r+0x21c>
 8001b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b80:	f04f 0901 	mov.w	r9, #1
 8001b84:	4623      	mov	r3, r4
 8001b86:	469a      	mov	sl, r3
 8001b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b8c:	b10a      	cbz	r2, 8001b92 <_vfiprintf_r+0x86>
 8001b8e:	2a25      	cmp	r2, #37	@ 0x25
 8001b90:	d1f9      	bne.n	8001b86 <_vfiprintf_r+0x7a>
 8001b92:	ebba 0b04 	subs.w	fp, sl, r4
 8001b96:	d00b      	beq.n	8001bb0 <_vfiprintf_r+0xa4>
 8001b98:	465b      	mov	r3, fp
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f7ff ffa1 	bl	8001ae6 <__sfputs_r>
 8001ba4:	3001      	adds	r0, #1
 8001ba6:	f000 80a7 	beq.w	8001cf8 <_vfiprintf_r+0x1ec>
 8001baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001bac:	445a      	add	r2, fp
 8001bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8001bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 809f 	beq.w	8001cf8 <_vfiprintf_r+0x1ec>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bc4:	f10a 0a01 	add.w	sl, sl, #1
 8001bc8:	9304      	str	r3, [sp, #16]
 8001bca:	9307      	str	r3, [sp, #28]
 8001bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8001bd2:	4654      	mov	r4, sl
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bda:	4853      	ldr	r0, [pc, #332]	@ (8001d28 <_vfiprintf_r+0x21c>)
 8001bdc:	f7fe fb08 	bl	80001f0 <memchr>
 8001be0:	9a04      	ldr	r2, [sp, #16]
 8001be2:	b9d8      	cbnz	r0, 8001c1c <_vfiprintf_r+0x110>
 8001be4:	06d1      	lsls	r1, r2, #27
 8001be6:	bf44      	itt	mi
 8001be8:	2320      	movmi	r3, #32
 8001bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001bee:	0713      	lsls	r3, r2, #28
 8001bf0:	bf44      	itt	mi
 8001bf2:	232b      	movmi	r3, #43	@ 0x2b
 8001bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8001bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bfe:	d015      	beq.n	8001c2c <_vfiprintf_r+0x120>
 8001c00:	9a07      	ldr	r2, [sp, #28]
 8001c02:	4654      	mov	r4, sl
 8001c04:	2000      	movs	r0, #0
 8001c06:	f04f 0c0a 	mov.w	ip, #10
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c10:	3b30      	subs	r3, #48	@ 0x30
 8001c12:	2b09      	cmp	r3, #9
 8001c14:	d94b      	bls.n	8001cae <_vfiprintf_r+0x1a2>
 8001c16:	b1b0      	cbz	r0, 8001c46 <_vfiprintf_r+0x13a>
 8001c18:	9207      	str	r2, [sp, #28]
 8001c1a:	e014      	b.n	8001c46 <_vfiprintf_r+0x13a>
 8001c1c:	eba0 0308 	sub.w	r3, r0, r8
 8001c20:	fa09 f303 	lsl.w	r3, r9, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	9304      	str	r3, [sp, #16]
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	e7d2      	b.n	8001bd2 <_vfiprintf_r+0xc6>
 8001c2c:	9b03      	ldr	r3, [sp, #12]
 8001c2e:	1d19      	adds	r1, r3, #4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	9103      	str	r1, [sp, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bfbb      	ittet	lt
 8001c38:	425b      	neglt	r3, r3
 8001c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8001c3e:	9307      	strge	r3, [sp, #28]
 8001c40:	9307      	strlt	r3, [sp, #28]
 8001c42:	bfb8      	it	lt
 8001c44:	9204      	strlt	r2, [sp, #16]
 8001c46:	7823      	ldrb	r3, [r4, #0]
 8001c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c4a:	d10a      	bne.n	8001c62 <_vfiprintf_r+0x156>
 8001c4c:	7863      	ldrb	r3, [r4, #1]
 8001c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c50:	d132      	bne.n	8001cb8 <_vfiprintf_r+0x1ac>
 8001c52:	9b03      	ldr	r3, [sp, #12]
 8001c54:	1d1a      	adds	r2, r3, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	9203      	str	r2, [sp, #12]
 8001c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c5e:	3402      	adds	r4, #2
 8001c60:	9305      	str	r3, [sp, #20]
 8001c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001d38 <_vfiprintf_r+0x22c>
 8001c66:	7821      	ldrb	r1, [r4, #0]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4650      	mov	r0, sl
 8001c6c:	f7fe fac0 	bl	80001f0 <memchr>
 8001c70:	b138      	cbz	r0, 8001c82 <_vfiprintf_r+0x176>
 8001c72:	9b04      	ldr	r3, [sp, #16]
 8001c74:	eba0 000a 	sub.w	r0, r0, sl
 8001c78:	2240      	movs	r2, #64	@ 0x40
 8001c7a:	4082      	lsls	r2, r0
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	3401      	adds	r4, #1
 8001c80:	9304      	str	r3, [sp, #16]
 8001c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c86:	4829      	ldr	r0, [pc, #164]	@ (8001d2c <_vfiprintf_r+0x220>)
 8001c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c8c:	2206      	movs	r2, #6
 8001c8e:	f7fe faaf 	bl	80001f0 <memchr>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d03f      	beq.n	8001d16 <_vfiprintf_r+0x20a>
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <_vfiprintf_r+0x224>)
 8001c98:	bb1b      	cbnz	r3, 8001ce2 <_vfiprintf_r+0x1d6>
 8001c9a:	9b03      	ldr	r3, [sp, #12]
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	9303      	str	r3, [sp, #12]
 8001ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ca8:	443b      	add	r3, r7
 8001caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8001cac:	e76a      	b.n	8001b84 <_vfiprintf_r+0x78>
 8001cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	e7a8      	b.n	8001c0a <_vfiprintf_r+0xfe>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	3401      	adds	r4, #1
 8001cbc:	9305      	str	r3, [sp, #20]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 0c0a 	mov.w	ip, #10
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cca:	3a30      	subs	r2, #48	@ 0x30
 8001ccc:	2a09      	cmp	r2, #9
 8001cce:	d903      	bls.n	8001cd8 <_vfiprintf_r+0x1cc>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0c6      	beq.n	8001c62 <_vfiprintf_r+0x156>
 8001cd4:	9105      	str	r1, [sp, #20]
 8001cd6:	e7c4      	b.n	8001c62 <_vfiprintf_r+0x156>
 8001cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cdc:	4604      	mov	r4, r0
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e7f0      	b.n	8001cc4 <_vfiprintf_r+0x1b8>
 8001ce2:	ab03      	add	r3, sp, #12
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	462a      	mov	r2, r5
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <_vfiprintf_r+0x228>)
 8001cea:	a904      	add	r1, sp, #16
 8001cec:	4630      	mov	r0, r6
 8001cee:	f3af 8000 	nop.w
 8001cf2:	4607      	mov	r7, r0
 8001cf4:	1c78      	adds	r0, r7, #1
 8001cf6:	d1d6      	bne.n	8001ca6 <_vfiprintf_r+0x19a>
 8001cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001cfa:	07d9      	lsls	r1, r3, #31
 8001cfc:	d405      	bmi.n	8001d0a <_vfiprintf_r+0x1fe>
 8001cfe:	89ab      	ldrh	r3, [r5, #12]
 8001d00:	059a      	lsls	r2, r3, #22
 8001d02:	d402      	bmi.n	8001d0a <_vfiprintf_r+0x1fe>
 8001d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d06:	f7ff fddd 	bl	80018c4 <__retarget_lock_release_recursive>
 8001d0a:	89ab      	ldrh	r3, [r5, #12]
 8001d0c:	065b      	lsls	r3, r3, #25
 8001d0e:	f53f af1f 	bmi.w	8001b50 <_vfiprintf_r+0x44>
 8001d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d14:	e71e      	b.n	8001b54 <_vfiprintf_r+0x48>
 8001d16:	ab03      	add	r3, sp, #12
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	462a      	mov	r2, r5
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <_vfiprintf_r+0x228>)
 8001d1e:	a904      	add	r1, sp, #16
 8001d20:	4630      	mov	r0, r6
 8001d22:	f000 f879 	bl	8001e18 <_printf_i>
 8001d26:	e7e4      	b.n	8001cf2 <_vfiprintf_r+0x1e6>
 8001d28:	080028e2 	.word	0x080028e2
 8001d2c:	080028ec 	.word	0x080028ec
 8001d30:	00000000 	.word	0x00000000
 8001d34:	08001ae7 	.word	0x08001ae7
 8001d38:	080028e8 	.word	0x080028e8

08001d3c <_printf_common>:
 8001d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d40:	4616      	mov	r6, r2
 8001d42:	4698      	mov	r8, r3
 8001d44:	688a      	ldr	r2, [r1, #8]
 8001d46:	690b      	ldr	r3, [r1, #16]
 8001d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bfb8      	it	lt
 8001d50:	4613      	movlt	r3, r2
 8001d52:	6033      	str	r3, [r6, #0]
 8001d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d58:	4607      	mov	r7, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	b10a      	cbz	r2, 8001d62 <_printf_common+0x26>
 8001d5e:	3301      	adds	r3, #1
 8001d60:	6033      	str	r3, [r6, #0]
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	0699      	lsls	r1, r3, #26
 8001d66:	bf42      	ittt	mi
 8001d68:	6833      	ldrmi	r3, [r6, #0]
 8001d6a:	3302      	addmi	r3, #2
 8001d6c:	6033      	strmi	r3, [r6, #0]
 8001d6e:	6825      	ldr	r5, [r4, #0]
 8001d70:	f015 0506 	ands.w	r5, r5, #6
 8001d74:	d106      	bne.n	8001d84 <_printf_common+0x48>
 8001d76:	f104 0a19 	add.w	sl, r4, #25
 8001d7a:	68e3      	ldr	r3, [r4, #12]
 8001d7c:	6832      	ldr	r2, [r6, #0]
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	42ab      	cmp	r3, r5
 8001d82:	dc26      	bgt.n	8001dd2 <_printf_common+0x96>
 8001d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	3b00      	subs	r3, #0
 8001d8c:	bf18      	it	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	0692      	lsls	r2, r2, #26
 8001d92:	d42b      	bmi.n	8001dec <_printf_common+0xb0>
 8001d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d98:	4641      	mov	r1, r8
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	47c8      	blx	r9
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d01e      	beq.n	8001de0 <_printf_common+0xa4>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	6922      	ldr	r2, [r4, #16]
 8001da6:	f003 0306 	and.w	r3, r3, #6
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf02      	ittt	eq
 8001dae:	68e5      	ldreq	r5, [r4, #12]
 8001db0:	6833      	ldreq	r3, [r6, #0]
 8001db2:	1aed      	subeq	r5, r5, r3
 8001db4:	68a3      	ldr	r3, [r4, #8]
 8001db6:	bf0c      	ite	eq
 8001db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dbc:	2500      	movne	r5, #0
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	bfc4      	itt	gt
 8001dc2:	1a9b      	subgt	r3, r3, r2
 8001dc4:	18ed      	addgt	r5, r5, r3
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	341a      	adds	r4, #26
 8001dca:	42b5      	cmp	r5, r6
 8001dcc:	d11a      	bne.n	8001e04 <_printf_common+0xc8>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	e008      	b.n	8001de4 <_printf_common+0xa8>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4652      	mov	r2, sl
 8001dd6:	4641      	mov	r1, r8
 8001dd8:	4638      	mov	r0, r7
 8001dda:	47c8      	blx	r9
 8001ddc:	3001      	adds	r0, #1
 8001dde:	d103      	bne.n	8001de8 <_printf_common+0xac>
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de8:	3501      	adds	r5, #1
 8001dea:	e7c6      	b.n	8001d7a <_printf_common+0x3e>
 8001dec:	18e1      	adds	r1, r4, r3
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	2030      	movs	r0, #48	@ 0x30
 8001df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001df6:	4422      	add	r2, r4
 8001df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e00:	3302      	adds	r3, #2
 8001e02:	e7c7      	b.n	8001d94 <_printf_common+0x58>
 8001e04:	2301      	movs	r3, #1
 8001e06:	4622      	mov	r2, r4
 8001e08:	4641      	mov	r1, r8
 8001e0a:	4638      	mov	r0, r7
 8001e0c:	47c8      	blx	r9
 8001e0e:	3001      	adds	r0, #1
 8001e10:	d0e6      	beq.n	8001de0 <_printf_common+0xa4>
 8001e12:	3601      	adds	r6, #1
 8001e14:	e7d9      	b.n	8001dca <_printf_common+0x8e>
	...

08001e18 <_printf_i>:
 8001e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e1c:	7e0f      	ldrb	r7, [r1, #24]
 8001e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e20:	2f78      	cmp	r7, #120	@ 0x78
 8001e22:	4691      	mov	r9, r2
 8001e24:	4680      	mov	r8, r0
 8001e26:	460c      	mov	r4, r1
 8001e28:	469a      	mov	sl, r3
 8001e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e2e:	d807      	bhi.n	8001e40 <_printf_i+0x28>
 8001e30:	2f62      	cmp	r7, #98	@ 0x62
 8001e32:	d80a      	bhi.n	8001e4a <_printf_i+0x32>
 8001e34:	2f00      	cmp	r7, #0
 8001e36:	f000 80d2 	beq.w	8001fde <_printf_i+0x1c6>
 8001e3a:	2f58      	cmp	r7, #88	@ 0x58
 8001e3c:	f000 80b9 	beq.w	8001fb2 <_printf_i+0x19a>
 8001e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e48:	e03a      	b.n	8001ec0 <_printf_i+0xa8>
 8001e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e4e:	2b15      	cmp	r3, #21
 8001e50:	d8f6      	bhi.n	8001e40 <_printf_i+0x28>
 8001e52:	a101      	add	r1, pc, #4	@ (adr r1, 8001e58 <_printf_i+0x40>)
 8001e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e58:	08001eb1 	.word	0x08001eb1
 8001e5c:	08001ec5 	.word	0x08001ec5
 8001e60:	08001e41 	.word	0x08001e41
 8001e64:	08001e41 	.word	0x08001e41
 8001e68:	08001e41 	.word	0x08001e41
 8001e6c:	08001e41 	.word	0x08001e41
 8001e70:	08001ec5 	.word	0x08001ec5
 8001e74:	08001e41 	.word	0x08001e41
 8001e78:	08001e41 	.word	0x08001e41
 8001e7c:	08001e41 	.word	0x08001e41
 8001e80:	08001e41 	.word	0x08001e41
 8001e84:	08001fc5 	.word	0x08001fc5
 8001e88:	08001eef 	.word	0x08001eef
 8001e8c:	08001f7f 	.word	0x08001f7f
 8001e90:	08001e41 	.word	0x08001e41
 8001e94:	08001e41 	.word	0x08001e41
 8001e98:	08001fe7 	.word	0x08001fe7
 8001e9c:	08001e41 	.word	0x08001e41
 8001ea0:	08001eef 	.word	0x08001eef
 8001ea4:	08001e41 	.word	0x08001e41
 8001ea8:	08001e41 	.word	0x08001e41
 8001eac:	08001f87 	.word	0x08001f87
 8001eb0:	6833      	ldr	r3, [r6, #0]
 8001eb2:	1d1a      	adds	r2, r3, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6032      	str	r2, [r6, #0]
 8001eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e09d      	b.n	8002000 <_printf_i+0x1e8>
 8001ec4:	6833      	ldr	r3, [r6, #0]
 8001ec6:	6820      	ldr	r0, [r4, #0]
 8001ec8:	1d19      	adds	r1, r3, #4
 8001eca:	6031      	str	r1, [r6, #0]
 8001ecc:	0606      	lsls	r6, r0, #24
 8001ece:	d501      	bpl.n	8001ed4 <_printf_i+0xbc>
 8001ed0:	681d      	ldr	r5, [r3, #0]
 8001ed2:	e003      	b.n	8001edc <_printf_i+0xc4>
 8001ed4:	0645      	lsls	r5, r0, #25
 8001ed6:	d5fb      	bpl.n	8001ed0 <_printf_i+0xb8>
 8001ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	da03      	bge.n	8001ee8 <_printf_i+0xd0>
 8001ee0:	232d      	movs	r3, #45	@ 0x2d
 8001ee2:	426d      	negs	r5, r5
 8001ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ee8:	4859      	ldr	r0, [pc, #356]	@ (8002050 <_printf_i+0x238>)
 8001eea:	230a      	movs	r3, #10
 8001eec:	e011      	b.n	8001f12 <_printf_i+0xfa>
 8001eee:	6821      	ldr	r1, [r4, #0]
 8001ef0:	6833      	ldr	r3, [r6, #0]
 8001ef2:	0608      	lsls	r0, r1, #24
 8001ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ef8:	d402      	bmi.n	8001f00 <_printf_i+0xe8>
 8001efa:	0649      	lsls	r1, r1, #25
 8001efc:	bf48      	it	mi
 8001efe:	b2ad      	uxthmi	r5, r5
 8001f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f02:	4853      	ldr	r0, [pc, #332]	@ (8002050 <_printf_i+0x238>)
 8001f04:	6033      	str	r3, [r6, #0]
 8001f06:	bf14      	ite	ne
 8001f08:	230a      	movne	r3, #10
 8001f0a:	2308      	moveq	r3, #8
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f12:	6866      	ldr	r6, [r4, #4]
 8001f14:	60a6      	str	r6, [r4, #8]
 8001f16:	2e00      	cmp	r6, #0
 8001f18:	bfa2      	ittt	ge
 8001f1a:	6821      	ldrge	r1, [r4, #0]
 8001f1c:	f021 0104 	bicge.w	r1, r1, #4
 8001f20:	6021      	strge	r1, [r4, #0]
 8001f22:	b90d      	cbnz	r5, 8001f28 <_printf_i+0x110>
 8001f24:	2e00      	cmp	r6, #0
 8001f26:	d04b      	beq.n	8001fc0 <_printf_i+0x1a8>
 8001f28:	4616      	mov	r6, r2
 8001f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8001f32:	5dc7      	ldrb	r7, [r0, r7]
 8001f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f38:	462f      	mov	r7, r5
 8001f3a:	42bb      	cmp	r3, r7
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	d9f4      	bls.n	8001f2a <_printf_i+0x112>
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d10b      	bne.n	8001f5c <_printf_i+0x144>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	07df      	lsls	r7, r3, #31
 8001f48:	d508      	bpl.n	8001f5c <_printf_i+0x144>
 8001f4a:	6923      	ldr	r3, [r4, #16]
 8001f4c:	6861      	ldr	r1, [r4, #4]
 8001f4e:	4299      	cmp	r1, r3
 8001f50:	bfde      	ittt	le
 8001f52:	2330      	movle	r3, #48	@ 0x30
 8001f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f5c:	1b92      	subs	r2, r2, r6
 8001f5e:	6122      	str	r2, [r4, #16]
 8001f60:	f8cd a000 	str.w	sl, [sp]
 8001f64:	464b      	mov	r3, r9
 8001f66:	aa03      	add	r2, sp, #12
 8001f68:	4621      	mov	r1, r4
 8001f6a:	4640      	mov	r0, r8
 8001f6c:	f7ff fee6 	bl	8001d3c <_printf_common>
 8001f70:	3001      	adds	r0, #1
 8001f72:	d14a      	bne.n	800200a <_printf_i+0x1f2>
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	b004      	add	sp, #16
 8001f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	f043 0320 	orr.w	r3, r3, #32
 8001f84:	6023      	str	r3, [r4, #0]
 8001f86:	4833      	ldr	r0, [pc, #204]	@ (8002054 <_printf_i+0x23c>)
 8001f88:	2778      	movs	r7, #120	@ 0x78
 8001f8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	6831      	ldr	r1, [r6, #0]
 8001f92:	061f      	lsls	r7, r3, #24
 8001f94:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f98:	d402      	bmi.n	8001fa0 <_printf_i+0x188>
 8001f9a:	065f      	lsls	r7, r3, #25
 8001f9c:	bf48      	it	mi
 8001f9e:	b2ad      	uxthmi	r5, r5
 8001fa0:	6031      	str	r1, [r6, #0]
 8001fa2:	07d9      	lsls	r1, r3, #31
 8001fa4:	bf44      	itt	mi
 8001fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8001faa:	6023      	strmi	r3, [r4, #0]
 8001fac:	b11d      	cbz	r5, 8001fb6 <_printf_i+0x19e>
 8001fae:	2310      	movs	r3, #16
 8001fb0:	e7ac      	b.n	8001f0c <_printf_i+0xf4>
 8001fb2:	4827      	ldr	r0, [pc, #156]	@ (8002050 <_printf_i+0x238>)
 8001fb4:	e7e9      	b.n	8001f8a <_printf_i+0x172>
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	f023 0320 	bic.w	r3, r3, #32
 8001fbc:	6023      	str	r3, [r4, #0]
 8001fbe:	e7f6      	b.n	8001fae <_printf_i+0x196>
 8001fc0:	4616      	mov	r6, r2
 8001fc2:	e7bd      	b.n	8001f40 <_printf_i+0x128>
 8001fc4:	6833      	ldr	r3, [r6, #0]
 8001fc6:	6825      	ldr	r5, [r4, #0]
 8001fc8:	6961      	ldr	r1, [r4, #20]
 8001fca:	1d18      	adds	r0, r3, #4
 8001fcc:	6030      	str	r0, [r6, #0]
 8001fce:	062e      	lsls	r6, r5, #24
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	d501      	bpl.n	8001fd8 <_printf_i+0x1c0>
 8001fd4:	6019      	str	r1, [r3, #0]
 8001fd6:	e002      	b.n	8001fde <_printf_i+0x1c6>
 8001fd8:	0668      	lsls	r0, r5, #25
 8001fda:	d5fb      	bpl.n	8001fd4 <_printf_i+0x1bc>
 8001fdc:	8019      	strh	r1, [r3, #0]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	6123      	str	r3, [r4, #16]
 8001fe2:	4616      	mov	r6, r2
 8001fe4:	e7bc      	b.n	8001f60 <_printf_i+0x148>
 8001fe6:	6833      	ldr	r3, [r6, #0]
 8001fe8:	1d1a      	adds	r2, r3, #4
 8001fea:	6032      	str	r2, [r6, #0]
 8001fec:	681e      	ldr	r6, [r3, #0]
 8001fee:	6862      	ldr	r2, [r4, #4]
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	f7fe f8fc 	bl	80001f0 <memchr>
 8001ff8:	b108      	cbz	r0, 8001ffe <_printf_i+0x1e6>
 8001ffa:	1b80      	subs	r0, r0, r6
 8001ffc:	6060      	str	r0, [r4, #4]
 8001ffe:	6863      	ldr	r3, [r4, #4]
 8002000:	6123      	str	r3, [r4, #16]
 8002002:	2300      	movs	r3, #0
 8002004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002008:	e7aa      	b.n	8001f60 <_printf_i+0x148>
 800200a:	6923      	ldr	r3, [r4, #16]
 800200c:	4632      	mov	r2, r6
 800200e:	4649      	mov	r1, r9
 8002010:	4640      	mov	r0, r8
 8002012:	47d0      	blx	sl
 8002014:	3001      	adds	r0, #1
 8002016:	d0ad      	beq.n	8001f74 <_printf_i+0x15c>
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	079b      	lsls	r3, r3, #30
 800201c:	d413      	bmi.n	8002046 <_printf_i+0x22e>
 800201e:	68e0      	ldr	r0, [r4, #12]
 8002020:	9b03      	ldr	r3, [sp, #12]
 8002022:	4298      	cmp	r0, r3
 8002024:	bfb8      	it	lt
 8002026:	4618      	movlt	r0, r3
 8002028:	e7a6      	b.n	8001f78 <_printf_i+0x160>
 800202a:	2301      	movs	r3, #1
 800202c:	4632      	mov	r2, r6
 800202e:	4649      	mov	r1, r9
 8002030:	4640      	mov	r0, r8
 8002032:	47d0      	blx	sl
 8002034:	3001      	adds	r0, #1
 8002036:	d09d      	beq.n	8001f74 <_printf_i+0x15c>
 8002038:	3501      	adds	r5, #1
 800203a:	68e3      	ldr	r3, [r4, #12]
 800203c:	9903      	ldr	r1, [sp, #12]
 800203e:	1a5b      	subs	r3, r3, r1
 8002040:	42ab      	cmp	r3, r5
 8002042:	dcf2      	bgt.n	800202a <_printf_i+0x212>
 8002044:	e7eb      	b.n	800201e <_printf_i+0x206>
 8002046:	2500      	movs	r5, #0
 8002048:	f104 0619 	add.w	r6, r4, #25
 800204c:	e7f5      	b.n	800203a <_printf_i+0x222>
 800204e:	bf00      	nop
 8002050:	080028f3 	.word	0x080028f3
 8002054:	08002904 	.word	0x08002904

08002058 <__sflush_r>:
 8002058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002060:	0716      	lsls	r6, r2, #28
 8002062:	4605      	mov	r5, r0
 8002064:	460c      	mov	r4, r1
 8002066:	d454      	bmi.n	8002112 <__sflush_r+0xba>
 8002068:	684b      	ldr	r3, [r1, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dc02      	bgt.n	8002074 <__sflush_r+0x1c>
 800206e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	dd48      	ble.n	8002106 <__sflush_r+0xae>
 8002074:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002076:	2e00      	cmp	r6, #0
 8002078:	d045      	beq.n	8002106 <__sflush_r+0xae>
 800207a:	2300      	movs	r3, #0
 800207c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002080:	682f      	ldr	r7, [r5, #0]
 8002082:	6a21      	ldr	r1, [r4, #32]
 8002084:	602b      	str	r3, [r5, #0]
 8002086:	d030      	beq.n	80020ea <__sflush_r+0x92>
 8002088:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	0759      	lsls	r1, r3, #29
 800208e:	d505      	bpl.n	800209c <__sflush_r+0x44>
 8002090:	6863      	ldr	r3, [r4, #4]
 8002092:	1ad2      	subs	r2, r2, r3
 8002094:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002096:	b10b      	cbz	r3, 800209c <__sflush_r+0x44>
 8002098:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800209a:	1ad2      	subs	r2, r2, r3
 800209c:	2300      	movs	r3, #0
 800209e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020a0:	6a21      	ldr	r1, [r4, #32]
 80020a2:	4628      	mov	r0, r5
 80020a4:	47b0      	blx	r6
 80020a6:	1c43      	adds	r3, r0, #1
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	d106      	bne.n	80020ba <__sflush_r+0x62>
 80020ac:	6829      	ldr	r1, [r5, #0]
 80020ae:	291d      	cmp	r1, #29
 80020b0:	d82b      	bhi.n	800210a <__sflush_r+0xb2>
 80020b2:	4a2a      	ldr	r2, [pc, #168]	@ (800215c <__sflush_r+0x104>)
 80020b4:	410a      	asrs	r2, r1
 80020b6:	07d6      	lsls	r6, r2, #31
 80020b8:	d427      	bmi.n	800210a <__sflush_r+0xb2>
 80020ba:	2200      	movs	r2, #0
 80020bc:	6062      	str	r2, [r4, #4]
 80020be:	04d9      	lsls	r1, r3, #19
 80020c0:	6922      	ldr	r2, [r4, #16]
 80020c2:	6022      	str	r2, [r4, #0]
 80020c4:	d504      	bpl.n	80020d0 <__sflush_r+0x78>
 80020c6:	1c42      	adds	r2, r0, #1
 80020c8:	d101      	bne.n	80020ce <__sflush_r+0x76>
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	b903      	cbnz	r3, 80020d0 <__sflush_r+0x78>
 80020ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80020d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80020d2:	602f      	str	r7, [r5, #0]
 80020d4:	b1b9      	cbz	r1, 8002106 <__sflush_r+0xae>
 80020d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80020da:	4299      	cmp	r1, r3
 80020dc:	d002      	beq.n	80020e4 <__sflush_r+0x8c>
 80020de:	4628      	mov	r0, r5
 80020e0:	f7ff fbf2 	bl	80018c8 <_free_r>
 80020e4:	2300      	movs	r3, #0
 80020e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80020e8:	e00d      	b.n	8002106 <__sflush_r+0xae>
 80020ea:	2301      	movs	r3, #1
 80020ec:	4628      	mov	r0, r5
 80020ee:	47b0      	blx	r6
 80020f0:	4602      	mov	r2, r0
 80020f2:	1c50      	adds	r0, r2, #1
 80020f4:	d1c9      	bne.n	800208a <__sflush_r+0x32>
 80020f6:	682b      	ldr	r3, [r5, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0c6      	beq.n	800208a <__sflush_r+0x32>
 80020fc:	2b1d      	cmp	r3, #29
 80020fe:	d001      	beq.n	8002104 <__sflush_r+0xac>
 8002100:	2b16      	cmp	r3, #22
 8002102:	d11e      	bne.n	8002142 <__sflush_r+0xea>
 8002104:	602f      	str	r7, [r5, #0]
 8002106:	2000      	movs	r0, #0
 8002108:	e022      	b.n	8002150 <__sflush_r+0xf8>
 800210a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800210e:	b21b      	sxth	r3, r3
 8002110:	e01b      	b.n	800214a <__sflush_r+0xf2>
 8002112:	690f      	ldr	r7, [r1, #16]
 8002114:	2f00      	cmp	r7, #0
 8002116:	d0f6      	beq.n	8002106 <__sflush_r+0xae>
 8002118:	0793      	lsls	r3, r2, #30
 800211a:	680e      	ldr	r6, [r1, #0]
 800211c:	bf08      	it	eq
 800211e:	694b      	ldreq	r3, [r1, #20]
 8002120:	600f      	str	r7, [r1, #0]
 8002122:	bf18      	it	ne
 8002124:	2300      	movne	r3, #0
 8002126:	eba6 0807 	sub.w	r8, r6, r7
 800212a:	608b      	str	r3, [r1, #8]
 800212c:	f1b8 0f00 	cmp.w	r8, #0
 8002130:	dde9      	ble.n	8002106 <__sflush_r+0xae>
 8002132:	6a21      	ldr	r1, [r4, #32]
 8002134:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002136:	4643      	mov	r3, r8
 8002138:	463a      	mov	r2, r7
 800213a:	4628      	mov	r0, r5
 800213c:	47b0      	blx	r6
 800213e:	2800      	cmp	r0, #0
 8002140:	dc08      	bgt.n	8002154 <__sflush_r+0xfc>
 8002142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214a:	81a3      	strh	r3, [r4, #12]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002154:	4407      	add	r7, r0
 8002156:	eba8 0800 	sub.w	r8, r8, r0
 800215a:	e7e7      	b.n	800212c <__sflush_r+0xd4>
 800215c:	dfbffffe 	.word	0xdfbffffe

08002160 <_fflush_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	690b      	ldr	r3, [r1, #16]
 8002164:	4605      	mov	r5, r0
 8002166:	460c      	mov	r4, r1
 8002168:	b913      	cbnz	r3, 8002170 <_fflush_r+0x10>
 800216a:	2500      	movs	r5, #0
 800216c:	4628      	mov	r0, r5
 800216e:	bd38      	pop	{r3, r4, r5, pc}
 8002170:	b118      	cbz	r0, 800217a <_fflush_r+0x1a>
 8002172:	6a03      	ldr	r3, [r0, #32]
 8002174:	b90b      	cbnz	r3, 800217a <_fflush_r+0x1a>
 8002176:	f7ff f9ad 	bl	80014d4 <__sinit>
 800217a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f3      	beq.n	800216a <_fflush_r+0xa>
 8002182:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002184:	07d0      	lsls	r0, r2, #31
 8002186:	d404      	bmi.n	8002192 <_fflush_r+0x32>
 8002188:	0599      	lsls	r1, r3, #22
 800218a:	d402      	bmi.n	8002192 <_fflush_r+0x32>
 800218c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800218e:	f7ff fb98 	bl	80018c2 <__retarget_lock_acquire_recursive>
 8002192:	4628      	mov	r0, r5
 8002194:	4621      	mov	r1, r4
 8002196:	f7ff ff5f 	bl	8002058 <__sflush_r>
 800219a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800219c:	07da      	lsls	r2, r3, #31
 800219e:	4605      	mov	r5, r0
 80021a0:	d4e4      	bmi.n	800216c <_fflush_r+0xc>
 80021a2:	89a3      	ldrh	r3, [r4, #12]
 80021a4:	059b      	lsls	r3, r3, #22
 80021a6:	d4e1      	bmi.n	800216c <_fflush_r+0xc>
 80021a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021aa:	f7ff fb8b 	bl	80018c4 <__retarget_lock_release_recursive>
 80021ae:	e7dd      	b.n	800216c <_fflush_r+0xc>

080021b0 <__swhatbuf_r>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	460c      	mov	r4, r1
 80021b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021b8:	2900      	cmp	r1, #0
 80021ba:	b096      	sub	sp, #88	@ 0x58
 80021bc:	4615      	mov	r5, r2
 80021be:	461e      	mov	r6, r3
 80021c0:	da0d      	bge.n	80021de <__swhatbuf_r+0x2e>
 80021c2:	89a3      	ldrh	r3, [r4, #12]
 80021c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021c8:	f04f 0100 	mov.w	r1, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2340      	movne	r3, #64	@ 0x40
 80021d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80021d4:	2000      	movs	r0, #0
 80021d6:	6031      	str	r1, [r6, #0]
 80021d8:	602b      	str	r3, [r5, #0]
 80021da:	b016      	add	sp, #88	@ 0x58
 80021dc:	bd70      	pop	{r4, r5, r6, pc}
 80021de:	466a      	mov	r2, sp
 80021e0:	f000 f848 	bl	8002274 <_fstat_r>
 80021e4:	2800      	cmp	r0, #0
 80021e6:	dbec      	blt.n	80021c2 <__swhatbuf_r+0x12>
 80021e8:	9901      	ldr	r1, [sp, #4]
 80021ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80021ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80021f2:	4259      	negs	r1, r3
 80021f4:	4159      	adcs	r1, r3
 80021f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021fa:	e7eb      	b.n	80021d4 <__swhatbuf_r+0x24>

080021fc <__smakebuf_r>:
 80021fc:	898b      	ldrh	r3, [r1, #12]
 80021fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002200:	079d      	lsls	r5, r3, #30
 8002202:	4606      	mov	r6, r0
 8002204:	460c      	mov	r4, r1
 8002206:	d507      	bpl.n	8002218 <__smakebuf_r+0x1c>
 8002208:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800220c:	6023      	str	r3, [r4, #0]
 800220e:	6123      	str	r3, [r4, #16]
 8002210:	2301      	movs	r3, #1
 8002212:	6163      	str	r3, [r4, #20]
 8002214:	b003      	add	sp, #12
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002218:	ab01      	add	r3, sp, #4
 800221a:	466a      	mov	r2, sp
 800221c:	f7ff ffc8 	bl	80021b0 <__swhatbuf_r>
 8002220:	9f00      	ldr	r7, [sp, #0]
 8002222:	4605      	mov	r5, r0
 8002224:	4639      	mov	r1, r7
 8002226:	4630      	mov	r0, r6
 8002228:	f7ff fbba 	bl	80019a0 <_malloc_r>
 800222c:	b948      	cbnz	r0, 8002242 <__smakebuf_r+0x46>
 800222e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002232:	059a      	lsls	r2, r3, #22
 8002234:	d4ee      	bmi.n	8002214 <__smakebuf_r+0x18>
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	81a3      	strh	r3, [r4, #12]
 8002240:	e7e2      	b.n	8002208 <__smakebuf_r+0xc>
 8002242:	89a3      	ldrh	r3, [r4, #12]
 8002244:	6020      	str	r0, [r4, #0]
 8002246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224a:	81a3      	strh	r3, [r4, #12]
 800224c:	9b01      	ldr	r3, [sp, #4]
 800224e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002252:	b15b      	cbz	r3, 800226c <__smakebuf_r+0x70>
 8002254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002258:	4630      	mov	r0, r6
 800225a:	f000 f81d 	bl	8002298 <_isatty_r>
 800225e:	b128      	cbz	r0, 800226c <__smakebuf_r+0x70>
 8002260:	89a3      	ldrh	r3, [r4, #12]
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	81a3      	strh	r3, [r4, #12]
 800226c:	89a3      	ldrh	r3, [r4, #12]
 800226e:	431d      	orrs	r5, r3
 8002270:	81a5      	strh	r5, [r4, #12]
 8002272:	e7cf      	b.n	8002214 <__smakebuf_r+0x18>

08002274 <_fstat_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4d07      	ldr	r5, [pc, #28]	@ (8002294 <_fstat_r+0x20>)
 8002278:	2300      	movs	r3, #0
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	602b      	str	r3, [r5, #0]
 8002282:	f000 f93e 	bl	8002502 <_fstat>
 8002286:	1c43      	adds	r3, r0, #1
 8002288:	d102      	bne.n	8002290 <_fstat_r+0x1c>
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	b103      	cbz	r3, 8002290 <_fstat_r+0x1c>
 800228e:	6023      	str	r3, [r4, #0]
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	bf00      	nop
 8002294:	20000608 	.word	0x20000608

08002298 <_isatty_r>:
 8002298:	b538      	push	{r3, r4, r5, lr}
 800229a:	4d06      	ldr	r5, [pc, #24]	@ (80022b4 <_isatty_r+0x1c>)
 800229c:	2300      	movs	r3, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	602b      	str	r3, [r5, #0]
 80022a4:	f000 fa90 	bl	80027c8 <_isatty>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_isatty_r+0x1a>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_isatty_r+0x1a>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	20000608 	.word	0x20000608

080022b8 <_sbrk_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	4d06      	ldr	r5, [pc, #24]	@ (80022d4 <_sbrk_r+0x1c>)
 80022bc:	2300      	movs	r3, #0
 80022be:	4604      	mov	r4, r0
 80022c0:	4608      	mov	r0, r1
 80022c2:	602b      	str	r3, [r5, #0]
 80022c4:	f7fe f944 	bl	8000550 <_sbrk>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d102      	bne.n	80022d2 <_sbrk_r+0x1a>
 80022cc:	682b      	ldr	r3, [r5, #0]
 80022ce:	b103      	cbz	r3, 80022d2 <_sbrk_r+0x1a>
 80022d0:	6023      	str	r3, [r4, #0]
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	20000608 	.word	0x20000608

080022d8 <findslot>:
 80022d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <findslot+0x2c>)
 80022da:	b510      	push	{r4, lr}
 80022dc:	4604      	mov	r4, r0
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	b118      	cbz	r0, 80022ea <findslot+0x12>
 80022e2:	6a03      	ldr	r3, [r0, #32]
 80022e4:	b90b      	cbnz	r3, 80022ea <findslot+0x12>
 80022e6:	f7ff f8f5 	bl	80014d4 <__sinit>
 80022ea:	2c13      	cmp	r4, #19
 80022ec:	d807      	bhi.n	80022fe <findslot+0x26>
 80022ee:	4806      	ldr	r0, [pc, #24]	@ (8002308 <findslot+0x30>)
 80022f0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80022f4:	3201      	adds	r2, #1
 80022f6:	d002      	beq.n	80022fe <findslot+0x26>
 80022f8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80022fc:	bd10      	pop	{r4, pc}
 80022fe:	2000      	movs	r0, #0
 8002300:	e7fc      	b.n	80022fc <findslot+0x24>
 8002302:	bf00      	nop
 8002304:	2000002c 	.word	0x2000002c
 8002308:	20000624 	.word	0x20000624

0800230c <error>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	4604      	mov	r4, r0
 8002310:	f7ff faac 	bl	800186c <__errno>
 8002314:	2613      	movs	r6, #19
 8002316:	4605      	mov	r5, r0
 8002318:	2700      	movs	r7, #0
 800231a:	4630      	mov	r0, r6
 800231c:	4639      	mov	r1, r7
 800231e:	beab      	bkpt	0x00ab
 8002320:	4606      	mov	r6, r0
 8002322:	602e      	str	r6, [r5, #0]
 8002324:	4620      	mov	r0, r4
 8002326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002328 <checkerror>:
 8002328:	1c43      	adds	r3, r0, #1
 800232a:	d101      	bne.n	8002330 <checkerror+0x8>
 800232c:	f7ff bfee 	b.w	800230c <error>
 8002330:	4770      	bx	lr

08002332 <_swiread>:
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	b085      	sub	sp, #20
 8002336:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800233a:	9203      	str	r2, [sp, #12]
 800233c:	2406      	movs	r4, #6
 800233e:	ad01      	add	r5, sp, #4
 8002340:	4620      	mov	r0, r4
 8002342:	4629      	mov	r1, r5
 8002344:	beab      	bkpt	0x00ab
 8002346:	4604      	mov	r4, r0
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff ffed 	bl	8002328 <checkerror>
 800234e:	b005      	add	sp, #20
 8002350:	bd30      	pop	{r4, r5, pc}

08002352 <_read>:
 8002352:	b570      	push	{r4, r5, r6, lr}
 8002354:	460e      	mov	r6, r1
 8002356:	4614      	mov	r4, r2
 8002358:	f7ff ffbe 	bl	80022d8 <findslot>
 800235c:	4605      	mov	r5, r0
 800235e:	b930      	cbnz	r0, 800236e <_read+0x1c>
 8002360:	f7ff fa84 	bl	800186c <__errno>
 8002364:	2309      	movs	r3, #9
 8002366:	6003      	str	r3, [r0, #0]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	bd70      	pop	{r4, r5, r6, pc}
 800236e:	6800      	ldr	r0, [r0, #0]
 8002370:	4622      	mov	r2, r4
 8002372:	4631      	mov	r1, r6
 8002374:	f7ff ffdd 	bl	8002332 <_swiread>
 8002378:	1c43      	adds	r3, r0, #1
 800237a:	d0f5      	beq.n	8002368 <_read+0x16>
 800237c:	686b      	ldr	r3, [r5, #4]
 800237e:	1a20      	subs	r0, r4, r0
 8002380:	4403      	add	r3, r0
 8002382:	606b      	str	r3, [r5, #4]
 8002384:	e7f2      	b.n	800236c <_read+0x1a>

08002386 <_swilseek>:
 8002386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002388:	460c      	mov	r4, r1
 800238a:	4616      	mov	r6, r2
 800238c:	f7ff ffa4 	bl	80022d8 <findslot>
 8002390:	4605      	mov	r5, r0
 8002392:	b940      	cbnz	r0, 80023a6 <_swilseek+0x20>
 8002394:	f7ff fa6a 	bl	800186c <__errno>
 8002398:	2309      	movs	r3, #9
 800239a:	6003      	str	r3, [r0, #0]
 800239c:	f04f 34ff 	mov.w	r4, #4294967295
 80023a0:	4620      	mov	r0, r4
 80023a2:	b003      	add	sp, #12
 80023a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a6:	2e02      	cmp	r6, #2
 80023a8:	d903      	bls.n	80023b2 <_swilseek+0x2c>
 80023aa:	f7ff fa5f 	bl	800186c <__errno>
 80023ae:	2316      	movs	r3, #22
 80023b0:	e7f3      	b.n	800239a <_swilseek+0x14>
 80023b2:	2e01      	cmp	r6, #1
 80023b4:	d112      	bne.n	80023dc <_swilseek+0x56>
 80023b6:	6843      	ldr	r3, [r0, #4]
 80023b8:	18e4      	adds	r4, r4, r3
 80023ba:	d4f6      	bmi.n	80023aa <_swilseek+0x24>
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	260a      	movs	r6, #10
 80023c0:	e9cd 3400 	strd	r3, r4, [sp]
 80023c4:	466f      	mov	r7, sp
 80023c6:	4630      	mov	r0, r6
 80023c8:	4639      	mov	r1, r7
 80023ca:	beab      	bkpt	0x00ab
 80023cc:	4606      	mov	r6, r0
 80023ce:	4630      	mov	r0, r6
 80023d0:	f7ff ffaa 	bl	8002328 <checkerror>
 80023d4:	2800      	cmp	r0, #0
 80023d6:	dbe1      	blt.n	800239c <_swilseek+0x16>
 80023d8:	606c      	str	r4, [r5, #4]
 80023da:	e7e1      	b.n	80023a0 <_swilseek+0x1a>
 80023dc:	2e02      	cmp	r6, #2
 80023de:	6803      	ldr	r3, [r0, #0]
 80023e0:	d1ec      	bne.n	80023bc <_swilseek+0x36>
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	260c      	movs	r6, #12
 80023e6:	466f      	mov	r7, sp
 80023e8:	4630      	mov	r0, r6
 80023ea:	4639      	mov	r1, r7
 80023ec:	beab      	bkpt	0x00ab
 80023ee:	4606      	mov	r6, r0
 80023f0:	4630      	mov	r0, r6
 80023f2:	f7ff ff99 	bl	8002328 <checkerror>
 80023f6:	1c43      	adds	r3, r0, #1
 80023f8:	d0d0      	beq.n	800239c <_swilseek+0x16>
 80023fa:	4404      	add	r4, r0
 80023fc:	e7de      	b.n	80023bc <_swilseek+0x36>

080023fe <_lseek>:
 80023fe:	f7ff bfc2 	b.w	8002386 <_swilseek>

08002402 <_swiwrite>:
 8002402:	b530      	push	{r4, r5, lr}
 8002404:	b085      	sub	sp, #20
 8002406:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800240a:	9203      	str	r2, [sp, #12]
 800240c:	2405      	movs	r4, #5
 800240e:	ad01      	add	r5, sp, #4
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	beab      	bkpt	0x00ab
 8002416:	4604      	mov	r4, r0
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff ff85 	bl	8002328 <checkerror>
 800241e:	b005      	add	sp, #20
 8002420:	bd30      	pop	{r4, r5, pc}

08002422 <_write>:
 8002422:	b570      	push	{r4, r5, r6, lr}
 8002424:	460e      	mov	r6, r1
 8002426:	4615      	mov	r5, r2
 8002428:	f7ff ff56 	bl	80022d8 <findslot>
 800242c:	4604      	mov	r4, r0
 800242e:	b930      	cbnz	r0, 800243e <_write+0x1c>
 8002430:	f7ff fa1c 	bl	800186c <__errno>
 8002434:	2309      	movs	r3, #9
 8002436:	6003      	str	r3, [r0, #0]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	bd70      	pop	{r4, r5, r6, pc}
 800243e:	6800      	ldr	r0, [r0, #0]
 8002440:	462a      	mov	r2, r5
 8002442:	4631      	mov	r1, r6
 8002444:	f7ff ffdd 	bl	8002402 <_swiwrite>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	dbf5      	blt.n	8002438 <_write+0x16>
 800244c:	6862      	ldr	r2, [r4, #4]
 800244e:	1ae8      	subs	r0, r5, r3
 8002450:	4402      	add	r2, r0
 8002452:	42ab      	cmp	r3, r5
 8002454:	6062      	str	r2, [r4, #4]
 8002456:	d1f1      	bne.n	800243c <_write+0x1a>
 8002458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff bf55 	b.w	800230c <error>

08002462 <_swiclose>:
 8002462:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002464:	2402      	movs	r4, #2
 8002466:	9001      	str	r0, [sp, #4]
 8002468:	ad01      	add	r5, sp, #4
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	beab      	bkpt	0x00ab
 8002470:	4604      	mov	r4, r0
 8002472:	4620      	mov	r0, r4
 8002474:	f7ff ff58 	bl	8002328 <checkerror>
 8002478:	b003      	add	sp, #12
 800247a:	bd30      	pop	{r4, r5, pc}

0800247c <_close>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4605      	mov	r5, r0
 8002480:	f7ff ff2a 	bl	80022d8 <findslot>
 8002484:	4604      	mov	r4, r0
 8002486:	b930      	cbnz	r0, 8002496 <_close+0x1a>
 8002488:	f7ff f9f0 	bl	800186c <__errno>
 800248c:	2309      	movs	r3, #9
 800248e:	6003      	str	r3, [r0, #0]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	bd38      	pop	{r3, r4, r5, pc}
 8002496:	3d01      	subs	r5, #1
 8002498:	2d01      	cmp	r5, #1
 800249a:	d809      	bhi.n	80024b0 <_close+0x34>
 800249c:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <_close+0x40>)
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d104      	bne.n	80024b0 <_close+0x34>
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	6023      	str	r3, [r4, #0]
 80024ac:	2000      	movs	r0, #0
 80024ae:	e7f1      	b.n	8002494 <_close+0x18>
 80024b0:	6820      	ldr	r0, [r4, #0]
 80024b2:	f7ff ffd6 	bl	8002462 <_swiclose>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0f5      	beq.n	80024a6 <_close+0x2a>
 80024ba:	e7eb      	b.n	8002494 <_close+0x18>
 80024bc:	20000624 	.word	0x20000624

080024c0 <_swistat>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	460c      	mov	r4, r1
 80024c4:	f7ff ff08 	bl	80022d8 <findslot>
 80024c8:	4605      	mov	r5, r0
 80024ca:	b930      	cbnz	r0, 80024da <_swistat+0x1a>
 80024cc:	f7ff f9ce 	bl	800186c <__errno>
 80024d0:	2309      	movs	r3, #9
 80024d2:	6003      	str	r3, [r0, #0]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
 80024da:	6863      	ldr	r3, [r4, #4]
 80024dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024e0:	6063      	str	r3, [r4, #4]
 80024e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024e6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80024e8:	260c      	movs	r6, #12
 80024ea:	4630      	mov	r0, r6
 80024ec:	4629      	mov	r1, r5
 80024ee:	beab      	bkpt	0x00ab
 80024f0:	4605      	mov	r5, r0
 80024f2:	4628      	mov	r0, r5
 80024f4:	f7ff ff18 	bl	8002328 <checkerror>
 80024f8:	1c43      	adds	r3, r0, #1
 80024fa:	d0eb      	beq.n	80024d4 <_swistat+0x14>
 80024fc:	6120      	str	r0, [r4, #16]
 80024fe:	2000      	movs	r0, #0
 8002500:	e7ea      	b.n	80024d8 <_swistat+0x18>

08002502 <_fstat>:
 8002502:	460b      	mov	r3, r1
 8002504:	b510      	push	{r4, lr}
 8002506:	2100      	movs	r1, #0
 8002508:	4604      	mov	r4, r0
 800250a:	2258      	movs	r2, #88	@ 0x58
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f95f 	bl	80017d0 <memset>
 8002512:	4601      	mov	r1, r0
 8002514:	4620      	mov	r0, r4
 8002516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800251a:	f7ff bfd1 	b.w	80024c0 <_swistat>

0800251e <_stat>:
 800251e:	b538      	push	{r3, r4, r5, lr}
 8002520:	460d      	mov	r5, r1
 8002522:	4604      	mov	r4, r0
 8002524:	2258      	movs	r2, #88	@ 0x58
 8002526:	2100      	movs	r1, #0
 8002528:	4628      	mov	r0, r5
 800252a:	f7ff f951 	bl	80017d0 <memset>
 800252e:	4620      	mov	r0, r4
 8002530:	2100      	movs	r1, #0
 8002532:	f000 f811 	bl	8002558 <_swiopen>
 8002536:	1c43      	adds	r3, r0, #1
 8002538:	4604      	mov	r4, r0
 800253a:	d00b      	beq.n	8002554 <_stat+0x36>
 800253c:	686b      	ldr	r3, [r5, #4]
 800253e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002542:	606b      	str	r3, [r5, #4]
 8002544:	4629      	mov	r1, r5
 8002546:	f7ff ffbb 	bl	80024c0 <_swistat>
 800254a:	4605      	mov	r5, r0
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff ff95 	bl	800247c <_close>
 8002552:	462c      	mov	r4, r5
 8002554:	4620      	mov	r0, r4
 8002556:	bd38      	pop	{r3, r4, r5, pc}

08002558 <_swiopen>:
 8002558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800255c:	4f29      	ldr	r7, [pc, #164]	@ (8002604 <_swiopen+0xac>)
 800255e:	b096      	sub	sp, #88	@ 0x58
 8002560:	4682      	mov	sl, r0
 8002562:	460e      	mov	r6, r1
 8002564:	2400      	movs	r4, #0
 8002566:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800256a:	3301      	adds	r3, #1
 800256c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002570:	d00c      	beq.n	800258c <_swiopen+0x34>
 8002572:	3401      	adds	r4, #1
 8002574:	2c14      	cmp	r4, #20
 8002576:	d1f6      	bne.n	8002566 <_swiopen+0xe>
 8002578:	f7ff f978 	bl	800186c <__errno>
 800257c:	2318      	movs	r3, #24
 800257e:	6003      	str	r3, [r0, #0]
 8002580:	f04f 34ff 	mov.w	r4, #4294967295
 8002584:	4620      	mov	r0, r4
 8002586:	b016      	add	sp, #88	@ 0x58
 8002588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800258c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002590:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002594:	46e9      	mov	r9, sp
 8002596:	d109      	bne.n	80025ac <_swiopen+0x54>
 8002598:	4649      	mov	r1, r9
 800259a:	4650      	mov	r0, sl
 800259c:	f7ff ffbf 	bl	800251e <_stat>
 80025a0:	3001      	adds	r0, #1
 80025a2:	d003      	beq.n	80025ac <_swiopen+0x54>
 80025a4:	f7ff f962 	bl	800186c <__errno>
 80025a8:	2311      	movs	r3, #17
 80025aa:	e7e8      	b.n	800257e <_swiopen+0x26>
 80025ac:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80025b0:	f240 6301 	movw	r3, #1537	@ 0x601
 80025b4:	07b2      	lsls	r2, r6, #30
 80025b6:	bf48      	it	mi
 80025b8:	f045 0502 	orrmi.w	r5, r5, #2
 80025bc:	421e      	tst	r6, r3
 80025be:	bf18      	it	ne
 80025c0:	f045 0504 	orrne.w	r5, r5, #4
 80025c4:	0733      	lsls	r3, r6, #28
 80025c6:	bf48      	it	mi
 80025c8:	f025 0504 	bicmi.w	r5, r5, #4
 80025cc:	4650      	mov	r0, sl
 80025ce:	bf48      	it	mi
 80025d0:	f045 0508 	orrmi.w	r5, r5, #8
 80025d4:	f8cd a000 	str.w	sl, [sp]
 80025d8:	f7fd fe02 	bl	80001e0 <strlen>
 80025dc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80025e0:	2501      	movs	r5, #1
 80025e2:	4628      	mov	r0, r5
 80025e4:	4649      	mov	r1, r9
 80025e6:	beab      	bkpt	0x00ab
 80025e8:	4605      	mov	r5, r0
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	db05      	blt.n	80025fa <_swiopen+0xa2>
 80025ee:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80025f2:	4447      	add	r7, r8
 80025f4:	2300      	movs	r3, #0
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	e7c4      	b.n	8002584 <_swiopen+0x2c>
 80025fa:	4628      	mov	r0, r5
 80025fc:	f7ff fe86 	bl	800230c <error>
 8002600:	4604      	mov	r4, r0
 8002602:	e7bf      	b.n	8002584 <_swiopen+0x2c>
 8002604:	20000624 	.word	0x20000624

08002608 <_get_semihosting_exts>:
 8002608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800260c:	4606      	mov	r6, r0
 800260e:	460f      	mov	r7, r1
 8002610:	4829      	ldr	r0, [pc, #164]	@ (80026b8 <_get_semihosting_exts+0xb0>)
 8002612:	2100      	movs	r1, #0
 8002614:	4615      	mov	r5, r2
 8002616:	f7ff ff9f 	bl	8002558 <_swiopen>
 800261a:	462a      	mov	r2, r5
 800261c:	4604      	mov	r4, r0
 800261e:	2100      	movs	r1, #0
 8002620:	4630      	mov	r0, r6
 8002622:	f7ff f8d5 	bl	80017d0 <memset>
 8002626:	1c63      	adds	r3, r4, #1
 8002628:	d014      	beq.n	8002654 <_get_semihosting_exts+0x4c>
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff fe54 	bl	80022d8 <findslot>
 8002630:	f04f 080c 	mov.w	r8, #12
 8002634:	4681      	mov	r9, r0
 8002636:	4640      	mov	r0, r8
 8002638:	4649      	mov	r1, r9
 800263a:	beab      	bkpt	0x00ab
 800263c:	4680      	mov	r8, r0
 800263e:	4640      	mov	r0, r8
 8002640:	f7ff fe72 	bl	8002328 <checkerror>
 8002644:	2803      	cmp	r0, #3
 8002646:	dd02      	ble.n	800264e <_get_semihosting_exts+0x46>
 8002648:	1ec3      	subs	r3, r0, #3
 800264a:	42ab      	cmp	r3, r5
 800264c:	dc07      	bgt.n	800265e <_get_semihosting_exts+0x56>
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff ff14 	bl	800247c <_close>
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	b003      	add	sp, #12
 800265a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800265e:	2204      	movs	r2, #4
 8002660:	eb0d 0102 	add.w	r1, sp, r2
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fe74 	bl	8002352 <_read>
 800266a:	2803      	cmp	r0, #3
 800266c:	ddef      	ble.n	800264e <_get_semihosting_exts+0x46>
 800266e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002672:	2b53      	cmp	r3, #83	@ 0x53
 8002674:	d1eb      	bne.n	800264e <_get_semihosting_exts+0x46>
 8002676:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800267a:	2b48      	cmp	r3, #72	@ 0x48
 800267c:	d1e7      	bne.n	800264e <_get_semihosting_exts+0x46>
 800267e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002682:	2b46      	cmp	r3, #70	@ 0x46
 8002684:	d1e3      	bne.n	800264e <_get_semihosting_exts+0x46>
 8002686:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800268a:	2b42      	cmp	r3, #66	@ 0x42
 800268c:	d1df      	bne.n	800264e <_get_semihosting_exts+0x46>
 800268e:	2201      	movs	r2, #1
 8002690:	4639      	mov	r1, r7
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff fe77 	bl	8002386 <_swilseek>
 8002698:	2800      	cmp	r0, #0
 800269a:	dbd8      	blt.n	800264e <_get_semihosting_exts+0x46>
 800269c:	462a      	mov	r2, r5
 800269e:	4631      	mov	r1, r6
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff fe56 	bl	8002352 <_read>
 80026a6:	4605      	mov	r5, r0
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff fee7 	bl	800247c <_close>
 80026ae:	4628      	mov	r0, r5
 80026b0:	f7ff fe3a 	bl	8002328 <checkerror>
 80026b4:	e7d0      	b.n	8002658 <_get_semihosting_exts+0x50>
 80026b6:	bf00      	nop
 80026b8:	08002915 	.word	0x08002915

080026bc <initialise_semihosting_exts>:
 80026bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026be:	4d0a      	ldr	r5, [pc, #40]	@ (80026e8 <initialise_semihosting_exts+0x2c>)
 80026c0:	4c0a      	ldr	r4, [pc, #40]	@ (80026ec <initialise_semihosting_exts+0x30>)
 80026c2:	2100      	movs	r1, #0
 80026c4:	2201      	movs	r2, #1
 80026c6:	a801      	add	r0, sp, #4
 80026c8:	6029      	str	r1, [r5, #0]
 80026ca:	6022      	str	r2, [r4, #0]
 80026cc:	f7ff ff9c 	bl	8002608 <_get_semihosting_exts>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	dd07      	ble.n	80026e4 <initialise_semihosting_exts+0x28>
 80026d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026d8:	f003 0201 	and.w	r2, r3, #1
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	602a      	str	r2, [r5, #0]
 80026e2:	6023      	str	r3, [r4, #0]
 80026e4:	b003      	add	sp, #12
 80026e6:	bd30      	pop	{r4, r5, pc}
 80026e8:	20000080 	.word	0x20000080
 80026ec:	2000007c 	.word	0x2000007c

080026f0 <_has_ext_stdout_stderr>:
 80026f0:	b510      	push	{r4, lr}
 80026f2:	4c04      	ldr	r4, [pc, #16]	@ (8002704 <_has_ext_stdout_stderr+0x14>)
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	da01      	bge.n	80026fe <_has_ext_stdout_stderr+0xe>
 80026fa:	f7ff ffdf 	bl	80026bc <initialise_semihosting_exts>
 80026fe:	6820      	ldr	r0, [r4, #0]
 8002700:	bd10      	pop	{r4, pc}
 8002702:	bf00      	nop
 8002704:	2000007c 	.word	0x2000007c

08002708 <initialise_monitor_handles>:
 8002708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800270c:	b085      	sub	sp, #20
 800270e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80027c0 <initialise_monitor_handles+0xb8>
 8002712:	f8cd 9004 	str.w	r9, [sp, #4]
 8002716:	2303      	movs	r3, #3
 8002718:	2400      	movs	r4, #0
 800271a:	9303      	str	r3, [sp, #12]
 800271c:	af01      	add	r7, sp, #4
 800271e:	9402      	str	r4, [sp, #8]
 8002720:	2501      	movs	r5, #1
 8002722:	4628      	mov	r0, r5
 8002724:	4639      	mov	r1, r7
 8002726:	beab      	bkpt	0x00ab
 8002728:	4605      	mov	r5, r0
 800272a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80027c4 <initialise_monitor_handles+0xbc>
 800272e:	4623      	mov	r3, r4
 8002730:	4c20      	ldr	r4, [pc, #128]	@ (80027b4 <initialise_monitor_handles+0xac>)
 8002732:	f8c8 5000 	str.w	r5, [r8]
 8002736:	f04f 32ff 	mov.w	r2, #4294967295
 800273a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800273e:	3301      	adds	r3, #1
 8002740:	2b14      	cmp	r3, #20
 8002742:	d1fa      	bne.n	800273a <initialise_monitor_handles+0x32>
 8002744:	f7ff ffd4 	bl	80026f0 <_has_ext_stdout_stderr>
 8002748:	4d1b      	ldr	r5, [pc, #108]	@ (80027b8 <initialise_monitor_handles+0xb0>)
 800274a:	b1d0      	cbz	r0, 8002782 <initialise_monitor_handles+0x7a>
 800274c:	f04f 0a03 	mov.w	sl, #3
 8002750:	2304      	movs	r3, #4
 8002752:	f8cd 9004 	str.w	r9, [sp, #4]
 8002756:	2601      	movs	r6, #1
 8002758:	f8cd a00c 	str.w	sl, [sp, #12]
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	4630      	mov	r0, r6
 8002760:	4639      	mov	r1, r7
 8002762:	beab      	bkpt	0x00ab
 8002764:	4683      	mov	fp, r0
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <initialise_monitor_handles+0xb4>)
 8002768:	f8cd 9004 	str.w	r9, [sp, #4]
 800276c:	f8c3 b000 	str.w	fp, [r3]
 8002770:	2308      	movs	r3, #8
 8002772:	f8cd a00c 	str.w	sl, [sp, #12]
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	4630      	mov	r0, r6
 800277a:	4639      	mov	r1, r7
 800277c:	beab      	bkpt	0x00ab
 800277e:	4606      	mov	r6, r0
 8002780:	602e      	str	r6, [r5, #0]
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	bf02      	ittt	eq
 8002788:	4b0c      	ldreq	r3, [pc, #48]	@ (80027bc <initialise_monitor_handles+0xb4>)
 800278a:	681b      	ldreq	r3, [r3, #0]
 800278c:	602b      	streq	r3, [r5, #0]
 800278e:	2600      	movs	r6, #0
 8002790:	f8d8 3000 	ldr.w	r3, [r8]
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	6066      	str	r6, [r4, #4]
 8002798:	f7ff ffaa 	bl	80026f0 <_has_ext_stdout_stderr>
 800279c:	b130      	cbz	r0, 80027ac <initialise_monitor_handles+0xa4>
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <initialise_monitor_handles+0xb4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80027ac:	b005      	add	sp, #20
 80027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b2:	bf00      	nop
 80027b4:	20000624 	.word	0x20000624
 80027b8:	20000618 	.word	0x20000618
 80027bc:	2000061c 	.word	0x2000061c
 80027c0:	0800292b 	.word	0x0800292b
 80027c4:	20000620 	.word	0x20000620

080027c8 <_isatty>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	f7ff fd85 	bl	80022d8 <findslot>
 80027ce:	2409      	movs	r4, #9
 80027d0:	4605      	mov	r5, r0
 80027d2:	b920      	cbnz	r0, 80027de <_isatty+0x16>
 80027d4:	f7ff f84a 	bl	800186c <__errno>
 80027d8:	6004      	str	r4, [r0, #0]
 80027da:	2000      	movs	r0, #0
 80027dc:	bd70      	pop	{r4, r5, r6, pc}
 80027de:	4620      	mov	r0, r4
 80027e0:	4629      	mov	r1, r5
 80027e2:	beab      	bkpt	0x00ab
 80027e4:	4604      	mov	r4, r0
 80027e6:	2c01      	cmp	r4, #1
 80027e8:	4620      	mov	r0, r4
 80027ea:	d0f7      	beq.n	80027dc <_isatty+0x14>
 80027ec:	f7ff f83e 	bl	800186c <__errno>
 80027f0:	2513      	movs	r5, #19
 80027f2:	4604      	mov	r4, r0
 80027f4:	2600      	movs	r6, #0
 80027f6:	4628      	mov	r0, r5
 80027f8:	4631      	mov	r1, r6
 80027fa:	beab      	bkpt	0x00ab
 80027fc:	4605      	mov	r5, r0
 80027fe:	6025      	str	r5, [r4, #0]
 8002800:	e7eb      	b.n	80027da <_isatty+0x12>
	...

08002804 <_init>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	bf00      	nop
 8002808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280a:	bc08      	pop	{r3}
 800280c:	469e      	mov	lr, r3
 800280e:	4770      	bx	lr

08002810 <_fini>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr
