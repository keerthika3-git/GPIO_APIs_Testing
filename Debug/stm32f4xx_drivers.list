
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000228c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800242c  0800242c  0000342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800249c  0800249c  0000407c  2**0
                  CONTENTS
  4 .ARM          00000008  0800249c  0800249c  0000349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024a4  080024a4  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a4  080024a4  000034a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024a8  080024a8  000034a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080024ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000007c  08002528  0000407c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08002528  000042c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000151e  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000059a  00000000  00000000  000055ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00005b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012b  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000287b  00000000  00000000  00005e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002173  00000000  00000000  000086ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009ec4  00000000  00000000  0000a821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000146e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000112c  00000000  00000000  00014728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00015854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002414 	.word	0x08002414

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08002414 	.word	0x08002414

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <delay>:
#define SlaveAddr 0x68

#define LOW 0
#define BTN_PRESSED LOW

void delay(void){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<500000/2;i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_PinsInit>:

//receive buffer
uint8_t rcv_buf[32];


void I2C1_PinsInit(void){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
     GPIO_Handle_t I2CPins;

     I2CPins.pGPIOx=GPIOB;
 80002c2:	4b19      	ldr	r3, [pc, #100]	@ (8000328 <I2C1_PinsInit+0x6c>)
 80002c4:	607b      	str	r3, [r7, #4]
     I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
     I2CPins.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
     I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
     I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
     I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

     GPIO_PeriClockControl(GPIOB, ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	4812      	ldr	r0, [pc, #72]	@ (8000328 <I2C1_PinsInit+0x6c>)
 80002de:	f000 f921 	bl	8000524 <GPIO_PeriClockControl>
     I2CPins.pGPIOx->MODER = 0x00000000;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
     I2CPins.pGPIOx->OSPEEDR= 0x00000000;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
     I2CPins.pGPIOx->OTYPER=0x00000000;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
     I2CPins.pGPIOx->PUPDR=0x00000000;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
     I2CPins.pGPIOx->AFRL[0]=0x00000000;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
     I2CPins.pGPIOx->AFRL[1]=0x00000000;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2200      	movs	r2, #0
 8000304:	625a      	str	r2, [r3, #36]	@ 0x24
     //SCL
     I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_6;
 8000306:	2306      	movs	r3, #6
 8000308:	723b      	strb	r3, [r7, #8]
     GPIO_Init(&I2CPins);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f99f 	bl	8000650 <GPIO_Init>

     //SDA
     I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_9;
 8000312:	2309      	movs	r3, #9
 8000314:	723b      	strb	r3, [r7, #8]
     GPIO_Init(&I2CPins);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f999 	bl	8000650 <GPIO_Init>


}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020400 	.word	0x40020400

0800032c <I2C1_Inits>:

void I2C1_Inits(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx=I2C1;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <I2C1_Inits+0x2c>)
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <I2C1_Inits+0x30>)
 8000334:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl =I2C_ACK_ENABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <I2C1_Inits+0x2c>)
 8000338:	2201      	movs	r2, #1
 800033a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_SCLSpeed=I2C_SCL_SPEED_SM;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <I2C1_Inits+0x2c>)
 800033e:	4a08      	ldr	r2, [pc, #32]	@ (8000360 <I2C1_Inits+0x34>)
 8000340:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_DeviceAddress=MY_ADDR;
 8000342:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <I2C1_Inits+0x2c>)
 8000344:	2261      	movs	r2, #97	@ 0x61
 8000346:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle=I2C_FM_DUTY_2;
 8000348:	4b03      	ldr	r3, [pc, #12]	@ (8000358 <I2C1_Inits+0x2c>)
 800034a:	2200      	movs	r2, #0
 800034c:	729a      	strb	r2, [r3, #10]

	I2C_Init(&I2C1Handle);
 800034e:	4802      	ldr	r0, [pc, #8]	@ (8000358 <I2C1_Inits+0x2c>)
 8000350:	f000 fc50 	bl	8000bf4 <I2C_Init>

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000098 	.word	0x20000098
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	GPIOBtn.pGPIOx=GPIOC;
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <GPIO_ButtonInit+0x54>)
 800036c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 800036e:	230d      	movs	r3, #13
 8000370:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IN;
 8000372:	2300      	movs	r3, #0
 8000374:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000376:	2302      	movs	r3, #2
 8000378:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 800037a:	2300      	movs	r3, #0
 800037c:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOBtn.pGPIOx, ENABLE);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2101      	movs	r1, #1
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f8ce 	bl	8000524 <GPIO_PeriClockControl>
	GPIOBtn.pGPIOx->MODER = 0x00000000;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
	GPIOBtn.pGPIOx->OSPEEDR= 0x00000000;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
//	GpioLed.pGPIOx->OTYPER=0x00000000;
	GPIOBtn.pGPIOx->PUPDR=0x00000000;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
	GPIOBtn.pGPIOx->AFRL[0]=0x00000000;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
	GPIOBtn.pGPIOx->AFRL[1]=0x00000000;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	@ 0x24


	GPIO_Init(&GPIOBtn);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f951 	bl	8000650 <GPIO_Init>



}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40020800 	.word	0x40020800

080003bc <main>:

int main(void){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 80003c2:	f001 ffa9 	bl	8002318 <initialise_monitor_handles>

	printf("Application is running\n");
 80003c6:	4821      	ldr	r0, [pc, #132]	@ (800044c <main+0x90>)
 80003c8:	f000 ff2a 	bl	8001220 <puts>
	uint8_t commandcode;
	uint8_t len;

	GPIO_ButtonInit();
 80003cc:	f7ff ffca 	bl	8000364 <GPIO_ButtonInit>

	//i2c pin ints
	I2C1_PinsInit();
 80003d0:	f7ff ff74 	bl	80002bc <I2C1_PinsInit>

	//i2c peripheral config
	I2C1_Inits();
 80003d4:	f7ff ffaa 	bl	800032c <I2C1_Inits>

	//enable clock for i2c peripheral
	I2C_Peripheralcontrol(I2C1,ENABLE);
 80003d8:	2101      	movs	r1, #1
 80003da:	481d      	ldr	r0, [pc, #116]	@ (8000450 <main+0x94>)
 80003dc:	f000 fdd6 	bl	8000f8c <I2C_Peripheralcontrol>

	//ACK bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80003e0:	2101      	movs	r1, #1
 80003e2:	481b      	ldr	r0, [pc, #108]	@ (8000450 <main+0x94>)
 80003e4:	f000 fdb6 	bl	8000f54 <I2C_ManageAcking>

	while(1){

	//wait till button is pressed
	while(! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)== BTN_PRESSED);
 80003e8:	bf00      	nop
 80003ea:	210d      	movs	r1, #13
 80003ec:	4819      	ldr	r0, [pc, #100]	@ (8000454 <main+0x98>)
 80003ee:	f000 fad5 	bl	800099c <GPIO_ReadFromInputPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1f8      	bne.n	80003ea <main+0x2e>

	delay();//avoid button de-bouncing issues 200ms of delay
 80003f8:	f7ff ff4a 	bl	8000290 <delay>

	commandcode = 0x51;
 80003fc:	2351      	movs	r3, #81	@ 0x51
 80003fe:	71fb      	strb	r3, [r7, #7]
    I2C_MasterSendData(&I2C1Handle, &commandcode,1, SlaveAddr);
 8000400:	1df9      	adds	r1, r7, #7
 8000402:	2368      	movs	r3, #104	@ 0x68
 8000404:	2201      	movs	r2, #1
 8000406:	4814      	ldr	r0, [pc, #80]	@ (8000458 <main+0x9c>)
 8000408:	f000 fcb8 	bl	8000d7c <I2C_MasterSendData>

    I2C_MasterReceiveData(&I2C1Handle,&len, 1, SlaveAddr);
 800040c:	1db9      	adds	r1, r7, #6
 800040e:	2368      	movs	r3, #104	@ 0x68
 8000410:	2201      	movs	r2, #1
 8000412:	4811      	ldr	r0, [pc, #68]	@ (8000458 <main+0x9c>)
 8000414:	f000 fd14 	bl	8000e40 <I2C_MasterReceiveData>

    commandcode = 0x52;
 8000418:	2352      	movs	r3, #82	@ 0x52
 800041a:	71fb      	strb	r3, [r7, #7]
    I2C_MasterSendData(&I2C1Handle, &commandcode,1, SlaveAddr);
 800041c:	1df9      	adds	r1, r7, #7
 800041e:	2368      	movs	r3, #104	@ 0x68
 8000420:	2201      	movs	r2, #1
 8000422:	480d      	ldr	r0, [pc, #52]	@ (8000458 <main+0x9c>)
 8000424:	f000 fcaa 	bl	8000d7c <I2C_MasterSendData>

    I2C_MasterReceiveData(&I2C1Handle,rcv_buf, len, SlaveAddr);
 8000428:	79bb      	ldrb	r3, [r7, #6]
 800042a:	461a      	mov	r2, r3
 800042c:	2368      	movs	r3, #104	@ 0x68
 800042e:	490b      	ldr	r1, [pc, #44]	@ (800045c <main+0xa0>)
 8000430:	4809      	ldr	r0, [pc, #36]	@ (8000458 <main+0x9c>)
 8000432:	f000 fd05 	bl	8000e40 <I2C_MasterReceiveData>

    rcv_buf[len+1]='\0';
 8000436:	79bb      	ldrb	r3, [r7, #6]
 8000438:	3301      	adds	r3, #1
 800043a:	4a08      	ldr	r2, [pc, #32]	@ (800045c <main+0xa0>)
 800043c:	2100      	movs	r1, #0
 800043e:	54d1      	strb	r1, [r2, r3]

	printf("Data: %s",rcv_buf);
 8000440:	4906      	ldr	r1, [pc, #24]	@ (800045c <main+0xa0>)
 8000442:	4807      	ldr	r0, [pc, #28]	@ (8000460 <main+0xa4>)
 8000444:	f000 fe84 	bl	8001150 <iprintf>
	while(! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)== BTN_PRESSED);
 8000448:	e7ce      	b.n	80003e8 <main+0x2c>
 800044a:	bf00      	nop
 800044c:	0800242c 	.word	0x0800242c
 8000450:	40005400 	.word	0x40005400
 8000454:	40020800 	.word	0x40020800
 8000458:	20000098 	.word	0x20000098
 800045c:	200000a4 	.word	0x200000a4
 8000460:	08002444 	.word	0x08002444

08000464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800046c:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <_sbrk+0x5c>)
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <_sbrk+0x60>)
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000478:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d102      	bne.n	8000486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000480:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <_sbrk+0x64>)
 8000482:	4a12      	ldr	r2, [pc, #72]	@ (80004cc <_sbrk+0x68>)
 8000484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000486:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <_sbrk+0x64>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	693a      	ldr	r2, [r7, #16]
 8000490:	429a      	cmp	r2, r3
 8000492:	d207      	bcs.n	80004a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000494:	f000 fff2 	bl	800147c <__errno>
 8000498:	4603      	mov	r3, r0
 800049a:	220c      	movs	r2, #12
 800049c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e009      	b.n	80004b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a4:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <_sbrk+0x64>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004aa:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <_sbrk+0x64>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	4a05      	ldr	r2, [pc, #20]	@ (80004c8 <_sbrk+0x64>)
 80004b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3718      	adds	r7, #24
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20020000 	.word	0x20020000
 80004c4:	00000400 	.word	0x00000400
 80004c8:	200000c4 	.word	0x200000c4
 80004cc:	200002c0 	.word	0x200002c0

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fe:	f000 ffc3 	bl	8001488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff ff5b 	bl	80003bc <main>

08000506 <LoopForever>:

LoopForever:
  b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   r0, =_estack
 8000508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000514:	080024ac 	.word	0x080024ac
  ldr r2, =_sbss
 8000518:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800051c:	200002c0 	.word	0x200002c0

08000520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC_IRQHandler>
	...

08000524 <GPIO_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d13d      	bne.n	80005b2 <GPIO_PeriClockControl+0x8e>
		if(pGPIOx == GPIOA){
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a3f      	ldr	r2, [pc, #252]	@ (8000638 <GPIO_PeriClockControl+0x114>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d106      	bne.n	800054c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800053e:	4b3f      	ldr	r3, [pc, #252]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a3e      	ldr	r2, [pc, #248]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
		else{
			GPIOH_PCLK_DI();
		}

	}
}
 800054a:	e06f      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a3c      	ldr	r2, [pc, #240]	@ (8000640 <GPIO_PeriClockControl+0x11c>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d106      	bne.n	8000562 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000554:	4b39      	ldr	r3, [pc, #228]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	4a38      	ldr	r2, [pc, #224]	@ (800063c <GPIO_PeriClockControl+0x118>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000560:	e064      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a37      	ldr	r2, [pc, #220]	@ (8000644 <GPIO_PeriClockControl+0x120>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d106      	bne.n	8000578 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800056a:	4b34      	ldr	r3, [pc, #208]	@ (800063c <GPIO_PeriClockControl+0x118>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a33      	ldr	r2, [pc, #204]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000576:	e059      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a33      	ldr	r2, [pc, #204]	@ (8000648 <GPIO_PeriClockControl+0x124>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d106      	bne.n	800058e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000580:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000584:	4a2d      	ldr	r2, [pc, #180]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800058c:	e04e      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a2e      	ldr	r2, [pc, #184]	@ (800064c <GPIO_PeriClockControl+0x128>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000596:	4b29      	ldr	r3, [pc, #164]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a28      	ldr	r2, [pc, #160]	@ (800063c <GPIO_PeriClockControl+0x118>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a2:	e043      	b.n	800062c <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_EN();
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a8:	4a24      	ldr	r2, [pc, #144]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005b0:	e03c      	b.n	800062c <GPIO_PeriClockControl+0x108>
		if(pGPIOx == GPIOA){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <GPIO_PeriClockControl+0x114>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClockControl+0xa4>
			GPIOA_PCLK_DI();
 80005ba:	4b20      	ldr	r3, [pc, #128]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a1f      	ldr	r2, [pc, #124]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005c0:	f023 0301 	bic.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005c6:	e031      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <GPIO_PeriClockControl+0x11c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PeriClockControl+0xba>
			GPIOB_PCLK_DI();
 80005d0:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d4:	4a19      	ldr	r2, [pc, #100]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005d6:	f023 0302 	bic.w	r3, r3, #2
 80005da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005dc:	e026      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a18      	ldr	r2, [pc, #96]	@ (8000644 <GPIO_PeriClockControl+0x120>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d106      	bne.n	80005f4 <GPIO_PeriClockControl+0xd0>
			GPIOC_PCLK_DI();
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005ec:	f023 0304 	bic.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005f2:	e01b      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <GPIO_PeriClockControl+0x124>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PeriClockControl+0xe6>
			GPIOD_PCLK_DI();
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <GPIO_PeriClockControl+0x118>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000600:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000602:	f023 0308 	bic.w	r3, r3, #8
 8000606:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000608:	e010      	b.n	800062c <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <GPIO_PeriClockControl+0x128>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <GPIO_PeriClockControl+0xfc>
			GPIOE_PCLK_DI();
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a09      	ldr	r2, [pc, #36]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000618:	f023 0310 	bic.w	r3, r3, #16
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800061e:	e005      	b.n	800062c <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_DI();
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a05      	ldr	r2, [pc, #20]	@ (800063c <GPIO_PeriClockControl+0x118>)
 8000626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40020000 	.word	0x40020000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800
 8000648:	40020c00 	.word	0x40020c00
 800064c:	40021000 	.word	0x40021000

08000650 <GPIO_Init>:


/* Init and DeInit  */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000650:	b480      	push	{r7}
 8000652:	b087      	sub	sp, #28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

//	//Enable Peripheral clock
//	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);

	//1.configure modes
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG ){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d828      	bhi.n	80006b6 <GPIO_Init+0x66>
		 if(pGPIOHandle->pGPIOx == GPIOA){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a55      	ldr	r2, [pc, #340]	@ (80007c0 <GPIO_Init+0x170>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d103      	bne.n	8000676 <GPIO_Init+0x26>
		pGPIOHandle->pGPIOx->MODER=0x00000000;}
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
       //non interrupt mode
       temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
       pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing 2bits before setting
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	4619      	mov	r1, r3
 8000694:	2303      	movs	r3, #3
 8000696:	408b      	lsls	r3, r1
 8000698:	43db      	mvns	r3, r3
 800069a:	4619      	mov	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	400a      	ands	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]
       pGPIOHandle->pGPIOx->MODER |=temp; //setting
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	e0ac      	b.n	8000810 <GPIO_Init+0x1c0>
	 }
	 else{


		 //this for interrupt mode
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795b      	ldrb	r3, [r3, #5]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d117      	bne.n	80006ee <GPIO_Init+0x9e>
			 //1. configure Falling Trigger Selection Register
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006be:	4b41      	ldr	r3, [pc, #260]	@ (80007c4 <GPIO_Init+0x174>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7912      	ldrb	r2, [r2, #4]
 80006c6:	4611      	mov	r1, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	408a      	lsls	r2, r1
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a3d      	ldr	r2, [pc, #244]	@ (80007c4 <GPIO_Init+0x174>)
 80006d0:	430b      	orrs	r3, r1
 80006d2:	60d3      	str	r3, [r2, #12]
			 //clearing RTSR bit to avoid previous configuration issues
			 EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d4:	4b3b      	ldr	r3, [pc, #236]	@ (80007c4 <GPIO_Init+0x174>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	7912      	ldrb	r2, [r2, #4]
 80006dc:	4611      	mov	r1, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	408a      	lsls	r2, r1
 80006e2:	43d2      	mvns	r2, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a37      	ldr	r2, [pc, #220]	@ (80007c4 <GPIO_Init+0x174>)
 80006e8:	400b      	ands	r3, r1
 80006ea:	6093      	str	r3, [r2, #8]
 80006ec:	e035      	b.n	800075a <GPIO_Init+0x10a>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d117      	bne.n	8000726 <GPIO_Init+0xd6>
			 //1. configure Rising Trigger Selection Register
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f6:	4b33      	ldr	r3, [pc, #204]	@ (80007c4 <GPIO_Init+0x174>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7912      	ldrb	r2, [r2, #4]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a2f      	ldr	r2, [pc, #188]	@ (80007c4 <GPIO_Init+0x174>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6093      	str	r3, [r2, #8]
			//clearing FTSR bit to avoid previous configuration issues
             EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800070c:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <GPIO_Init+0x174>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	7912      	ldrb	r2, [r2, #4]
 8000714:	4611      	mov	r1, r2
 8000716:	2201      	movs	r2, #1
 8000718:	408a      	lsls	r2, r1
 800071a:	43d2      	mvns	r2, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a29      	ldr	r2, [pc, #164]	@ (80007c4 <GPIO_Init+0x174>)
 8000720:	400b      	ands	r3, r1
 8000722:	60d3      	str	r3, [r2, #12]
 8000724:	e019      	b.n	800075a <GPIO_Init+0x10a>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	795b      	ldrb	r3, [r3, #5]
 800072a:	2b06      	cmp	r3, #6
 800072c:	d115      	bne.n	800075a <GPIO_Init+0x10a>
			 //1. configure both FTSR and RTSR
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800072e:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <GPIO_Init+0x174>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	7912      	ldrb	r2, [r2, #4]
 8000736:	4611      	mov	r1, r2
 8000738:	2201      	movs	r2, #1
 800073a:	408a      	lsls	r2, r1
 800073c:	4611      	mov	r1, r2
 800073e:	4a21      	ldr	r2, [pc, #132]	@ (80007c4 <GPIO_Init+0x174>)
 8000740:	430b      	orrs	r3, r1
 8000742:	60d3      	str	r3, [r2, #12]
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <GPIO_Init+0x174>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	7912      	ldrb	r2, [r2, #4]
 800074c:	4611      	mov	r1, r2
 800074e:	2201      	movs	r2, #1
 8000750:	408a      	lsls	r2, r1
 8000752:	4611      	mov	r1, r2
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <GPIO_Init+0x174>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6093      	str	r3, [r2, #8]
		 }
		 //2.configure GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	74bb      	strb	r3, [r7, #18]

		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <GPIO_Init+0x170>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d032      	beq.n	80007dc <GPIO_Init+0x18c>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <GPIO_Init+0x178>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d01d      	beq.n	80007bc <GPIO_Init+0x16c>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a11      	ldr	r2, [pc, #68]	@ (80007cc <GPIO_Init+0x17c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d016      	beq.n	80007b8 <GPIO_Init+0x168>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <GPIO_Init+0x180>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d00f      	beq.n	80007b4 <GPIO_Init+0x164>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <GPIO_Init+0x184>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d008      	beq.n	80007b0 <GPIO_Init+0x160>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0d      	ldr	r2, [pc, #52]	@ (80007d8 <GPIO_Init+0x188>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d101      	bne.n	80007ac <GPIO_Init+0x15c>
 80007a8:	2307      	movs	r3, #7
 80007aa:	e018      	b.n	80007de <GPIO_Init+0x18e>
 80007ac:	2300      	movs	r3, #0
 80007ae:	e016      	b.n	80007de <GPIO_Init+0x18e>
 80007b0:	2304      	movs	r3, #4
 80007b2:	e014      	b.n	80007de <GPIO_Init+0x18e>
 80007b4:	2303      	movs	r3, #3
 80007b6:	e012      	b.n	80007de <GPIO_Init+0x18e>
 80007b8:	2302      	movs	r3, #2
 80007ba:	e010      	b.n	80007de <GPIO_Init+0x18e>
 80007bc:	2301      	movs	r3, #1
 80007be:	e00e      	b.n	80007de <GPIO_Init+0x18e>
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40013c00 	.word	0x40013c00
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40021c00 	.word	0x40021c00
 80007dc:	2300      	movs	r3, #0
 80007de:	747b      	strb	r3, [r7, #17]

		 SYSCFG_PCLK_EN();
 80007e0:	4b6a      	ldr	r3, [pc, #424]	@ (800098c <GPIO_Init+0x33c>)
 80007e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e4:	4a69      	ldr	r2, [pc, #420]	@ (800098c <GPIO_Init+0x33c>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ea:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 80007ec:	7c7a      	ldrb	r2, [r7, #17]
 80007ee:	7cbb      	ldrb	r3, [r7, #18]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	fa02 f103 	lsl.w	r1, r2, r3
 80007f6:	4a66      	ldr	r2, [pc, #408]	@ (8000990 <GPIO_Init+0x340>)
 80007f8:	7cfb      	ldrb	r3, [r7, #19]
 80007fa:	3302      	adds	r3, #2
 80007fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 //3.enable EXTI interrupt delivery using IMR
		 EXTI->IMR =(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	461a      	mov	r2, r3
 8000806:	2301      	movs	r3, #1
 8000808:	fa03 f202 	lsl.w	r2, r3, r2
 800080c:	4b61      	ldr	r3, [pc, #388]	@ (8000994 <GPIO_Init+0x344>)
 800080e:	601a      	str	r2, [r3, #0]
	 }

	 temp=0;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
	 //2.configure speed
	 if(pGPIOHandle->pGPIOx == GPIOA){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a5f      	ldr	r2, [pc, #380]	@ (8000998 <GPIO_Init+0x348>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d103      	bne.n	8000826 <GPIO_Init+0x1d6>

	 pGPIOHandle->pGPIOx->OSPEEDR= 0x00000000;}
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	799b      	ldrb	r3, [r3, #6]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2103      	movs	r1, #3
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	4619      	mov	r1, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	400a      	ands	r2, r1
 8000854:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDR |=temp; //setting
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6899      	ldr	r1, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	430a      	orrs	r2, r1
 8000864:	609a      	str	r2, [r3, #8]

	 temp=0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

	 //3.configure output types
	 if(pGPIOHandle->pGPIOx == GPIOA){
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a4a      	ldr	r2, [pc, #296]	@ (8000998 <GPIO_Init+0x348>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d103      	bne.n	800087c <GPIO_Init+0x22c>
	 pGPIOHandle->pGPIOx->OTYPER=0x00000000;}
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a1b      	ldrb	r3, [r3, #8]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 1bit before setting
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	4619      	mov	r1, r3
 8000898:	2301      	movs	r3, #1
 800089a:	408b      	lsls	r3, r1
 800089c:	43db      	mvns	r3, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	400a      	ands	r2, r1
 80008a6:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |=temp; //setting
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6859      	ldr	r1, [r3, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	605a      	str	r2, [r3, #4]

	 temp=0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

	 //4. configure pull up/pull down
	 if(pGPIOHandle->pGPIOx == GPIOA){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a35      	ldr	r2, [pc, #212]	@ (8000998 <GPIO_Init+0x348>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d103      	bne.n	80008ce <GPIO_Init+0x27e>
	 pGPIOHandle->pGPIOx->PUPDR=0x00000000;}
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	79db      	ldrb	r3, [r3, #7]
 80008d2:	461a      	mov	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << 2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68da      	ldr	r2, [r3, #12]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2103      	movs	r1, #3
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	400a      	ands	r2, r1
 80008fc:	60da      	str	r2, [r3, #12]
     pGPIOHandle->pGPIOx->PUPDR |=temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68d9      	ldr	r1, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	430a      	orrs	r2, r1
 800090c:	60da      	str	r2, [r3, #12]

	 temp=0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

	 //5.configure alternate functionality
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN ){
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d131      	bne.n	800097e <GPIO_Init+0x32e>

		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xFF <<(4*temp2));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	7c3a      	ldrb	r2, [r7, #16]
 8000932:	3208      	adds	r2, #8
 8000934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	22ff      	movs	r2, #255	@ 0xff
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	7c3a      	ldrb	r2, [r7, #16]
 800094c:	4001      	ands	r1, r0
 800094e:	3208      	adds	r2, #8
 8000950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	7c3a      	ldrb	r2, [r7, #16]
 800095a:	3208      	adds	r2, #8
 800095c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7a5b      	ldrb	r3, [r3, #9]
 8000964:	461a      	mov	r2, r3
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	7c3a      	ldrb	r2, [r7, #16]
 8000976:	4301      	orrs	r1, r0
 8000978:	3208      	adds	r2, #8
 800097a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }

}
 800097e:	bf00      	nop
 8000980:	371c      	adds	r7, #28
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40013800 	.word	0x40013800
 8000994:	40013c00 	.word	0x40013c00
 8000998:	40020000 	.word	0x40020000

0800099c <GPIO_ReadFromInputPin>:

}

/* Data read and write  */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber){
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	uint8_t value =(uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001); //right shifting any pin number to least significant bit by setting everything 0
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	691a      	ldr	r2, [r3, #16]
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	fa22 f303 	lsr.w	r3, r2, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
	return value;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void  I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);    //slave adress + lsb is read/write bit which must be set to 0 for write
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	f023 0301 	bic.w	r3, r3, #1
 8000a00:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000a02:	78fa      	ldrb	r2, [r7, #3]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	611a      	str	r2, [r3, #16]

}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;    //slave adress + lsb is read/write bit which must be set to 1 for read
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000a2e:	78fa      	ldrb	r2, [r7, #3]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	611a      	str	r2, [r3, #16]

}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;

}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <I2C_GenerateStopCondition>:

static void  I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <I2C_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d120      	bne.n	8000ad4 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <I2C_PeriClockControl+0xa0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000a9a:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a21      	ldr	r2, [pc, #132]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000aa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}

	}
}
 8000aa6:	e035      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <I2C_PeriClockControl+0xa8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000abc:	e02a      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b2c <I2C_PeriClockControl+0xac>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d126      	bne.n	8000b14 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a16      	ldr	r2, [pc, #88]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000acc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ad2:	e01f      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <I2C_PeriClockControl+0xa0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	4a10      	ldr	r2, [pc, #64]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ae2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ae8:	e014      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <I2C_PeriClockControl+0xa8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000af8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000afe:	e009      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <I2C_PeriClockControl+0xac>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d105      	bne.n	8000b14 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000b0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40005400 	.word	0x40005400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40005800 	.word	0x40005800
 8000b2c:	40005c00 	.word	0x40005c00

08000b30 <RCC_GetPLLOutputClock>:
uint32_t RCC_GetPLLOutputClock(){
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
	return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1;

	clksrc = ((RCC->CFGR >> 2) &0x3); //mask all bits in cfgr register except 2 and 3 bits
 8000b46:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <RCC_GetPCLK1Value+0xa0>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	727b      	strb	r3, [r7, #9]
	if(clksrc==0){
 8000b54:	7a7b      	ldrb	r3, [r7, #9]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <RCC_GetPCLK1Value+0xa4>)
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e00b      	b.n	8000b78 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==1){
 8000b60:	7a7b      	ldrb	r3, [r7, #9]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d102      	bne.n	8000b6c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <RCC_GetPCLK1Value+0xa8>)
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	e005      	b.n	8000b78 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==2){
 8000b6c:	7a7b      	ldrb	r3, [r7, #9]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d102      	bne.n	8000b78 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000b72:	f7ff ffdd 	bl	8000b30 <RCC_GetPLLOutputClock>
 8000b76:	60f8      	str	r0, [r7, #12]
	}

	//AHB
	temp=((RCC->CFGR >> 4) &0xF);
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <RCC_GetPCLK1Value+0xa0>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	091b      	lsrs	r3, r3, #4
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	723b      	strb	r3, [r7, #8]
	if(temp<8){
 8000b86:	7a3b      	ldrb	r3, [r7, #8]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d802      	bhi.n	8000b92 <RCC_GetPCLK1Value+0x52>
		ahbp=1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	72fb      	strb	r3, [r7, #11]
 8000b90:	e005      	b.n	8000b9e <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp=AHB_PresScaler[temp-8];
 8000b92:	7a3b      	ldrb	r3, [r7, #8]
 8000b94:	3b08      	subs	r3, #8
 8000b96:	4a15      	ldr	r2, [pc, #84]	@ (8000bec <RCC_GetPCLK1Value+0xac>)
 8000b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9c:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp=((RCC->CFGR >> 10) &0x7);
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <RCC_GetPCLK1Value+0xa0>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	0a9b      	lsrs	r3, r3, #10
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	723b      	strb	r3, [r7, #8]
	if(temp<4){
 8000bac:	7a3b      	ldrb	r3, [r7, #8]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d802      	bhi.n	8000bb8 <RCC_GetPCLK1Value+0x78>
		apb1=1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	72bb      	strb	r3, [r7, #10]
 8000bb6:	e005      	b.n	8000bc4 <RCC_GetPCLK1Value+0x84>
	}else{
		apb1=APB1_PresScaler[temp-4];
 8000bb8:	7a3b      	ldrb	r3, [r7, #8]
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <RCC_GetPCLK1Value+0xb0>)
 8000bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc2:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp ) / apb1;
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bcc:	7abb      	ldrb	r3, [r7, #10]
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	00f42400 	.word	0x00f42400
 8000be8:	007a1200 	.word	0x007a1200
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000010 	.word	0x20000010

08000bf4 <I2C_Init>:

/* Init and DeInit  */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0 ;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff3a 	bl	8000a80 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7a5b      	ldrb	r3, [r3, #9]
 8000c10:	029b      	lsls	r3, r3, #10
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000c24:	f7ff ff8c 	bl	8000b40 <RCC_GetPCLK1Value>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a47      	ldr	r2, [pc, #284]	@ (8000d48 <I2C_Init+0x154>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c9b      	lsrs	r3, r3, #18
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c42:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7a1b      	ldrb	r3, [r3, #8]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a36      	ldr	r2, [pc, #216]	@ (8000d4c <I2C_Init+0x158>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d80f      	bhi.n	8000c96 <I2C_Init+0xa2>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c76:	f7ff ff63 	bl	8000b40 <RCC_GetPCLK1Value>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c88:	897b      	ldrh	r3, [r7, #10]
 8000c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e02c      	b.n	8000cf0 <I2C_Init+0xfc>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c9c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7a9b      	ldrb	r3, [r3, #10]
 8000ca2:	039b      	lsls	r3, r3, #14
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7a9b      	ldrb	r3, [r3, #10]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10b      	bne.n	8000cca <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000cb2:	f7ff ff45 	bl	8000b40 <RCC_GetPCLK1Value>
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc6:	817b      	strh	r3, [r7, #10]
 8000cc8:	e00c      	b.n	8000ce4 <I2C_Init+0xf0>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000cca:	f7ff ff39 	bl	8000b40 <RCC_GetPCLK1Value>
 8000cce:	4601      	mov	r1, r0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	009a      	lsls	r2, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce2:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000ce4:	897b      	ldrh	r3, [r7, #10]
 8000ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	@ (8000d4c <I2C_Init+0x158>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d809      	bhi.n	8000d16 <I2C_Init+0x122>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000d02:	f7ff ff1d 	bl	8000b40 <RCC_GetPCLK1Value>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a0f      	ldr	r2, [pc, #60]	@ (8000d48 <I2C_Init+0x154>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	0c9b      	lsrs	r3, r3, #18
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e00d      	b.n	8000d32 <I2C_Init+0x13e>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000d16:	f7ff ff13 	bl	8000b40 <RCC_GetPCLK1Value>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	0a5b      	lsrs	r3, r3, #9
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <I2C_Init+0x15c>)
 8000d28:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2c:	09db      	lsrs	r3, r3, #7
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d3c:	621a      	str	r2, [r3, #32]
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	431bde83 	.word	0x431bde83
 8000d4c:	000186a0 	.word	0x000186a0
 8000d50:	00044b83 	.word	0x00044b83

08000d54 <I2C_GetFlagStatus>:
		I2C3_REG_RESET();
	}

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx,uint32_t FlagName){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <I2C_MasterSendData>:


void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer,uint32_t Len,uint8_t SlaveAddr){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	70fb      	strb	r3, [r7, #3]
	//1.Generate START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe1a 	bl	80009c8 <I2C_GenerateStartCondition>

	//2.confirms start generation is completed by checking SB flag in SR1
	//Note: Until sb is cleared SCL will be stretched (pulled to low)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB) );
 8000d94:	bf00      	nop
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffd9 	bl	8000d54 <I2C_GetFlagStatus>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f6      	beq.n	8000d96 <I2C_MasterSendData+0x1a>

	//3.send address of the slave with read/write bit to 0 (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fe19 	bl	80009e8 <I2C_ExecuteAddressPhaseWrite>

	//4.confirm address phase is completed by checking ADDR flag in SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR) );
 8000db6:	bf00      	nop
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ffc8 	bl	8000d54 <I2C_GetFlagStatus>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f6      	beq.n	8000db8 <I2C_MasterSendData+0x3c>

	//5.clear ADDR flag according to its software sequence
	//NOte: Until ADDR is cleared SCL will be stretched
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fe36 	bl	8000a40 <I2C_ClearADDRFlag>

	//6.send data until len is 0
	while(Len > 0){
 8000dd4:	e014      	b.n	8000e00 <I2C_MasterSendData+0x84>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE) );
 8000dd6:	bf00      	nop
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ffb8 	bl	8000d54 <I2C_GetFlagStatus>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f6      	beq.n	8000dd8 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3301      	adds	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
		Len--;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1e7      	bne.n	8000dd6 <I2C_MasterSendData+0x5a>
	}

	//7.when Len becomes 0 wait for TXE=1 and BTF=1 before generating STOP
	//means that both SR and DR are empty and next transmission should begin
	//when BTF=1, SCL will be stretched
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE) );
 8000e06:	bf00      	nop
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffa0 	bl	8000d54 <I2C_GetFlagStatus>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f6      	beq.n	8000e08 <I2C_MasterSendData+0x8c>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF) );
 8000e1a:	bf00      	nop
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2104      	movs	r1, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff96 	bl	8000d54 <I2C_GetFlagStatus>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f6      	beq.n	8000e1c <I2C_MasterSendData+0xa0>


	//8.Generate STOP and master need not to wait for completion of STOP
	//Note: generating STOP, automatically clears BTF

	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fe14 	bl	8000a60 <I2C_GenerateStopCondition>

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer,uint32_t Len,uint8_t SlaveAddr){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	70fb      	strb	r3, [r7, #3]

	//1.generate START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fdb8 	bl	80009c8 <I2C_GenerateStartCondition>

	//2.confirms start generation is completed by checking SB flag in SR1
	//Note: Until sb is cleared SCL will be stretched (pulled to low)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB) );
 8000e58:	bf00      	nop
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff77 	bl	8000d54 <I2C_GetFlagStatus>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f6      	beq.n	8000e5a <I2C_MasterReceiveData+0x1a>

	//3.send address of the slave with read/write bit to 1 (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fdcd 	bl	8000a14 <I2C_ExecuteAddressPhaseRead>

//	//4.confirm address phase is completed by checking ADDR flag in SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR) );
 8000e7a:	bf00      	nop
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff66 	bl	8000d54 <I2C_GetFlagStatus>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f6      	beq.n	8000e7c <I2C_MasterReceiveData+0x3c>

	//procedure to read only 1 byte from slave
	if(Len == 1){
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d11f      	bne.n	8000ed4 <I2C_MasterReceiveData+0x94>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f85a 	bl	8000f54 <I2C_ManageAcking>


		//clear ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fdcb 	bl	8000a40 <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE) );
 8000eaa:	bf00      	nop
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff4e 	bl	8000d54 <I2C_GetFlagStatus>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f6      	beq.n	8000eac <I2C_MasterReceiveData+0x6c>

		//generate stop condition
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fdcc 	bl	8000a60 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	701a      	strb	r2, [r3, #0]


	}

	//procedure to read data from slave when Len>1
	if(Len>1){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d92e      	bls.n	8000f38 <I2C_MasterReceiveData+0xf8>
		//clear ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fdae 	bl	8000a40 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for(uint32_t i=Len;i>0;i--){
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e023      	b.n	8000f32 <I2C_MasterReceiveData+0xf2>
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE) );
 8000eea:	bf00      	nop
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2140      	movs	r1, #64	@ 0x40
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff2e 	bl	8000d54 <I2C_GetFlagStatus>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f6      	beq.n	8000eec <I2C_MasterReceiveData+0xac>

			if(i==2)//if last 2 bytes are remaining
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d10a      	bne.n	8000f1a <I2C_MasterReceiveData+0xda>
			{
				//clear ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f822 	bl	8000f54 <I2C_ManageAcking>


                //generate stop condition
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fda3 	bl	8000a60 <I2C_GenerateStopCondition>

		    }

			//read data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	701a      	strb	r2, [r3, #0]

			//increment buffer address
			pRxBuffer++;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
		for(uint32_t i=Len;i>0;i--){
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1d8      	bne.n	8000eea <I2C_MasterReceiveData+0xaa>
		}
	}
	//re enable acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	7a5b      	ldrb	r3, [r3, #9]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d105      	bne.n	8000f4c <I2C_MasterReceiveData+0x10c>
	I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f804 	bl	8000f54 <I2C_ManageAcking>
	}

}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <I2C_ManageAcking>:

/*
 * peripheral control APIs
 */

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE){
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d106      	bne.n	8000f74 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
	}
	else{
		//disable the ack
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 8000f72:	e005      	b.n	8000f80 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <I2C_Peripheralcontrol>:

void I2C_Peripheralcontrol(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d106      	bne.n	8000fac <I2C_Peripheralcontrol+0x20>
	pI2Cx->CR1 |= (1<<I2C_CR1_PE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
	}
	else if(EnorDi == DISABLE){
	pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);

	}
}
 8000faa:	e008      	b.n	8000fbe <I2C_Peripheralcontrol+0x32>
	else if(EnorDi == DISABLE){
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <I2C_Peripheralcontrol+0x32>
	pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 0201 	bic.w	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <std>:
 8000fcc:	2300      	movs	r3, #0
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8000fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fda:	6083      	str	r3, [r0, #8]
 8000fdc:	8181      	strh	r1, [r0, #12]
 8000fde:	6643      	str	r3, [r0, #100]	@ 0x64
 8000fe0:	81c2      	strh	r2, [r0, #14]
 8000fe2:	6183      	str	r3, [r0, #24]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	305c      	adds	r0, #92	@ 0x5c
 8000fea:	f000 f9f9 	bl	80013e0 <memset>
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <std+0x58>)
 8000ff0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <std+0x5c>)
 8000ff4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <std+0x60>)
 8000ff8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <std+0x64>)
 8000ffc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <std+0x68>)
 8001000:	6224      	str	r4, [r4, #32]
 8001002:	429c      	cmp	r4, r3
 8001004:	d006      	beq.n	8001014 <std+0x48>
 8001006:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800100a:	4294      	cmp	r4, r2
 800100c:	d002      	beq.n	8001014 <std+0x48>
 800100e:	33d0      	adds	r3, #208	@ 0xd0
 8001010:	429c      	cmp	r4, r3
 8001012:	d105      	bne.n	8001020 <std+0x54>
 8001014:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800101c:	f000 ba58 	b.w	80014d0 <__retarget_lock_init_recursive>
 8001020:	bd10      	pop	{r4, pc}
 8001022:	bf00      	nop
 8001024:	08001231 	.word	0x08001231
 8001028:	08001253 	.word	0x08001253
 800102c:	0800128b 	.word	0x0800128b
 8001030:	080012af 	.word	0x080012af
 8001034:	200000c8 	.word	0x200000c8

08001038 <stdio_exit_handler>:
 8001038:	4a02      	ldr	r2, [pc, #8]	@ (8001044 <stdio_exit_handler+0xc>)
 800103a:	4903      	ldr	r1, [pc, #12]	@ (8001048 <stdio_exit_handler+0x10>)
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <stdio_exit_handler+0x14>)
 800103e:	f000 b869 	b.w	8001114 <_fwalk_sglue>
 8001042:	bf00      	nop
 8001044:	20000018 	.word	0x20000018
 8001048:	08001d71 	.word	0x08001d71
 800104c:	20000028 	.word	0x20000028

08001050 <cleanup_stdio>:
 8001050:	6841      	ldr	r1, [r0, #4]
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <cleanup_stdio+0x34>)
 8001054:	4299      	cmp	r1, r3
 8001056:	b510      	push	{r4, lr}
 8001058:	4604      	mov	r4, r0
 800105a:	d001      	beq.n	8001060 <cleanup_stdio+0x10>
 800105c:	f000 fe88 	bl	8001d70 <_fflush_r>
 8001060:	68a1      	ldr	r1, [r4, #8]
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <cleanup_stdio+0x38>)
 8001064:	4299      	cmp	r1, r3
 8001066:	d002      	beq.n	800106e <cleanup_stdio+0x1e>
 8001068:	4620      	mov	r0, r4
 800106a:	f000 fe81 	bl	8001d70 <_fflush_r>
 800106e:	68e1      	ldr	r1, [r4, #12]
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <cleanup_stdio+0x3c>)
 8001072:	4299      	cmp	r1, r3
 8001074:	d004      	beq.n	8001080 <cleanup_stdio+0x30>
 8001076:	4620      	mov	r0, r4
 8001078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800107c:	f000 be78 	b.w	8001d70 <_fflush_r>
 8001080:	bd10      	pop	{r4, pc}
 8001082:	bf00      	nop
 8001084:	200000c8 	.word	0x200000c8
 8001088:	20000130 	.word	0x20000130
 800108c:	20000198 	.word	0x20000198

08001090 <global_stdio_init.part.0>:
 8001090:	b510      	push	{r4, lr}
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <global_stdio_init.part.0+0x30>)
 8001094:	4c0b      	ldr	r4, [pc, #44]	@ (80010c4 <global_stdio_init.part.0+0x34>)
 8001096:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <global_stdio_init.part.0+0x38>)
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	4620      	mov	r0, r4
 800109c:	2200      	movs	r2, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	f7ff ff94 	bl	8000fcc <std>
 80010a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80010a8:	2201      	movs	r2, #1
 80010aa:	2109      	movs	r1, #9
 80010ac:	f7ff ff8e 	bl	8000fcc <std>
 80010b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010b4:	2202      	movs	r2, #2
 80010b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010ba:	2112      	movs	r1, #18
 80010bc:	f7ff bf86 	b.w	8000fcc <std>
 80010c0:	20000200 	.word	0x20000200
 80010c4:	200000c8 	.word	0x200000c8
 80010c8:	08001039 	.word	0x08001039

080010cc <__sfp_lock_acquire>:
 80010cc:	4801      	ldr	r0, [pc, #4]	@ (80010d4 <__sfp_lock_acquire+0x8>)
 80010ce:	f000 ba00 	b.w	80014d2 <__retarget_lock_acquire_recursive>
 80010d2:	bf00      	nop
 80010d4:	20000209 	.word	0x20000209

080010d8 <__sfp_lock_release>:
 80010d8:	4801      	ldr	r0, [pc, #4]	@ (80010e0 <__sfp_lock_release+0x8>)
 80010da:	f000 b9fb 	b.w	80014d4 <__retarget_lock_release_recursive>
 80010de:	bf00      	nop
 80010e0:	20000209 	.word	0x20000209

080010e4 <__sinit>:
 80010e4:	b510      	push	{r4, lr}
 80010e6:	4604      	mov	r4, r0
 80010e8:	f7ff fff0 	bl	80010cc <__sfp_lock_acquire>
 80010ec:	6a23      	ldr	r3, [r4, #32]
 80010ee:	b11b      	cbz	r3, 80010f8 <__sinit+0x14>
 80010f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010f4:	f7ff bff0 	b.w	80010d8 <__sfp_lock_release>
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <__sinit+0x28>)
 80010fa:	6223      	str	r3, [r4, #32]
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__sinit+0x2c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f5      	bne.n	80010f0 <__sinit+0xc>
 8001104:	f7ff ffc4 	bl	8001090 <global_stdio_init.part.0>
 8001108:	e7f2      	b.n	80010f0 <__sinit+0xc>
 800110a:	bf00      	nop
 800110c:	08001051 	.word	0x08001051
 8001110:	20000200 	.word	0x20000200

08001114 <_fwalk_sglue>:
 8001114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001118:	4607      	mov	r7, r0
 800111a:	4688      	mov	r8, r1
 800111c:	4614      	mov	r4, r2
 800111e:	2600      	movs	r6, #0
 8001120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001124:	f1b9 0901 	subs.w	r9, r9, #1
 8001128:	d505      	bpl.n	8001136 <_fwalk_sglue+0x22>
 800112a:	6824      	ldr	r4, [r4, #0]
 800112c:	2c00      	cmp	r4, #0
 800112e:	d1f7      	bne.n	8001120 <_fwalk_sglue+0xc>
 8001130:	4630      	mov	r0, r6
 8001132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001136:	89ab      	ldrh	r3, [r5, #12]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d907      	bls.n	800114c <_fwalk_sglue+0x38>
 800113c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001140:	3301      	adds	r3, #1
 8001142:	d003      	beq.n	800114c <_fwalk_sglue+0x38>
 8001144:	4629      	mov	r1, r5
 8001146:	4638      	mov	r0, r7
 8001148:	47c0      	blx	r8
 800114a:	4306      	orrs	r6, r0
 800114c:	3568      	adds	r5, #104	@ 0x68
 800114e:	e7e9      	b.n	8001124 <_fwalk_sglue+0x10>

08001150 <iprintf>:
 8001150:	b40f      	push	{r0, r1, r2, r3}
 8001152:	b507      	push	{r0, r1, r2, lr}
 8001154:	4906      	ldr	r1, [pc, #24]	@ (8001170 <iprintf+0x20>)
 8001156:	ab04      	add	r3, sp, #16
 8001158:	6808      	ldr	r0, [r1, #0]
 800115a:	f853 2b04 	ldr.w	r2, [r3], #4
 800115e:	6881      	ldr	r1, [r0, #8]
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	f000 fadb 	bl	800171c <_vfiprintf_r>
 8001166:	b003      	add	sp, #12
 8001168:	f85d eb04 	ldr.w	lr, [sp], #4
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr
 8001170:	20000024 	.word	0x20000024

08001174 <_puts_r>:
 8001174:	6a03      	ldr	r3, [r0, #32]
 8001176:	b570      	push	{r4, r5, r6, lr}
 8001178:	6884      	ldr	r4, [r0, #8]
 800117a:	4605      	mov	r5, r0
 800117c:	460e      	mov	r6, r1
 800117e:	b90b      	cbnz	r3, 8001184 <_puts_r+0x10>
 8001180:	f7ff ffb0 	bl	80010e4 <__sinit>
 8001184:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001186:	07db      	lsls	r3, r3, #31
 8001188:	d405      	bmi.n	8001196 <_puts_r+0x22>
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	0598      	lsls	r0, r3, #22
 800118e:	d402      	bmi.n	8001196 <_puts_r+0x22>
 8001190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001192:	f000 f99e 	bl	80014d2 <__retarget_lock_acquire_recursive>
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	0719      	lsls	r1, r3, #28
 800119a:	d502      	bpl.n	80011a2 <_puts_r+0x2e>
 800119c:	6923      	ldr	r3, [r4, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d135      	bne.n	800120e <_puts_r+0x9a>
 80011a2:	4621      	mov	r1, r4
 80011a4:	4628      	mov	r0, r5
 80011a6:	f000 f8c5 	bl	8001334 <__swsetup_r>
 80011aa:	b380      	cbz	r0, 800120e <_puts_r+0x9a>
 80011ac:	f04f 35ff 	mov.w	r5, #4294967295
 80011b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011b2:	07da      	lsls	r2, r3, #31
 80011b4:	d405      	bmi.n	80011c2 <_puts_r+0x4e>
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	059b      	lsls	r3, r3, #22
 80011ba:	d402      	bmi.n	80011c2 <_puts_r+0x4e>
 80011bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011be:	f000 f989 	bl	80014d4 <__retarget_lock_release_recursive>
 80011c2:	4628      	mov	r0, r5
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da04      	bge.n	80011d4 <_puts_r+0x60>
 80011ca:	69a2      	ldr	r2, [r4, #24]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dc17      	bgt.n	8001200 <_puts_r+0x8c>
 80011d0:	290a      	cmp	r1, #10
 80011d2:	d015      	beq.n	8001200 <_puts_r+0x8c>
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	6022      	str	r2, [r4, #0]
 80011da:	7019      	strb	r1, [r3, #0]
 80011dc:	68a3      	ldr	r3, [r4, #8]
 80011de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011e2:	3b01      	subs	r3, #1
 80011e4:	60a3      	str	r3, [r4, #8]
 80011e6:	2900      	cmp	r1, #0
 80011e8:	d1ed      	bne.n	80011c6 <_puts_r+0x52>
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da11      	bge.n	8001212 <_puts_r+0x9e>
 80011ee:	4622      	mov	r2, r4
 80011f0:	210a      	movs	r1, #10
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 f85f 	bl	80012b6 <__swbuf_r>
 80011f8:	3001      	adds	r0, #1
 80011fa:	d0d7      	beq.n	80011ac <_puts_r+0x38>
 80011fc:	250a      	movs	r5, #10
 80011fe:	e7d7      	b.n	80011b0 <_puts_r+0x3c>
 8001200:	4622      	mov	r2, r4
 8001202:	4628      	mov	r0, r5
 8001204:	f000 f857 	bl	80012b6 <__swbuf_r>
 8001208:	3001      	adds	r0, #1
 800120a:	d1e7      	bne.n	80011dc <_puts_r+0x68>
 800120c:	e7ce      	b.n	80011ac <_puts_r+0x38>
 800120e:	3e01      	subs	r6, #1
 8001210:	e7e4      	b.n	80011dc <_puts_r+0x68>
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	6022      	str	r2, [r4, #0]
 8001218:	220a      	movs	r2, #10
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e7ee      	b.n	80011fc <_puts_r+0x88>
	...

08001220 <puts>:
 8001220:	4b02      	ldr	r3, [pc, #8]	@ (800122c <puts+0xc>)
 8001222:	4601      	mov	r1, r0
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f7ff bfa5 	b.w	8001174 <_puts_r>
 800122a:	bf00      	nop
 800122c:	20000024 	.word	0x20000024

08001230 <__sread>:
 8001230:	b510      	push	{r4, lr}
 8001232:	460c      	mov	r4, r1
 8001234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001238:	f000 f8fc 	bl	8001434 <_read_r>
 800123c:	2800      	cmp	r0, #0
 800123e:	bfab      	itete	ge
 8001240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001242:	89a3      	ldrhlt	r3, [r4, #12]
 8001244:	181b      	addge	r3, r3, r0
 8001246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800124a:	bfac      	ite	ge
 800124c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800124e:	81a3      	strhlt	r3, [r4, #12]
 8001250:	bd10      	pop	{r4, pc}

08001252 <__swrite>:
 8001252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001256:	461f      	mov	r7, r3
 8001258:	898b      	ldrh	r3, [r1, #12]
 800125a:	05db      	lsls	r3, r3, #23
 800125c:	4605      	mov	r5, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4616      	mov	r6, r2
 8001262:	d505      	bpl.n	8001270 <__swrite+0x1e>
 8001264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001268:	2302      	movs	r3, #2
 800126a:	2200      	movs	r2, #0
 800126c:	f000 f8d0 	bl	8001410 <_lseek_r>
 8001270:	89a3      	ldrh	r3, [r4, #12]
 8001272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800127a:	81a3      	strh	r3, [r4, #12]
 800127c:	4632      	mov	r2, r6
 800127e:	463b      	mov	r3, r7
 8001280:	4628      	mov	r0, r5
 8001282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001286:	f000 b8e7 	b.w	8001458 <_write_r>

0800128a <__sseek>:
 800128a:	b510      	push	{r4, lr}
 800128c:	460c      	mov	r4, r1
 800128e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001292:	f000 f8bd 	bl	8001410 <_lseek_r>
 8001296:	1c43      	adds	r3, r0, #1
 8001298:	89a3      	ldrh	r3, [r4, #12]
 800129a:	bf15      	itete	ne
 800129c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800129e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012a6:	81a3      	strheq	r3, [r4, #12]
 80012a8:	bf18      	it	ne
 80012aa:	81a3      	strhne	r3, [r4, #12]
 80012ac:	bd10      	pop	{r4, pc}

080012ae <__sclose>:
 80012ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b2:	f000 b89d 	b.w	80013f0 <_close_r>

080012b6 <__swbuf_r>:
 80012b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b8:	460e      	mov	r6, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	4605      	mov	r5, r0
 80012be:	b118      	cbz	r0, 80012c8 <__swbuf_r+0x12>
 80012c0:	6a03      	ldr	r3, [r0, #32]
 80012c2:	b90b      	cbnz	r3, 80012c8 <__swbuf_r+0x12>
 80012c4:	f7ff ff0e 	bl	80010e4 <__sinit>
 80012c8:	69a3      	ldr	r3, [r4, #24]
 80012ca:	60a3      	str	r3, [r4, #8]
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	071a      	lsls	r2, r3, #28
 80012d0:	d501      	bpl.n	80012d6 <__swbuf_r+0x20>
 80012d2:	6923      	ldr	r3, [r4, #16]
 80012d4:	b943      	cbnz	r3, 80012e8 <__swbuf_r+0x32>
 80012d6:	4621      	mov	r1, r4
 80012d8:	4628      	mov	r0, r5
 80012da:	f000 f82b 	bl	8001334 <__swsetup_r>
 80012de:	b118      	cbz	r0, 80012e8 <__swbuf_r+0x32>
 80012e0:	f04f 37ff 	mov.w	r7, #4294967295
 80012e4:	4638      	mov	r0, r7
 80012e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	6922      	ldr	r2, [r4, #16]
 80012ec:	1a98      	subs	r0, r3, r2
 80012ee:	6963      	ldr	r3, [r4, #20]
 80012f0:	b2f6      	uxtb	r6, r6
 80012f2:	4283      	cmp	r3, r0
 80012f4:	4637      	mov	r7, r6
 80012f6:	dc05      	bgt.n	8001304 <__swbuf_r+0x4e>
 80012f8:	4621      	mov	r1, r4
 80012fa:	4628      	mov	r0, r5
 80012fc:	f000 fd38 	bl	8001d70 <_fflush_r>
 8001300:	2800      	cmp	r0, #0
 8001302:	d1ed      	bne.n	80012e0 <__swbuf_r+0x2a>
 8001304:	68a3      	ldr	r3, [r4, #8]
 8001306:	3b01      	subs	r3, #1
 8001308:	60a3      	str	r3, [r4, #8]
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	6022      	str	r2, [r4, #0]
 8001310:	701e      	strb	r6, [r3, #0]
 8001312:	6962      	ldr	r2, [r4, #20]
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	429a      	cmp	r2, r3
 8001318:	d004      	beq.n	8001324 <__swbuf_r+0x6e>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	07db      	lsls	r3, r3, #31
 800131e:	d5e1      	bpl.n	80012e4 <__swbuf_r+0x2e>
 8001320:	2e0a      	cmp	r6, #10
 8001322:	d1df      	bne.n	80012e4 <__swbuf_r+0x2e>
 8001324:	4621      	mov	r1, r4
 8001326:	4628      	mov	r0, r5
 8001328:	f000 fd22 	bl	8001d70 <_fflush_r>
 800132c:	2800      	cmp	r0, #0
 800132e:	d0d9      	beq.n	80012e4 <__swbuf_r+0x2e>
 8001330:	e7d6      	b.n	80012e0 <__swbuf_r+0x2a>
	...

08001334 <__swsetup_r>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <__swsetup_r+0xa8>)
 8001338:	4605      	mov	r5, r0
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	460c      	mov	r4, r1
 800133e:	b118      	cbz	r0, 8001348 <__swsetup_r+0x14>
 8001340:	6a03      	ldr	r3, [r0, #32]
 8001342:	b90b      	cbnz	r3, 8001348 <__swsetup_r+0x14>
 8001344:	f7ff fece 	bl	80010e4 <__sinit>
 8001348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800134c:	0719      	lsls	r1, r3, #28
 800134e:	d422      	bmi.n	8001396 <__swsetup_r+0x62>
 8001350:	06da      	lsls	r2, r3, #27
 8001352:	d407      	bmi.n	8001364 <__swsetup_r+0x30>
 8001354:	2209      	movs	r2, #9
 8001356:	602a      	str	r2, [r5, #0]
 8001358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800135c:	81a3      	strh	r3, [r4, #12]
 800135e:	f04f 30ff 	mov.w	r0, #4294967295
 8001362:	e033      	b.n	80013cc <__swsetup_r+0x98>
 8001364:	0758      	lsls	r0, r3, #29
 8001366:	d512      	bpl.n	800138e <__swsetup_r+0x5a>
 8001368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800136a:	b141      	cbz	r1, 800137e <__swsetup_r+0x4a>
 800136c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001370:	4299      	cmp	r1, r3
 8001372:	d002      	beq.n	800137a <__swsetup_r+0x46>
 8001374:	4628      	mov	r0, r5
 8001376:	f000 f8af 	bl	80014d8 <_free_r>
 800137a:	2300      	movs	r3, #0
 800137c:	6363      	str	r3, [r4, #52]	@ 0x34
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001384:	81a3      	strh	r3, [r4, #12]
 8001386:	2300      	movs	r3, #0
 8001388:	6063      	str	r3, [r4, #4]
 800138a:	6923      	ldr	r3, [r4, #16]
 800138c:	6023      	str	r3, [r4, #0]
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	81a3      	strh	r3, [r4, #12]
 8001396:	6923      	ldr	r3, [r4, #16]
 8001398:	b94b      	cbnz	r3, 80013ae <__swsetup_r+0x7a>
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013a4:	d003      	beq.n	80013ae <__swsetup_r+0x7a>
 80013a6:	4621      	mov	r1, r4
 80013a8:	4628      	mov	r0, r5
 80013aa:	f000 fd2f 	bl	8001e0c <__smakebuf_r>
 80013ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013b2:	f013 0201 	ands.w	r2, r3, #1
 80013b6:	d00a      	beq.n	80013ce <__swsetup_r+0x9a>
 80013b8:	2200      	movs	r2, #0
 80013ba:	60a2      	str	r2, [r4, #8]
 80013bc:	6962      	ldr	r2, [r4, #20]
 80013be:	4252      	negs	r2, r2
 80013c0:	61a2      	str	r2, [r4, #24]
 80013c2:	6922      	ldr	r2, [r4, #16]
 80013c4:	b942      	cbnz	r2, 80013d8 <__swsetup_r+0xa4>
 80013c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013ca:	d1c5      	bne.n	8001358 <__swsetup_r+0x24>
 80013cc:	bd38      	pop	{r3, r4, r5, pc}
 80013ce:	0799      	lsls	r1, r3, #30
 80013d0:	bf58      	it	pl
 80013d2:	6962      	ldrpl	r2, [r4, #20]
 80013d4:	60a2      	str	r2, [r4, #8]
 80013d6:	e7f4      	b.n	80013c2 <__swsetup_r+0x8e>
 80013d8:	2000      	movs	r0, #0
 80013da:	e7f7      	b.n	80013cc <__swsetup_r+0x98>
 80013dc:	20000024 	.word	0x20000024

080013e0 <memset>:
 80013e0:	4402      	add	r2, r0
 80013e2:	4603      	mov	r3, r0
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d100      	bne.n	80013ea <memset+0xa>
 80013e8:	4770      	bx	lr
 80013ea:	f803 1b01 	strb.w	r1, [r3], #1
 80013ee:	e7f9      	b.n	80013e4 <memset+0x4>

080013f0 <_close_r>:
 80013f0:	b538      	push	{r3, r4, r5, lr}
 80013f2:	4d06      	ldr	r5, [pc, #24]	@ (800140c <_close_r+0x1c>)
 80013f4:	2300      	movs	r3, #0
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	602b      	str	r3, [r5, #0]
 80013fc:	f000 fe46 	bl	800208c <_close>
 8001400:	1c43      	adds	r3, r0, #1
 8001402:	d102      	bne.n	800140a <_close_r+0x1a>
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	b103      	cbz	r3, 800140a <_close_r+0x1a>
 8001408:	6023      	str	r3, [r4, #0]
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	20000204 	.word	0x20000204

08001410 <_lseek_r>:
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	4d07      	ldr	r5, [pc, #28]	@ (8001430 <_lseek_r+0x20>)
 8001414:	4604      	mov	r4, r0
 8001416:	4608      	mov	r0, r1
 8001418:	4611      	mov	r1, r2
 800141a:	2200      	movs	r2, #0
 800141c:	602a      	str	r2, [r5, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	f000 fdf5 	bl	800200e <_lseek>
 8001424:	1c43      	adds	r3, r0, #1
 8001426:	d102      	bne.n	800142e <_lseek_r+0x1e>
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	b103      	cbz	r3, 800142e <_lseek_r+0x1e>
 800142c:	6023      	str	r3, [r4, #0]
 800142e:	bd38      	pop	{r3, r4, r5, pc}
 8001430:	20000204 	.word	0x20000204

08001434 <_read_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d07      	ldr	r5, [pc, #28]	@ (8001454 <_read_r+0x20>)
 8001438:	4604      	mov	r4, r0
 800143a:	4608      	mov	r0, r1
 800143c:	4611      	mov	r1, r2
 800143e:	2200      	movs	r2, #0
 8001440:	602a      	str	r2, [r5, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	f000 fd8d 	bl	8001f62 <_read>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	d102      	bne.n	8001452 <_read_r+0x1e>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	b103      	cbz	r3, 8001452 <_read_r+0x1e>
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	20000204 	.word	0x20000204

08001458 <_write_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4d07      	ldr	r5, [pc, #28]	@ (8001478 <_write_r+0x20>)
 800145c:	4604      	mov	r4, r0
 800145e:	4608      	mov	r0, r1
 8001460:	4611      	mov	r1, r2
 8001462:	2200      	movs	r2, #0
 8001464:	602a      	str	r2, [r5, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	f000 fde3 	bl	8002032 <_write>
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	d102      	bne.n	8001476 <_write_r+0x1e>
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	b103      	cbz	r3, 8001476 <_write_r+0x1e>
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	20000204 	.word	0x20000204

0800147c <__errno>:
 800147c:	4b01      	ldr	r3, [pc, #4]	@ (8001484 <__errno+0x8>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000024 	.word	0x20000024

08001488 <__libc_init_array>:
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	4d0d      	ldr	r5, [pc, #52]	@ (80014c0 <__libc_init_array+0x38>)
 800148c:	4c0d      	ldr	r4, [pc, #52]	@ (80014c4 <__libc_init_array+0x3c>)
 800148e:	1b64      	subs	r4, r4, r5
 8001490:	10a4      	asrs	r4, r4, #2
 8001492:	2600      	movs	r6, #0
 8001494:	42a6      	cmp	r6, r4
 8001496:	d109      	bne.n	80014ac <__libc_init_array+0x24>
 8001498:	4d0b      	ldr	r5, [pc, #44]	@ (80014c8 <__libc_init_array+0x40>)
 800149a:	4c0c      	ldr	r4, [pc, #48]	@ (80014cc <__libc_init_array+0x44>)
 800149c:	f000 ffba 	bl	8002414 <_init>
 80014a0:	1b64      	subs	r4, r4, r5
 80014a2:	10a4      	asrs	r4, r4, #2
 80014a4:	2600      	movs	r6, #0
 80014a6:	42a6      	cmp	r6, r4
 80014a8:	d105      	bne.n	80014b6 <__libc_init_array+0x2e>
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80014b0:	4798      	blx	r3
 80014b2:	3601      	adds	r6, #1
 80014b4:	e7ee      	b.n	8001494 <__libc_init_array+0xc>
 80014b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ba:	4798      	blx	r3
 80014bc:	3601      	adds	r6, #1
 80014be:	e7f2      	b.n	80014a6 <__libc_init_array+0x1e>
 80014c0:	080024a4 	.word	0x080024a4
 80014c4:	080024a4 	.word	0x080024a4
 80014c8:	080024a4 	.word	0x080024a4
 80014cc:	080024a8 	.word	0x080024a8

080014d0 <__retarget_lock_init_recursive>:
 80014d0:	4770      	bx	lr

080014d2 <__retarget_lock_acquire_recursive>:
 80014d2:	4770      	bx	lr

080014d4 <__retarget_lock_release_recursive>:
 80014d4:	4770      	bx	lr
	...

080014d8 <_free_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4605      	mov	r5, r0
 80014dc:	2900      	cmp	r1, #0
 80014de:	d041      	beq.n	8001564 <_free_r+0x8c>
 80014e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014e4:	1f0c      	subs	r4, r1, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bfb8      	it	lt
 80014ea:	18e4      	addlt	r4, r4, r3
 80014ec:	f000 f8e0 	bl	80016b0 <__malloc_lock>
 80014f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <_free_r+0x90>)
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	b933      	cbnz	r3, 8001504 <_free_r+0x2c>
 80014f6:	6063      	str	r3, [r4, #4]
 80014f8:	6014      	str	r4, [r2, #0]
 80014fa:	4628      	mov	r0, r5
 80014fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001500:	f000 b8dc 	b.w	80016bc <__malloc_unlock>
 8001504:	42a3      	cmp	r3, r4
 8001506:	d908      	bls.n	800151a <_free_r+0x42>
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	1821      	adds	r1, r4, r0
 800150c:	428b      	cmp	r3, r1
 800150e:	bf01      	itttt	eq
 8001510:	6819      	ldreq	r1, [r3, #0]
 8001512:	685b      	ldreq	r3, [r3, #4]
 8001514:	1809      	addeq	r1, r1, r0
 8001516:	6021      	streq	r1, [r4, #0]
 8001518:	e7ed      	b.n	80014f6 <_free_r+0x1e>
 800151a:	461a      	mov	r2, r3
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	b10b      	cbz	r3, 8001524 <_free_r+0x4c>
 8001520:	42a3      	cmp	r3, r4
 8001522:	d9fa      	bls.n	800151a <_free_r+0x42>
 8001524:	6811      	ldr	r1, [r2, #0]
 8001526:	1850      	adds	r0, r2, r1
 8001528:	42a0      	cmp	r0, r4
 800152a:	d10b      	bne.n	8001544 <_free_r+0x6c>
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	4401      	add	r1, r0
 8001530:	1850      	adds	r0, r2, r1
 8001532:	4283      	cmp	r3, r0
 8001534:	6011      	str	r1, [r2, #0]
 8001536:	d1e0      	bne.n	80014fa <_free_r+0x22>
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	6053      	str	r3, [r2, #4]
 800153e:	4408      	add	r0, r1
 8001540:	6010      	str	r0, [r2, #0]
 8001542:	e7da      	b.n	80014fa <_free_r+0x22>
 8001544:	d902      	bls.n	800154c <_free_r+0x74>
 8001546:	230c      	movs	r3, #12
 8001548:	602b      	str	r3, [r5, #0]
 800154a:	e7d6      	b.n	80014fa <_free_r+0x22>
 800154c:	6820      	ldr	r0, [r4, #0]
 800154e:	1821      	adds	r1, r4, r0
 8001550:	428b      	cmp	r3, r1
 8001552:	bf04      	itt	eq
 8001554:	6819      	ldreq	r1, [r3, #0]
 8001556:	685b      	ldreq	r3, [r3, #4]
 8001558:	6063      	str	r3, [r4, #4]
 800155a:	bf04      	itt	eq
 800155c:	1809      	addeq	r1, r1, r0
 800155e:	6021      	streq	r1, [r4, #0]
 8001560:	6054      	str	r4, [r2, #4]
 8001562:	e7ca      	b.n	80014fa <_free_r+0x22>
 8001564:	bd38      	pop	{r3, r4, r5, pc}
 8001566:	bf00      	nop
 8001568:	20000210 	.word	0x20000210

0800156c <sbrk_aligned>:
 800156c:	b570      	push	{r4, r5, r6, lr}
 800156e:	4e0f      	ldr	r6, [pc, #60]	@ (80015ac <sbrk_aligned+0x40>)
 8001570:	460c      	mov	r4, r1
 8001572:	6831      	ldr	r1, [r6, #0]
 8001574:	4605      	mov	r5, r0
 8001576:	b911      	cbnz	r1, 800157e <sbrk_aligned+0x12>
 8001578:	f000 fca6 	bl	8001ec8 <_sbrk_r>
 800157c:	6030      	str	r0, [r6, #0]
 800157e:	4621      	mov	r1, r4
 8001580:	4628      	mov	r0, r5
 8001582:	f000 fca1 	bl	8001ec8 <_sbrk_r>
 8001586:	1c43      	adds	r3, r0, #1
 8001588:	d103      	bne.n	8001592 <sbrk_aligned+0x26>
 800158a:	f04f 34ff 	mov.w	r4, #4294967295
 800158e:	4620      	mov	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	1cc4      	adds	r4, r0, #3
 8001594:	f024 0403 	bic.w	r4, r4, #3
 8001598:	42a0      	cmp	r0, r4
 800159a:	d0f8      	beq.n	800158e <sbrk_aligned+0x22>
 800159c:	1a21      	subs	r1, r4, r0
 800159e:	4628      	mov	r0, r5
 80015a0:	f000 fc92 	bl	8001ec8 <_sbrk_r>
 80015a4:	3001      	adds	r0, #1
 80015a6:	d1f2      	bne.n	800158e <sbrk_aligned+0x22>
 80015a8:	e7ef      	b.n	800158a <sbrk_aligned+0x1e>
 80015aa:	bf00      	nop
 80015ac:	2000020c 	.word	0x2000020c

080015b0 <_malloc_r>:
 80015b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015b4:	1ccd      	adds	r5, r1, #3
 80015b6:	f025 0503 	bic.w	r5, r5, #3
 80015ba:	3508      	adds	r5, #8
 80015bc:	2d0c      	cmp	r5, #12
 80015be:	bf38      	it	cc
 80015c0:	250c      	movcc	r5, #12
 80015c2:	2d00      	cmp	r5, #0
 80015c4:	4606      	mov	r6, r0
 80015c6:	db01      	blt.n	80015cc <_malloc_r+0x1c>
 80015c8:	42a9      	cmp	r1, r5
 80015ca:	d904      	bls.n	80015d6 <_malloc_r+0x26>
 80015cc:	230c      	movs	r3, #12
 80015ce:	6033      	str	r3, [r6, #0]
 80015d0:	2000      	movs	r0, #0
 80015d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80016ac <_malloc_r+0xfc>
 80015da:	f000 f869 	bl	80016b0 <__malloc_lock>
 80015de:	f8d8 3000 	ldr.w	r3, [r8]
 80015e2:	461c      	mov	r4, r3
 80015e4:	bb44      	cbnz	r4, 8001638 <_malloc_r+0x88>
 80015e6:	4629      	mov	r1, r5
 80015e8:	4630      	mov	r0, r6
 80015ea:	f7ff ffbf 	bl	800156c <sbrk_aligned>
 80015ee:	1c43      	adds	r3, r0, #1
 80015f0:	4604      	mov	r4, r0
 80015f2:	d158      	bne.n	80016a6 <_malloc_r+0xf6>
 80015f4:	f8d8 4000 	ldr.w	r4, [r8]
 80015f8:	4627      	mov	r7, r4
 80015fa:	2f00      	cmp	r7, #0
 80015fc:	d143      	bne.n	8001686 <_malloc_r+0xd6>
 80015fe:	2c00      	cmp	r4, #0
 8001600:	d04b      	beq.n	800169a <_malloc_r+0xea>
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	4639      	mov	r1, r7
 8001606:	4630      	mov	r0, r6
 8001608:	eb04 0903 	add.w	r9, r4, r3
 800160c:	f000 fc5c 	bl	8001ec8 <_sbrk_r>
 8001610:	4581      	cmp	r9, r0
 8001612:	d142      	bne.n	800169a <_malloc_r+0xea>
 8001614:	6821      	ldr	r1, [r4, #0]
 8001616:	1a6d      	subs	r5, r5, r1
 8001618:	4629      	mov	r1, r5
 800161a:	4630      	mov	r0, r6
 800161c:	f7ff ffa6 	bl	800156c <sbrk_aligned>
 8001620:	3001      	adds	r0, #1
 8001622:	d03a      	beq.n	800169a <_malloc_r+0xea>
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	442b      	add	r3, r5
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	f8d8 3000 	ldr.w	r3, [r8]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	bb62      	cbnz	r2, 800168c <_malloc_r+0xdc>
 8001632:	f8c8 7000 	str.w	r7, [r8]
 8001636:	e00f      	b.n	8001658 <_malloc_r+0xa8>
 8001638:	6822      	ldr	r2, [r4, #0]
 800163a:	1b52      	subs	r2, r2, r5
 800163c:	d420      	bmi.n	8001680 <_malloc_r+0xd0>
 800163e:	2a0b      	cmp	r2, #11
 8001640:	d917      	bls.n	8001672 <_malloc_r+0xc2>
 8001642:	1961      	adds	r1, r4, r5
 8001644:	42a3      	cmp	r3, r4
 8001646:	6025      	str	r5, [r4, #0]
 8001648:	bf18      	it	ne
 800164a:	6059      	strne	r1, [r3, #4]
 800164c:	6863      	ldr	r3, [r4, #4]
 800164e:	bf08      	it	eq
 8001650:	f8c8 1000 	streq.w	r1, [r8]
 8001654:	5162      	str	r2, [r4, r5]
 8001656:	604b      	str	r3, [r1, #4]
 8001658:	4630      	mov	r0, r6
 800165a:	f000 f82f 	bl	80016bc <__malloc_unlock>
 800165e:	f104 000b 	add.w	r0, r4, #11
 8001662:	1d23      	adds	r3, r4, #4
 8001664:	f020 0007 	bic.w	r0, r0, #7
 8001668:	1ac2      	subs	r2, r0, r3
 800166a:	bf1c      	itt	ne
 800166c:	1a1b      	subne	r3, r3, r0
 800166e:	50a3      	strne	r3, [r4, r2]
 8001670:	e7af      	b.n	80015d2 <_malloc_r+0x22>
 8001672:	6862      	ldr	r2, [r4, #4]
 8001674:	42a3      	cmp	r3, r4
 8001676:	bf0c      	ite	eq
 8001678:	f8c8 2000 	streq.w	r2, [r8]
 800167c:	605a      	strne	r2, [r3, #4]
 800167e:	e7eb      	b.n	8001658 <_malloc_r+0xa8>
 8001680:	4623      	mov	r3, r4
 8001682:	6864      	ldr	r4, [r4, #4]
 8001684:	e7ae      	b.n	80015e4 <_malloc_r+0x34>
 8001686:	463c      	mov	r4, r7
 8001688:	687f      	ldr	r7, [r7, #4]
 800168a:	e7b6      	b.n	80015fa <_malloc_r+0x4a>
 800168c:	461a      	mov	r2, r3
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	42a3      	cmp	r3, r4
 8001692:	d1fb      	bne.n	800168c <_malloc_r+0xdc>
 8001694:	2300      	movs	r3, #0
 8001696:	6053      	str	r3, [r2, #4]
 8001698:	e7de      	b.n	8001658 <_malloc_r+0xa8>
 800169a:	230c      	movs	r3, #12
 800169c:	6033      	str	r3, [r6, #0]
 800169e:	4630      	mov	r0, r6
 80016a0:	f000 f80c 	bl	80016bc <__malloc_unlock>
 80016a4:	e794      	b.n	80015d0 <_malloc_r+0x20>
 80016a6:	6005      	str	r5, [r0, #0]
 80016a8:	e7d6      	b.n	8001658 <_malloc_r+0xa8>
 80016aa:	bf00      	nop
 80016ac:	20000210 	.word	0x20000210

080016b0 <__malloc_lock>:
 80016b0:	4801      	ldr	r0, [pc, #4]	@ (80016b8 <__malloc_lock+0x8>)
 80016b2:	f7ff bf0e 	b.w	80014d2 <__retarget_lock_acquire_recursive>
 80016b6:	bf00      	nop
 80016b8:	20000208 	.word	0x20000208

080016bc <__malloc_unlock>:
 80016bc:	4801      	ldr	r0, [pc, #4]	@ (80016c4 <__malloc_unlock+0x8>)
 80016be:	f7ff bf09 	b.w	80014d4 <__retarget_lock_release_recursive>
 80016c2:	bf00      	nop
 80016c4:	20000208 	.word	0x20000208

080016c8 <__sfputc_r>:
 80016c8:	6893      	ldr	r3, [r2, #8]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	b410      	push	{r4}
 80016d0:	6093      	str	r3, [r2, #8]
 80016d2:	da08      	bge.n	80016e6 <__sfputc_r+0x1e>
 80016d4:	6994      	ldr	r4, [r2, #24]
 80016d6:	42a3      	cmp	r3, r4
 80016d8:	db01      	blt.n	80016de <__sfputc_r+0x16>
 80016da:	290a      	cmp	r1, #10
 80016dc:	d103      	bne.n	80016e6 <__sfputc_r+0x1e>
 80016de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016e2:	f7ff bde8 	b.w	80012b6 <__swbuf_r>
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	1c58      	adds	r0, r3, #1
 80016ea:	6010      	str	r0, [r2, #0]
 80016ec:	7019      	strb	r1, [r3, #0]
 80016ee:	4608      	mov	r0, r1
 80016f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <__sfputs_r>:
 80016f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f8:	4606      	mov	r6, r0
 80016fa:	460f      	mov	r7, r1
 80016fc:	4614      	mov	r4, r2
 80016fe:	18d5      	adds	r5, r2, r3
 8001700:	42ac      	cmp	r4, r5
 8001702:	d101      	bne.n	8001708 <__sfputs_r+0x12>
 8001704:	2000      	movs	r0, #0
 8001706:	e007      	b.n	8001718 <__sfputs_r+0x22>
 8001708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800170c:	463a      	mov	r2, r7
 800170e:	4630      	mov	r0, r6
 8001710:	f7ff ffda 	bl	80016c8 <__sfputc_r>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	d1f3      	bne.n	8001700 <__sfputs_r+0xa>
 8001718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800171c <_vfiprintf_r>:
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	460d      	mov	r5, r1
 8001722:	b09d      	sub	sp, #116	@ 0x74
 8001724:	4614      	mov	r4, r2
 8001726:	4698      	mov	r8, r3
 8001728:	4606      	mov	r6, r0
 800172a:	b118      	cbz	r0, 8001734 <_vfiprintf_r+0x18>
 800172c:	6a03      	ldr	r3, [r0, #32]
 800172e:	b90b      	cbnz	r3, 8001734 <_vfiprintf_r+0x18>
 8001730:	f7ff fcd8 	bl	80010e4 <__sinit>
 8001734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001736:	07d9      	lsls	r1, r3, #31
 8001738:	d405      	bmi.n	8001746 <_vfiprintf_r+0x2a>
 800173a:	89ab      	ldrh	r3, [r5, #12]
 800173c:	059a      	lsls	r2, r3, #22
 800173e:	d402      	bmi.n	8001746 <_vfiprintf_r+0x2a>
 8001740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001742:	f7ff fec6 	bl	80014d2 <__retarget_lock_acquire_recursive>
 8001746:	89ab      	ldrh	r3, [r5, #12]
 8001748:	071b      	lsls	r3, r3, #28
 800174a:	d501      	bpl.n	8001750 <_vfiprintf_r+0x34>
 800174c:	692b      	ldr	r3, [r5, #16]
 800174e:	b99b      	cbnz	r3, 8001778 <_vfiprintf_r+0x5c>
 8001750:	4629      	mov	r1, r5
 8001752:	4630      	mov	r0, r6
 8001754:	f7ff fdee 	bl	8001334 <__swsetup_r>
 8001758:	b170      	cbz	r0, 8001778 <_vfiprintf_r+0x5c>
 800175a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800175c:	07dc      	lsls	r4, r3, #31
 800175e:	d504      	bpl.n	800176a <_vfiprintf_r+0x4e>
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	b01d      	add	sp, #116	@ 0x74
 8001766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176a:	89ab      	ldrh	r3, [r5, #12]
 800176c:	0598      	lsls	r0, r3, #22
 800176e:	d4f7      	bmi.n	8001760 <_vfiprintf_r+0x44>
 8001770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001772:	f7ff feaf 	bl	80014d4 <__retarget_lock_release_recursive>
 8001776:	e7f3      	b.n	8001760 <_vfiprintf_r+0x44>
 8001778:	2300      	movs	r3, #0
 800177a:	9309      	str	r3, [sp, #36]	@ 0x24
 800177c:	2320      	movs	r3, #32
 800177e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001782:	f8cd 800c 	str.w	r8, [sp, #12]
 8001786:	2330      	movs	r3, #48	@ 0x30
 8001788:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001938 <_vfiprintf_r+0x21c>
 800178c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001790:	f04f 0901 	mov.w	r9, #1
 8001794:	4623      	mov	r3, r4
 8001796:	469a      	mov	sl, r3
 8001798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800179c:	b10a      	cbz	r2, 80017a2 <_vfiprintf_r+0x86>
 800179e:	2a25      	cmp	r2, #37	@ 0x25
 80017a0:	d1f9      	bne.n	8001796 <_vfiprintf_r+0x7a>
 80017a2:	ebba 0b04 	subs.w	fp, sl, r4
 80017a6:	d00b      	beq.n	80017c0 <_vfiprintf_r+0xa4>
 80017a8:	465b      	mov	r3, fp
 80017aa:	4622      	mov	r2, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	4630      	mov	r0, r6
 80017b0:	f7ff ffa1 	bl	80016f6 <__sfputs_r>
 80017b4:	3001      	adds	r0, #1
 80017b6:	f000 80a7 	beq.w	8001908 <_vfiprintf_r+0x1ec>
 80017ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017bc:	445a      	add	r2, fp
 80017be:	9209      	str	r2, [sp, #36]	@ 0x24
 80017c0:	f89a 3000 	ldrb.w	r3, [sl]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 809f 	beq.w	8001908 <_vfiprintf_r+0x1ec>
 80017ca:	2300      	movs	r3, #0
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017d4:	f10a 0a01 	add.w	sl, sl, #1
 80017d8:	9304      	str	r3, [sp, #16]
 80017da:	9307      	str	r3, [sp, #28]
 80017dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80017e2:	4654      	mov	r4, sl
 80017e4:	2205      	movs	r2, #5
 80017e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ea:	4853      	ldr	r0, [pc, #332]	@ (8001938 <_vfiprintf_r+0x21c>)
 80017ec:	f7fe fcf8 	bl	80001e0 <memchr>
 80017f0:	9a04      	ldr	r2, [sp, #16]
 80017f2:	b9d8      	cbnz	r0, 800182c <_vfiprintf_r+0x110>
 80017f4:	06d1      	lsls	r1, r2, #27
 80017f6:	bf44      	itt	mi
 80017f8:	2320      	movmi	r3, #32
 80017fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017fe:	0713      	lsls	r3, r2, #28
 8001800:	bf44      	itt	mi
 8001802:	232b      	movmi	r3, #43	@ 0x2b
 8001804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001808:	f89a 3000 	ldrb.w	r3, [sl]
 800180c:	2b2a      	cmp	r3, #42	@ 0x2a
 800180e:	d015      	beq.n	800183c <_vfiprintf_r+0x120>
 8001810:	9a07      	ldr	r2, [sp, #28]
 8001812:	4654      	mov	r4, sl
 8001814:	2000      	movs	r0, #0
 8001816:	f04f 0c0a 	mov.w	ip, #10
 800181a:	4621      	mov	r1, r4
 800181c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001820:	3b30      	subs	r3, #48	@ 0x30
 8001822:	2b09      	cmp	r3, #9
 8001824:	d94b      	bls.n	80018be <_vfiprintf_r+0x1a2>
 8001826:	b1b0      	cbz	r0, 8001856 <_vfiprintf_r+0x13a>
 8001828:	9207      	str	r2, [sp, #28]
 800182a:	e014      	b.n	8001856 <_vfiprintf_r+0x13a>
 800182c:	eba0 0308 	sub.w	r3, r0, r8
 8001830:	fa09 f303 	lsl.w	r3, r9, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	9304      	str	r3, [sp, #16]
 8001838:	46a2      	mov	sl, r4
 800183a:	e7d2      	b.n	80017e2 <_vfiprintf_r+0xc6>
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	1d19      	adds	r1, r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	9103      	str	r1, [sp, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	bfbb      	ittet	lt
 8001848:	425b      	neglt	r3, r3
 800184a:	f042 0202 	orrlt.w	r2, r2, #2
 800184e:	9307      	strge	r3, [sp, #28]
 8001850:	9307      	strlt	r3, [sp, #28]
 8001852:	bfb8      	it	lt
 8001854:	9204      	strlt	r2, [sp, #16]
 8001856:	7823      	ldrb	r3, [r4, #0]
 8001858:	2b2e      	cmp	r3, #46	@ 0x2e
 800185a:	d10a      	bne.n	8001872 <_vfiprintf_r+0x156>
 800185c:	7863      	ldrb	r3, [r4, #1]
 800185e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001860:	d132      	bne.n	80018c8 <_vfiprintf_r+0x1ac>
 8001862:	9b03      	ldr	r3, [sp, #12]
 8001864:	1d1a      	adds	r2, r3, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800186e:	3402      	adds	r4, #2
 8001870:	9305      	str	r3, [sp, #20]
 8001872:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001948 <_vfiprintf_r+0x22c>
 8001876:	7821      	ldrb	r1, [r4, #0]
 8001878:	2203      	movs	r2, #3
 800187a:	4650      	mov	r0, sl
 800187c:	f7fe fcb0 	bl	80001e0 <memchr>
 8001880:	b138      	cbz	r0, 8001892 <_vfiprintf_r+0x176>
 8001882:	9b04      	ldr	r3, [sp, #16]
 8001884:	eba0 000a 	sub.w	r0, r0, sl
 8001888:	2240      	movs	r2, #64	@ 0x40
 800188a:	4082      	lsls	r2, r0
 800188c:	4313      	orrs	r3, r2
 800188e:	3401      	adds	r4, #1
 8001890:	9304      	str	r3, [sp, #16]
 8001892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001896:	4829      	ldr	r0, [pc, #164]	@ (800193c <_vfiprintf_r+0x220>)
 8001898:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800189c:	2206      	movs	r2, #6
 800189e:	f7fe fc9f 	bl	80001e0 <memchr>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d03f      	beq.n	8001926 <_vfiprintf_r+0x20a>
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <_vfiprintf_r+0x224>)
 80018a8:	bb1b      	cbnz	r3, 80018f2 <_vfiprintf_r+0x1d6>
 80018aa:	9b03      	ldr	r3, [sp, #12]
 80018ac:	3307      	adds	r3, #7
 80018ae:	f023 0307 	bic.w	r3, r3, #7
 80018b2:	3308      	adds	r3, #8
 80018b4:	9303      	str	r3, [sp, #12]
 80018b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018b8:	443b      	add	r3, r7
 80018ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80018bc:	e76a      	b.n	8001794 <_vfiprintf_r+0x78>
 80018be:	fb0c 3202 	mla	r2, ip, r2, r3
 80018c2:	460c      	mov	r4, r1
 80018c4:	2001      	movs	r0, #1
 80018c6:	e7a8      	b.n	800181a <_vfiprintf_r+0xfe>
 80018c8:	2300      	movs	r3, #0
 80018ca:	3401      	adds	r4, #1
 80018cc:	9305      	str	r3, [sp, #20]
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0c0a 	mov.w	ip, #10
 80018d4:	4620      	mov	r0, r4
 80018d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018da:	3a30      	subs	r2, #48	@ 0x30
 80018dc:	2a09      	cmp	r2, #9
 80018de:	d903      	bls.n	80018e8 <_vfiprintf_r+0x1cc>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0c6      	beq.n	8001872 <_vfiprintf_r+0x156>
 80018e4:	9105      	str	r1, [sp, #20]
 80018e6:	e7c4      	b.n	8001872 <_vfiprintf_r+0x156>
 80018e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80018ec:	4604      	mov	r4, r0
 80018ee:	2301      	movs	r3, #1
 80018f0:	e7f0      	b.n	80018d4 <_vfiprintf_r+0x1b8>
 80018f2:	ab03      	add	r3, sp, #12
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	462a      	mov	r2, r5
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <_vfiprintf_r+0x228>)
 80018fa:	a904      	add	r1, sp, #16
 80018fc:	4630      	mov	r0, r6
 80018fe:	f3af 8000 	nop.w
 8001902:	4607      	mov	r7, r0
 8001904:	1c78      	adds	r0, r7, #1
 8001906:	d1d6      	bne.n	80018b6 <_vfiprintf_r+0x19a>
 8001908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800190a:	07d9      	lsls	r1, r3, #31
 800190c:	d405      	bmi.n	800191a <_vfiprintf_r+0x1fe>
 800190e:	89ab      	ldrh	r3, [r5, #12]
 8001910:	059a      	lsls	r2, r3, #22
 8001912:	d402      	bmi.n	800191a <_vfiprintf_r+0x1fe>
 8001914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001916:	f7ff fddd 	bl	80014d4 <__retarget_lock_release_recursive>
 800191a:	89ab      	ldrh	r3, [r5, #12]
 800191c:	065b      	lsls	r3, r3, #25
 800191e:	f53f af1f 	bmi.w	8001760 <_vfiprintf_r+0x44>
 8001922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001924:	e71e      	b.n	8001764 <_vfiprintf_r+0x48>
 8001926:	ab03      	add	r3, sp, #12
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	462a      	mov	r2, r5
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_vfiprintf_r+0x228>)
 800192e:	a904      	add	r1, sp, #16
 8001930:	4630      	mov	r0, r6
 8001932:	f000 f879 	bl	8001a28 <_printf_i>
 8001936:	e7e4      	b.n	8001902 <_vfiprintf_r+0x1e6>
 8001938:	0800244d 	.word	0x0800244d
 800193c:	08002457 	.word	0x08002457
 8001940:	00000000 	.word	0x00000000
 8001944:	080016f7 	.word	0x080016f7
 8001948:	08002453 	.word	0x08002453

0800194c <_printf_common>:
 800194c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001950:	4616      	mov	r6, r2
 8001952:	4698      	mov	r8, r3
 8001954:	688a      	ldr	r2, [r1, #8]
 8001956:	690b      	ldr	r3, [r1, #16]
 8001958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800195c:	4293      	cmp	r3, r2
 800195e:	bfb8      	it	lt
 8001960:	4613      	movlt	r3, r2
 8001962:	6033      	str	r3, [r6, #0]
 8001964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001968:	4607      	mov	r7, r0
 800196a:	460c      	mov	r4, r1
 800196c:	b10a      	cbz	r2, 8001972 <_printf_common+0x26>
 800196e:	3301      	adds	r3, #1
 8001970:	6033      	str	r3, [r6, #0]
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	0699      	lsls	r1, r3, #26
 8001976:	bf42      	ittt	mi
 8001978:	6833      	ldrmi	r3, [r6, #0]
 800197a:	3302      	addmi	r3, #2
 800197c:	6033      	strmi	r3, [r6, #0]
 800197e:	6825      	ldr	r5, [r4, #0]
 8001980:	f015 0506 	ands.w	r5, r5, #6
 8001984:	d106      	bne.n	8001994 <_printf_common+0x48>
 8001986:	f104 0a19 	add.w	sl, r4, #25
 800198a:	68e3      	ldr	r3, [r4, #12]
 800198c:	6832      	ldr	r2, [r6, #0]
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	42ab      	cmp	r3, r5
 8001992:	dc26      	bgt.n	80019e2 <_printf_common+0x96>
 8001994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	3b00      	subs	r3, #0
 800199c:	bf18      	it	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	0692      	lsls	r2, r2, #26
 80019a2:	d42b      	bmi.n	80019fc <_printf_common+0xb0>
 80019a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019a8:	4641      	mov	r1, r8
 80019aa:	4638      	mov	r0, r7
 80019ac:	47c8      	blx	r9
 80019ae:	3001      	adds	r0, #1
 80019b0:	d01e      	beq.n	80019f0 <_printf_common+0xa4>
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	6922      	ldr	r2, [r4, #16]
 80019b6:	f003 0306 	and.w	r3, r3, #6
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf02      	ittt	eq
 80019be:	68e5      	ldreq	r5, [r4, #12]
 80019c0:	6833      	ldreq	r3, [r6, #0]
 80019c2:	1aed      	subeq	r5, r5, r3
 80019c4:	68a3      	ldr	r3, [r4, #8]
 80019c6:	bf0c      	ite	eq
 80019c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019cc:	2500      	movne	r5, #0
 80019ce:	4293      	cmp	r3, r2
 80019d0:	bfc4      	itt	gt
 80019d2:	1a9b      	subgt	r3, r3, r2
 80019d4:	18ed      	addgt	r5, r5, r3
 80019d6:	2600      	movs	r6, #0
 80019d8:	341a      	adds	r4, #26
 80019da:	42b5      	cmp	r5, r6
 80019dc:	d11a      	bne.n	8001a14 <_printf_common+0xc8>
 80019de:	2000      	movs	r0, #0
 80019e0:	e008      	b.n	80019f4 <_printf_common+0xa8>
 80019e2:	2301      	movs	r3, #1
 80019e4:	4652      	mov	r2, sl
 80019e6:	4641      	mov	r1, r8
 80019e8:	4638      	mov	r0, r7
 80019ea:	47c8      	blx	r9
 80019ec:	3001      	adds	r0, #1
 80019ee:	d103      	bne.n	80019f8 <_printf_common+0xac>
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019f8:	3501      	adds	r5, #1
 80019fa:	e7c6      	b.n	800198a <_printf_common+0x3e>
 80019fc:	18e1      	adds	r1, r4, r3
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	2030      	movs	r0, #48	@ 0x30
 8001a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a06:	4422      	add	r2, r4
 8001a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a10:	3302      	adds	r3, #2
 8001a12:	e7c7      	b.n	80019a4 <_printf_common+0x58>
 8001a14:	2301      	movs	r3, #1
 8001a16:	4622      	mov	r2, r4
 8001a18:	4641      	mov	r1, r8
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	47c8      	blx	r9
 8001a1e:	3001      	adds	r0, #1
 8001a20:	d0e6      	beq.n	80019f0 <_printf_common+0xa4>
 8001a22:	3601      	adds	r6, #1
 8001a24:	e7d9      	b.n	80019da <_printf_common+0x8e>
	...

08001a28 <_printf_i>:
 8001a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a2c:	7e0f      	ldrb	r7, [r1, #24]
 8001a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a30:	2f78      	cmp	r7, #120	@ 0x78
 8001a32:	4691      	mov	r9, r2
 8001a34:	4680      	mov	r8, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	469a      	mov	sl, r3
 8001a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a3e:	d807      	bhi.n	8001a50 <_printf_i+0x28>
 8001a40:	2f62      	cmp	r7, #98	@ 0x62
 8001a42:	d80a      	bhi.n	8001a5a <_printf_i+0x32>
 8001a44:	2f00      	cmp	r7, #0
 8001a46:	f000 80d2 	beq.w	8001bee <_printf_i+0x1c6>
 8001a4a:	2f58      	cmp	r7, #88	@ 0x58
 8001a4c:	f000 80b9 	beq.w	8001bc2 <_printf_i+0x19a>
 8001a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a58:	e03a      	b.n	8001ad0 <_printf_i+0xa8>
 8001a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a5e:	2b15      	cmp	r3, #21
 8001a60:	d8f6      	bhi.n	8001a50 <_printf_i+0x28>
 8001a62:	a101      	add	r1, pc, #4	@ (adr r1, 8001a68 <_printf_i+0x40>)
 8001a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a68:	08001ac1 	.word	0x08001ac1
 8001a6c:	08001ad5 	.word	0x08001ad5
 8001a70:	08001a51 	.word	0x08001a51
 8001a74:	08001a51 	.word	0x08001a51
 8001a78:	08001a51 	.word	0x08001a51
 8001a7c:	08001a51 	.word	0x08001a51
 8001a80:	08001ad5 	.word	0x08001ad5
 8001a84:	08001a51 	.word	0x08001a51
 8001a88:	08001a51 	.word	0x08001a51
 8001a8c:	08001a51 	.word	0x08001a51
 8001a90:	08001a51 	.word	0x08001a51
 8001a94:	08001bd5 	.word	0x08001bd5
 8001a98:	08001aff 	.word	0x08001aff
 8001a9c:	08001b8f 	.word	0x08001b8f
 8001aa0:	08001a51 	.word	0x08001a51
 8001aa4:	08001a51 	.word	0x08001a51
 8001aa8:	08001bf7 	.word	0x08001bf7
 8001aac:	08001a51 	.word	0x08001a51
 8001ab0:	08001aff 	.word	0x08001aff
 8001ab4:	08001a51 	.word	0x08001a51
 8001ab8:	08001a51 	.word	0x08001a51
 8001abc:	08001b97 	.word	0x08001b97
 8001ac0:	6833      	ldr	r3, [r6, #0]
 8001ac2:	1d1a      	adds	r2, r3, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6032      	str	r2, [r6, #0]
 8001ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e09d      	b.n	8001c10 <_printf_i+0x1e8>
 8001ad4:	6833      	ldr	r3, [r6, #0]
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	1d19      	adds	r1, r3, #4
 8001ada:	6031      	str	r1, [r6, #0]
 8001adc:	0606      	lsls	r6, r0, #24
 8001ade:	d501      	bpl.n	8001ae4 <_printf_i+0xbc>
 8001ae0:	681d      	ldr	r5, [r3, #0]
 8001ae2:	e003      	b.n	8001aec <_printf_i+0xc4>
 8001ae4:	0645      	lsls	r5, r0, #25
 8001ae6:	d5fb      	bpl.n	8001ae0 <_printf_i+0xb8>
 8001ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	da03      	bge.n	8001af8 <_printf_i+0xd0>
 8001af0:	232d      	movs	r3, #45	@ 0x2d
 8001af2:	426d      	negs	r5, r5
 8001af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001af8:	4859      	ldr	r0, [pc, #356]	@ (8001c60 <_printf_i+0x238>)
 8001afa:	230a      	movs	r3, #10
 8001afc:	e011      	b.n	8001b22 <_printf_i+0xfa>
 8001afe:	6821      	ldr	r1, [r4, #0]
 8001b00:	6833      	ldr	r3, [r6, #0]
 8001b02:	0608      	lsls	r0, r1, #24
 8001b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b08:	d402      	bmi.n	8001b10 <_printf_i+0xe8>
 8001b0a:	0649      	lsls	r1, r1, #25
 8001b0c:	bf48      	it	mi
 8001b0e:	b2ad      	uxthmi	r5, r5
 8001b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b12:	4853      	ldr	r0, [pc, #332]	@ (8001c60 <_printf_i+0x238>)
 8001b14:	6033      	str	r3, [r6, #0]
 8001b16:	bf14      	ite	ne
 8001b18:	230a      	movne	r3, #10
 8001b1a:	2308      	moveq	r3, #8
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b22:	6866      	ldr	r6, [r4, #4]
 8001b24:	60a6      	str	r6, [r4, #8]
 8001b26:	2e00      	cmp	r6, #0
 8001b28:	bfa2      	ittt	ge
 8001b2a:	6821      	ldrge	r1, [r4, #0]
 8001b2c:	f021 0104 	bicge.w	r1, r1, #4
 8001b30:	6021      	strge	r1, [r4, #0]
 8001b32:	b90d      	cbnz	r5, 8001b38 <_printf_i+0x110>
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	d04b      	beq.n	8001bd0 <_printf_i+0x1a8>
 8001b38:	4616      	mov	r6, r2
 8001b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8001b42:	5dc7      	ldrb	r7, [r0, r7]
 8001b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b48:	462f      	mov	r7, r5
 8001b4a:	42bb      	cmp	r3, r7
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	d9f4      	bls.n	8001b3a <_printf_i+0x112>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d10b      	bne.n	8001b6c <_printf_i+0x144>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	07df      	lsls	r7, r3, #31
 8001b58:	d508      	bpl.n	8001b6c <_printf_i+0x144>
 8001b5a:	6923      	ldr	r3, [r4, #16]
 8001b5c:	6861      	ldr	r1, [r4, #4]
 8001b5e:	4299      	cmp	r1, r3
 8001b60:	bfde      	ittt	le
 8001b62:	2330      	movle	r3, #48	@ 0x30
 8001b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b6c:	1b92      	subs	r2, r2, r6
 8001b6e:	6122      	str	r2, [r4, #16]
 8001b70:	f8cd a000 	str.w	sl, [sp]
 8001b74:	464b      	mov	r3, r9
 8001b76:	aa03      	add	r2, sp, #12
 8001b78:	4621      	mov	r1, r4
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	f7ff fee6 	bl	800194c <_printf_common>
 8001b80:	3001      	adds	r0, #1
 8001b82:	d14a      	bne.n	8001c1a <_printf_i+0x1f2>
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	b004      	add	sp, #16
 8001b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	4833      	ldr	r0, [pc, #204]	@ (8001c64 <_printf_i+0x23c>)
 8001b98:	2778      	movs	r7, #120	@ 0x78
 8001b9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	6831      	ldr	r1, [r6, #0]
 8001ba2:	061f      	lsls	r7, r3, #24
 8001ba4:	f851 5b04 	ldr.w	r5, [r1], #4
 8001ba8:	d402      	bmi.n	8001bb0 <_printf_i+0x188>
 8001baa:	065f      	lsls	r7, r3, #25
 8001bac:	bf48      	it	mi
 8001bae:	b2ad      	uxthmi	r5, r5
 8001bb0:	6031      	str	r1, [r6, #0]
 8001bb2:	07d9      	lsls	r1, r3, #31
 8001bb4:	bf44      	itt	mi
 8001bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8001bba:	6023      	strmi	r3, [r4, #0]
 8001bbc:	b11d      	cbz	r5, 8001bc6 <_printf_i+0x19e>
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	e7ac      	b.n	8001b1c <_printf_i+0xf4>
 8001bc2:	4827      	ldr	r0, [pc, #156]	@ (8001c60 <_printf_i+0x238>)
 8001bc4:	e7e9      	b.n	8001b9a <_printf_i+0x172>
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	f023 0320 	bic.w	r3, r3, #32
 8001bcc:	6023      	str	r3, [r4, #0]
 8001bce:	e7f6      	b.n	8001bbe <_printf_i+0x196>
 8001bd0:	4616      	mov	r6, r2
 8001bd2:	e7bd      	b.n	8001b50 <_printf_i+0x128>
 8001bd4:	6833      	ldr	r3, [r6, #0]
 8001bd6:	6825      	ldr	r5, [r4, #0]
 8001bd8:	6961      	ldr	r1, [r4, #20]
 8001bda:	1d18      	adds	r0, r3, #4
 8001bdc:	6030      	str	r0, [r6, #0]
 8001bde:	062e      	lsls	r6, r5, #24
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	d501      	bpl.n	8001be8 <_printf_i+0x1c0>
 8001be4:	6019      	str	r1, [r3, #0]
 8001be6:	e002      	b.n	8001bee <_printf_i+0x1c6>
 8001be8:	0668      	lsls	r0, r5, #25
 8001bea:	d5fb      	bpl.n	8001be4 <_printf_i+0x1bc>
 8001bec:	8019      	strh	r1, [r3, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	6123      	str	r3, [r4, #16]
 8001bf2:	4616      	mov	r6, r2
 8001bf4:	e7bc      	b.n	8001b70 <_printf_i+0x148>
 8001bf6:	6833      	ldr	r3, [r6, #0]
 8001bf8:	1d1a      	adds	r2, r3, #4
 8001bfa:	6032      	str	r2, [r6, #0]
 8001bfc:	681e      	ldr	r6, [r3, #0]
 8001bfe:	6862      	ldr	r2, [r4, #4]
 8001c00:	2100      	movs	r1, #0
 8001c02:	4630      	mov	r0, r6
 8001c04:	f7fe faec 	bl	80001e0 <memchr>
 8001c08:	b108      	cbz	r0, 8001c0e <_printf_i+0x1e6>
 8001c0a:	1b80      	subs	r0, r0, r6
 8001c0c:	6060      	str	r0, [r4, #4]
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	6123      	str	r3, [r4, #16]
 8001c12:	2300      	movs	r3, #0
 8001c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c18:	e7aa      	b.n	8001b70 <_printf_i+0x148>
 8001c1a:	6923      	ldr	r3, [r4, #16]
 8001c1c:	4632      	mov	r2, r6
 8001c1e:	4649      	mov	r1, r9
 8001c20:	4640      	mov	r0, r8
 8001c22:	47d0      	blx	sl
 8001c24:	3001      	adds	r0, #1
 8001c26:	d0ad      	beq.n	8001b84 <_printf_i+0x15c>
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	079b      	lsls	r3, r3, #30
 8001c2c:	d413      	bmi.n	8001c56 <_printf_i+0x22e>
 8001c2e:	68e0      	ldr	r0, [r4, #12]
 8001c30:	9b03      	ldr	r3, [sp, #12]
 8001c32:	4298      	cmp	r0, r3
 8001c34:	bfb8      	it	lt
 8001c36:	4618      	movlt	r0, r3
 8001c38:	e7a6      	b.n	8001b88 <_printf_i+0x160>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4632      	mov	r2, r6
 8001c3e:	4649      	mov	r1, r9
 8001c40:	4640      	mov	r0, r8
 8001c42:	47d0      	blx	sl
 8001c44:	3001      	adds	r0, #1
 8001c46:	d09d      	beq.n	8001b84 <_printf_i+0x15c>
 8001c48:	3501      	adds	r5, #1
 8001c4a:	68e3      	ldr	r3, [r4, #12]
 8001c4c:	9903      	ldr	r1, [sp, #12]
 8001c4e:	1a5b      	subs	r3, r3, r1
 8001c50:	42ab      	cmp	r3, r5
 8001c52:	dcf2      	bgt.n	8001c3a <_printf_i+0x212>
 8001c54:	e7eb      	b.n	8001c2e <_printf_i+0x206>
 8001c56:	2500      	movs	r5, #0
 8001c58:	f104 0619 	add.w	r6, r4, #25
 8001c5c:	e7f5      	b.n	8001c4a <_printf_i+0x222>
 8001c5e:	bf00      	nop
 8001c60:	0800245e 	.word	0x0800245e
 8001c64:	0800246f 	.word	0x0800246f

08001c68 <__sflush_r>:
 8001c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c70:	0716      	lsls	r6, r2, #28
 8001c72:	4605      	mov	r5, r0
 8001c74:	460c      	mov	r4, r1
 8001c76:	d454      	bmi.n	8001d22 <__sflush_r+0xba>
 8001c78:	684b      	ldr	r3, [r1, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc02      	bgt.n	8001c84 <__sflush_r+0x1c>
 8001c7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	dd48      	ble.n	8001d16 <__sflush_r+0xae>
 8001c84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c86:	2e00      	cmp	r6, #0
 8001c88:	d045      	beq.n	8001d16 <__sflush_r+0xae>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c90:	682f      	ldr	r7, [r5, #0]
 8001c92:	6a21      	ldr	r1, [r4, #32]
 8001c94:	602b      	str	r3, [r5, #0]
 8001c96:	d030      	beq.n	8001cfa <__sflush_r+0x92>
 8001c98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	0759      	lsls	r1, r3, #29
 8001c9e:	d505      	bpl.n	8001cac <__sflush_r+0x44>
 8001ca0:	6863      	ldr	r3, [r4, #4]
 8001ca2:	1ad2      	subs	r2, r2, r3
 8001ca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ca6:	b10b      	cbz	r3, 8001cac <__sflush_r+0x44>
 8001ca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001caa:	1ad2      	subs	r2, r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001cb0:	6a21      	ldr	r1, [r4, #32]
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	47b0      	blx	r6
 8001cb6:	1c43      	adds	r3, r0, #1
 8001cb8:	89a3      	ldrh	r3, [r4, #12]
 8001cba:	d106      	bne.n	8001cca <__sflush_r+0x62>
 8001cbc:	6829      	ldr	r1, [r5, #0]
 8001cbe:	291d      	cmp	r1, #29
 8001cc0:	d82b      	bhi.n	8001d1a <__sflush_r+0xb2>
 8001cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d6c <__sflush_r+0x104>)
 8001cc4:	410a      	asrs	r2, r1
 8001cc6:	07d6      	lsls	r6, r2, #31
 8001cc8:	d427      	bmi.n	8001d1a <__sflush_r+0xb2>
 8001cca:	2200      	movs	r2, #0
 8001ccc:	6062      	str	r2, [r4, #4]
 8001cce:	04d9      	lsls	r1, r3, #19
 8001cd0:	6922      	ldr	r2, [r4, #16]
 8001cd2:	6022      	str	r2, [r4, #0]
 8001cd4:	d504      	bpl.n	8001ce0 <__sflush_r+0x78>
 8001cd6:	1c42      	adds	r2, r0, #1
 8001cd8:	d101      	bne.n	8001cde <__sflush_r+0x76>
 8001cda:	682b      	ldr	r3, [r5, #0]
 8001cdc:	b903      	cbnz	r3, 8001ce0 <__sflush_r+0x78>
 8001cde:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ce2:	602f      	str	r7, [r5, #0]
 8001ce4:	b1b9      	cbz	r1, 8001d16 <__sflush_r+0xae>
 8001ce6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cea:	4299      	cmp	r1, r3
 8001cec:	d002      	beq.n	8001cf4 <__sflush_r+0x8c>
 8001cee:	4628      	mov	r0, r5
 8001cf0:	f7ff fbf2 	bl	80014d8 <_free_r>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8001cf8:	e00d      	b.n	8001d16 <__sflush_r+0xae>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	47b0      	blx	r6
 8001d00:	4602      	mov	r2, r0
 8001d02:	1c50      	adds	r0, r2, #1
 8001d04:	d1c9      	bne.n	8001c9a <__sflush_r+0x32>
 8001d06:	682b      	ldr	r3, [r5, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0c6      	beq.n	8001c9a <__sflush_r+0x32>
 8001d0c:	2b1d      	cmp	r3, #29
 8001d0e:	d001      	beq.n	8001d14 <__sflush_r+0xac>
 8001d10:	2b16      	cmp	r3, #22
 8001d12:	d11e      	bne.n	8001d52 <__sflush_r+0xea>
 8001d14:	602f      	str	r7, [r5, #0]
 8001d16:	2000      	movs	r0, #0
 8001d18:	e022      	b.n	8001d60 <__sflush_r+0xf8>
 8001d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	e01b      	b.n	8001d5a <__sflush_r+0xf2>
 8001d22:	690f      	ldr	r7, [r1, #16]
 8001d24:	2f00      	cmp	r7, #0
 8001d26:	d0f6      	beq.n	8001d16 <__sflush_r+0xae>
 8001d28:	0793      	lsls	r3, r2, #30
 8001d2a:	680e      	ldr	r6, [r1, #0]
 8001d2c:	bf08      	it	eq
 8001d2e:	694b      	ldreq	r3, [r1, #20]
 8001d30:	600f      	str	r7, [r1, #0]
 8001d32:	bf18      	it	ne
 8001d34:	2300      	movne	r3, #0
 8001d36:	eba6 0807 	sub.w	r8, r6, r7
 8001d3a:	608b      	str	r3, [r1, #8]
 8001d3c:	f1b8 0f00 	cmp.w	r8, #0
 8001d40:	dde9      	ble.n	8001d16 <__sflush_r+0xae>
 8001d42:	6a21      	ldr	r1, [r4, #32]
 8001d44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001d46:	4643      	mov	r3, r8
 8001d48:	463a      	mov	r2, r7
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	47b0      	blx	r6
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	dc08      	bgt.n	8001d64 <__sflush_r+0xfc>
 8001d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5a:	81a3      	strh	r3, [r4, #12]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d64:	4407      	add	r7, r0
 8001d66:	eba8 0800 	sub.w	r8, r8, r0
 8001d6a:	e7e7      	b.n	8001d3c <__sflush_r+0xd4>
 8001d6c:	dfbffffe 	.word	0xdfbffffe

08001d70 <_fflush_r>:
 8001d70:	b538      	push	{r3, r4, r5, lr}
 8001d72:	690b      	ldr	r3, [r1, #16]
 8001d74:	4605      	mov	r5, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	b913      	cbnz	r3, 8001d80 <_fflush_r+0x10>
 8001d7a:	2500      	movs	r5, #0
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	bd38      	pop	{r3, r4, r5, pc}
 8001d80:	b118      	cbz	r0, 8001d8a <_fflush_r+0x1a>
 8001d82:	6a03      	ldr	r3, [r0, #32]
 8001d84:	b90b      	cbnz	r3, 8001d8a <_fflush_r+0x1a>
 8001d86:	f7ff f9ad 	bl	80010e4 <__sinit>
 8001d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f3      	beq.n	8001d7a <_fflush_r+0xa>
 8001d92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d94:	07d0      	lsls	r0, r2, #31
 8001d96:	d404      	bmi.n	8001da2 <_fflush_r+0x32>
 8001d98:	0599      	lsls	r1, r3, #22
 8001d9a:	d402      	bmi.n	8001da2 <_fflush_r+0x32>
 8001d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d9e:	f7ff fb98 	bl	80014d2 <__retarget_lock_acquire_recursive>
 8001da2:	4628      	mov	r0, r5
 8001da4:	4621      	mov	r1, r4
 8001da6:	f7ff ff5f 	bl	8001c68 <__sflush_r>
 8001daa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001dac:	07da      	lsls	r2, r3, #31
 8001dae:	4605      	mov	r5, r0
 8001db0:	d4e4      	bmi.n	8001d7c <_fflush_r+0xc>
 8001db2:	89a3      	ldrh	r3, [r4, #12]
 8001db4:	059b      	lsls	r3, r3, #22
 8001db6:	d4e1      	bmi.n	8001d7c <_fflush_r+0xc>
 8001db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001dba:	f7ff fb8b 	bl	80014d4 <__retarget_lock_release_recursive>
 8001dbe:	e7dd      	b.n	8001d7c <_fflush_r+0xc>

08001dc0 <__swhatbuf_r>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dc8:	2900      	cmp	r1, #0
 8001dca:	b096      	sub	sp, #88	@ 0x58
 8001dcc:	4615      	mov	r5, r2
 8001dce:	461e      	mov	r6, r3
 8001dd0:	da0d      	bge.n	8001dee <__swhatbuf_r+0x2e>
 8001dd2:	89a3      	ldrh	r3, [r4, #12]
 8001dd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2340      	movne	r3, #64	@ 0x40
 8001de0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001de4:	2000      	movs	r0, #0
 8001de6:	6031      	str	r1, [r6, #0]
 8001de8:	602b      	str	r3, [r5, #0]
 8001dea:	b016      	add	sp, #88	@ 0x58
 8001dec:	bd70      	pop	{r4, r5, r6, pc}
 8001dee:	466a      	mov	r2, sp
 8001df0:	f000 f848 	bl	8001e84 <_fstat_r>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	dbec      	blt.n	8001dd2 <__swhatbuf_r+0x12>
 8001df8:	9901      	ldr	r1, [sp, #4]
 8001dfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001dfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e02:	4259      	negs	r1, r3
 8001e04:	4159      	adcs	r1, r3
 8001e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e0a:	e7eb      	b.n	8001de4 <__swhatbuf_r+0x24>

08001e0c <__smakebuf_r>:
 8001e0c:	898b      	ldrh	r3, [r1, #12]
 8001e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e10:	079d      	lsls	r5, r3, #30
 8001e12:	4606      	mov	r6, r0
 8001e14:	460c      	mov	r4, r1
 8001e16:	d507      	bpl.n	8001e28 <__smakebuf_r+0x1c>
 8001e18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e1c:	6023      	str	r3, [r4, #0]
 8001e1e:	6123      	str	r3, [r4, #16]
 8001e20:	2301      	movs	r3, #1
 8001e22:	6163      	str	r3, [r4, #20]
 8001e24:	b003      	add	sp, #12
 8001e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e28:	ab01      	add	r3, sp, #4
 8001e2a:	466a      	mov	r2, sp
 8001e2c:	f7ff ffc8 	bl	8001dc0 <__swhatbuf_r>
 8001e30:	9f00      	ldr	r7, [sp, #0]
 8001e32:	4605      	mov	r5, r0
 8001e34:	4639      	mov	r1, r7
 8001e36:	4630      	mov	r0, r6
 8001e38:	f7ff fbba 	bl	80015b0 <_malloc_r>
 8001e3c:	b948      	cbnz	r0, 8001e52 <__smakebuf_r+0x46>
 8001e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e42:	059a      	lsls	r2, r3, #22
 8001e44:	d4ee      	bmi.n	8001e24 <__smakebuf_r+0x18>
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	81a3      	strh	r3, [r4, #12]
 8001e50:	e7e2      	b.n	8001e18 <__smakebuf_r+0xc>
 8001e52:	89a3      	ldrh	r3, [r4, #12]
 8001e54:	6020      	str	r0, [r4, #0]
 8001e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5a:	81a3      	strh	r3, [r4, #12]
 8001e5c:	9b01      	ldr	r3, [sp, #4]
 8001e5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e62:	b15b      	cbz	r3, 8001e7c <__smakebuf_r+0x70>
 8001e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e68:	4630      	mov	r0, r6
 8001e6a:	f000 f81d 	bl	8001ea8 <_isatty_r>
 8001e6e:	b128      	cbz	r0, 8001e7c <__smakebuf_r+0x70>
 8001e70:	89a3      	ldrh	r3, [r4, #12]
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	81a3      	strh	r3, [r4, #12]
 8001e7c:	89a3      	ldrh	r3, [r4, #12]
 8001e7e:	431d      	orrs	r5, r3
 8001e80:	81a5      	strh	r5, [r4, #12]
 8001e82:	e7cf      	b.n	8001e24 <__smakebuf_r+0x18>

08001e84 <_fstat_r>:
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4d07      	ldr	r5, [pc, #28]	@ (8001ea4 <_fstat_r+0x20>)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	602b      	str	r3, [r5, #0]
 8001e92:	f000 f93e 	bl	8002112 <_fstat>
 8001e96:	1c43      	adds	r3, r0, #1
 8001e98:	d102      	bne.n	8001ea0 <_fstat_r+0x1c>
 8001e9a:	682b      	ldr	r3, [r5, #0]
 8001e9c:	b103      	cbz	r3, 8001ea0 <_fstat_r+0x1c>
 8001e9e:	6023      	str	r3, [r4, #0]
 8001ea0:	bd38      	pop	{r3, r4, r5, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000204 	.word	0x20000204

08001ea8 <_isatty_r>:
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	4d06      	ldr	r5, [pc, #24]	@ (8001ec4 <_isatty_r+0x1c>)
 8001eac:	2300      	movs	r3, #0
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	602b      	str	r3, [r5, #0]
 8001eb4:	f000 fa90 	bl	80023d8 <_isatty>
 8001eb8:	1c43      	adds	r3, r0, #1
 8001eba:	d102      	bne.n	8001ec2 <_isatty_r+0x1a>
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	b103      	cbz	r3, 8001ec2 <_isatty_r+0x1a>
 8001ec0:	6023      	str	r3, [r4, #0]
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	20000204 	.word	0x20000204

08001ec8 <_sbrk_r>:
 8001ec8:	b538      	push	{r3, r4, r5, lr}
 8001eca:	4d06      	ldr	r5, [pc, #24]	@ (8001ee4 <_sbrk_r+0x1c>)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	4604      	mov	r4, r0
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	602b      	str	r3, [r5, #0]
 8001ed4:	f7fe fac6 	bl	8000464 <_sbrk>
 8001ed8:	1c43      	adds	r3, r0, #1
 8001eda:	d102      	bne.n	8001ee2 <_sbrk_r+0x1a>
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	b103      	cbz	r3, 8001ee2 <_sbrk_r+0x1a>
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	20000204 	.word	0x20000204

08001ee8 <findslot>:
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <findslot+0x2c>)
 8001eea:	b510      	push	{r4, lr}
 8001eec:	4604      	mov	r4, r0
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	b118      	cbz	r0, 8001efa <findslot+0x12>
 8001ef2:	6a03      	ldr	r3, [r0, #32]
 8001ef4:	b90b      	cbnz	r3, 8001efa <findslot+0x12>
 8001ef6:	f7ff f8f5 	bl	80010e4 <__sinit>
 8001efa:	2c13      	cmp	r4, #19
 8001efc:	d807      	bhi.n	8001f0e <findslot+0x26>
 8001efe:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <findslot+0x30>)
 8001f00:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001f04:	3201      	adds	r2, #1
 8001f06:	d002      	beq.n	8001f0e <findslot+0x26>
 8001f08:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f0c:	bd10      	pop	{r4, pc}
 8001f0e:	2000      	movs	r0, #0
 8001f10:	e7fc      	b.n	8001f0c <findslot+0x24>
 8001f12:	bf00      	nop
 8001f14:	20000024 	.word	0x20000024
 8001f18:	20000220 	.word	0x20000220

08001f1c <error>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	4604      	mov	r4, r0
 8001f20:	f7ff faac 	bl	800147c <__errno>
 8001f24:	2613      	movs	r6, #19
 8001f26:	4605      	mov	r5, r0
 8001f28:	2700      	movs	r7, #0
 8001f2a:	4630      	mov	r0, r6
 8001f2c:	4639      	mov	r1, r7
 8001f2e:	beab      	bkpt	0x00ab
 8001f30:	4606      	mov	r6, r0
 8001f32:	602e      	str	r6, [r5, #0]
 8001f34:	4620      	mov	r0, r4
 8001f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f38 <checkerror>:
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d101      	bne.n	8001f40 <checkerror+0x8>
 8001f3c:	f7ff bfee 	b.w	8001f1c <error>
 8001f40:	4770      	bx	lr

08001f42 <_swiread>:
 8001f42:	b530      	push	{r4, r5, lr}
 8001f44:	b085      	sub	sp, #20
 8001f46:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f4a:	9203      	str	r2, [sp, #12]
 8001f4c:	2406      	movs	r4, #6
 8001f4e:	ad01      	add	r5, sp, #4
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	beab      	bkpt	0x00ab
 8001f56:	4604      	mov	r4, r0
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ffed 	bl	8001f38 <checkerror>
 8001f5e:	b005      	add	sp, #20
 8001f60:	bd30      	pop	{r4, r5, pc}

08001f62 <_read>:
 8001f62:	b570      	push	{r4, r5, r6, lr}
 8001f64:	460e      	mov	r6, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	f7ff ffbe 	bl	8001ee8 <findslot>
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	b930      	cbnz	r0, 8001f7e <_read+0x1c>
 8001f70:	f7ff fa84 	bl	800147c <__errno>
 8001f74:	2309      	movs	r3, #9
 8001f76:	6003      	str	r3, [r0, #0]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	bd70      	pop	{r4, r5, r6, pc}
 8001f7e:	6800      	ldr	r0, [r0, #0]
 8001f80:	4622      	mov	r2, r4
 8001f82:	4631      	mov	r1, r6
 8001f84:	f7ff ffdd 	bl	8001f42 <_swiread>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	d0f5      	beq.n	8001f78 <_read+0x16>
 8001f8c:	686b      	ldr	r3, [r5, #4]
 8001f8e:	1a20      	subs	r0, r4, r0
 8001f90:	4403      	add	r3, r0
 8001f92:	606b      	str	r3, [r5, #4]
 8001f94:	e7f2      	b.n	8001f7c <_read+0x1a>

08001f96 <_swilseek>:
 8001f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f98:	460c      	mov	r4, r1
 8001f9a:	4616      	mov	r6, r2
 8001f9c:	f7ff ffa4 	bl	8001ee8 <findslot>
 8001fa0:	4605      	mov	r5, r0
 8001fa2:	b940      	cbnz	r0, 8001fb6 <_swilseek+0x20>
 8001fa4:	f7ff fa6a 	bl	800147c <__errno>
 8001fa8:	2309      	movs	r3, #9
 8001faa:	6003      	str	r3, [r0, #0]
 8001fac:	f04f 34ff 	mov.w	r4, #4294967295
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	b003      	add	sp, #12
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb6:	2e02      	cmp	r6, #2
 8001fb8:	d903      	bls.n	8001fc2 <_swilseek+0x2c>
 8001fba:	f7ff fa5f 	bl	800147c <__errno>
 8001fbe:	2316      	movs	r3, #22
 8001fc0:	e7f3      	b.n	8001faa <_swilseek+0x14>
 8001fc2:	2e01      	cmp	r6, #1
 8001fc4:	d112      	bne.n	8001fec <_swilseek+0x56>
 8001fc6:	6843      	ldr	r3, [r0, #4]
 8001fc8:	18e4      	adds	r4, r4, r3
 8001fca:	d4f6      	bmi.n	8001fba <_swilseek+0x24>
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	260a      	movs	r6, #10
 8001fd0:	e9cd 3400 	strd	r3, r4, [sp]
 8001fd4:	466f      	mov	r7, sp
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	4639      	mov	r1, r7
 8001fda:	beab      	bkpt	0x00ab
 8001fdc:	4606      	mov	r6, r0
 8001fde:	4630      	mov	r0, r6
 8001fe0:	f7ff ffaa 	bl	8001f38 <checkerror>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	dbe1      	blt.n	8001fac <_swilseek+0x16>
 8001fe8:	606c      	str	r4, [r5, #4]
 8001fea:	e7e1      	b.n	8001fb0 <_swilseek+0x1a>
 8001fec:	2e02      	cmp	r6, #2
 8001fee:	6803      	ldr	r3, [r0, #0]
 8001ff0:	d1ec      	bne.n	8001fcc <_swilseek+0x36>
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	260c      	movs	r6, #12
 8001ff6:	466f      	mov	r7, sp
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	4639      	mov	r1, r7
 8001ffc:	beab      	bkpt	0x00ab
 8001ffe:	4606      	mov	r6, r0
 8002000:	4630      	mov	r0, r6
 8002002:	f7ff ff99 	bl	8001f38 <checkerror>
 8002006:	1c43      	adds	r3, r0, #1
 8002008:	d0d0      	beq.n	8001fac <_swilseek+0x16>
 800200a:	4404      	add	r4, r0
 800200c:	e7de      	b.n	8001fcc <_swilseek+0x36>

0800200e <_lseek>:
 800200e:	f7ff bfc2 	b.w	8001f96 <_swilseek>

08002012 <_swiwrite>:
 8002012:	b530      	push	{r4, r5, lr}
 8002014:	b085      	sub	sp, #20
 8002016:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800201a:	9203      	str	r2, [sp, #12]
 800201c:	2405      	movs	r4, #5
 800201e:	ad01      	add	r5, sp, #4
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	beab      	bkpt	0x00ab
 8002026:	4604      	mov	r4, r0
 8002028:	4620      	mov	r0, r4
 800202a:	f7ff ff85 	bl	8001f38 <checkerror>
 800202e:	b005      	add	sp, #20
 8002030:	bd30      	pop	{r4, r5, pc}

08002032 <_write>:
 8002032:	b570      	push	{r4, r5, r6, lr}
 8002034:	460e      	mov	r6, r1
 8002036:	4615      	mov	r5, r2
 8002038:	f7ff ff56 	bl	8001ee8 <findslot>
 800203c:	4604      	mov	r4, r0
 800203e:	b930      	cbnz	r0, 800204e <_write+0x1c>
 8002040:	f7ff fa1c 	bl	800147c <__errno>
 8002044:	2309      	movs	r3, #9
 8002046:	6003      	str	r3, [r0, #0]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	bd70      	pop	{r4, r5, r6, pc}
 800204e:	6800      	ldr	r0, [r0, #0]
 8002050:	462a      	mov	r2, r5
 8002052:	4631      	mov	r1, r6
 8002054:	f7ff ffdd 	bl	8002012 <_swiwrite>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	dbf5      	blt.n	8002048 <_write+0x16>
 800205c:	6862      	ldr	r2, [r4, #4]
 800205e:	1ae8      	subs	r0, r5, r3
 8002060:	4402      	add	r2, r0
 8002062:	42ab      	cmp	r3, r5
 8002064:	6062      	str	r2, [r4, #4]
 8002066:	d1f1      	bne.n	800204c <_write+0x1a>
 8002068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff bf55 	b.w	8001f1c <error>

08002072 <_swiclose>:
 8002072:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002074:	2402      	movs	r4, #2
 8002076:	9001      	str	r0, [sp, #4]
 8002078:	ad01      	add	r5, sp, #4
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	beab      	bkpt	0x00ab
 8002080:	4604      	mov	r4, r0
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ff58 	bl	8001f38 <checkerror>
 8002088:	b003      	add	sp, #12
 800208a:	bd30      	pop	{r4, r5, pc}

0800208c <_close>:
 800208c:	b538      	push	{r3, r4, r5, lr}
 800208e:	4605      	mov	r5, r0
 8002090:	f7ff ff2a 	bl	8001ee8 <findslot>
 8002094:	4604      	mov	r4, r0
 8002096:	b930      	cbnz	r0, 80020a6 <_close+0x1a>
 8002098:	f7ff f9f0 	bl	800147c <__errno>
 800209c:	2309      	movs	r3, #9
 800209e:	6003      	str	r3, [r0, #0]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	bd38      	pop	{r3, r4, r5, pc}
 80020a6:	3d01      	subs	r5, #1
 80020a8:	2d01      	cmp	r5, #1
 80020aa:	d809      	bhi.n	80020c0 <_close+0x34>
 80020ac:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <_close+0x40>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d104      	bne.n	80020c0 <_close+0x34>
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	6023      	str	r3, [r4, #0]
 80020bc:	2000      	movs	r0, #0
 80020be:	e7f1      	b.n	80020a4 <_close+0x18>
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	f7ff ffd6 	bl	8002072 <_swiclose>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d0f5      	beq.n	80020b6 <_close+0x2a>
 80020ca:	e7eb      	b.n	80020a4 <_close+0x18>
 80020cc:	20000220 	.word	0x20000220

080020d0 <_swistat>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	460c      	mov	r4, r1
 80020d4:	f7ff ff08 	bl	8001ee8 <findslot>
 80020d8:	4605      	mov	r5, r0
 80020da:	b930      	cbnz	r0, 80020ea <_swistat+0x1a>
 80020dc:	f7ff f9ce 	bl	800147c <__errno>
 80020e0:	2309      	movs	r3, #9
 80020e2:	6003      	str	r3, [r0, #0]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020f0:	6063      	str	r3, [r4, #4]
 80020f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80020f8:	260c      	movs	r6, #12
 80020fa:	4630      	mov	r0, r6
 80020fc:	4629      	mov	r1, r5
 80020fe:	beab      	bkpt	0x00ab
 8002100:	4605      	mov	r5, r0
 8002102:	4628      	mov	r0, r5
 8002104:	f7ff ff18 	bl	8001f38 <checkerror>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	d0eb      	beq.n	80020e4 <_swistat+0x14>
 800210c:	6120      	str	r0, [r4, #16]
 800210e:	2000      	movs	r0, #0
 8002110:	e7ea      	b.n	80020e8 <_swistat+0x18>

08002112 <_fstat>:
 8002112:	460b      	mov	r3, r1
 8002114:	b510      	push	{r4, lr}
 8002116:	2100      	movs	r1, #0
 8002118:	4604      	mov	r4, r0
 800211a:	2258      	movs	r2, #88	@ 0x58
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f95f 	bl	80013e0 <memset>
 8002122:	4601      	mov	r1, r0
 8002124:	4620      	mov	r0, r4
 8002126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800212a:	f7ff bfd1 	b.w	80020d0 <_swistat>

0800212e <_stat>:
 800212e:	b538      	push	{r3, r4, r5, lr}
 8002130:	460d      	mov	r5, r1
 8002132:	4604      	mov	r4, r0
 8002134:	2258      	movs	r2, #88	@ 0x58
 8002136:	2100      	movs	r1, #0
 8002138:	4628      	mov	r0, r5
 800213a:	f7ff f951 	bl	80013e0 <memset>
 800213e:	4620      	mov	r0, r4
 8002140:	2100      	movs	r1, #0
 8002142:	f000 f811 	bl	8002168 <_swiopen>
 8002146:	1c43      	adds	r3, r0, #1
 8002148:	4604      	mov	r4, r0
 800214a:	d00b      	beq.n	8002164 <_stat+0x36>
 800214c:	686b      	ldr	r3, [r5, #4]
 800214e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002152:	606b      	str	r3, [r5, #4]
 8002154:	4629      	mov	r1, r5
 8002156:	f7ff ffbb 	bl	80020d0 <_swistat>
 800215a:	4605      	mov	r5, r0
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff ff95 	bl	800208c <_close>
 8002162:	462c      	mov	r4, r5
 8002164:	4620      	mov	r0, r4
 8002166:	bd38      	pop	{r3, r4, r5, pc}

08002168 <_swiopen>:
 8002168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800216c:	4f29      	ldr	r7, [pc, #164]	@ (8002214 <_swiopen+0xac>)
 800216e:	b096      	sub	sp, #88	@ 0x58
 8002170:	4682      	mov	sl, r0
 8002172:	460e      	mov	r6, r1
 8002174:	2400      	movs	r4, #0
 8002176:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800217a:	3301      	adds	r3, #1
 800217c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002180:	d00c      	beq.n	800219c <_swiopen+0x34>
 8002182:	3401      	adds	r4, #1
 8002184:	2c14      	cmp	r4, #20
 8002186:	d1f6      	bne.n	8002176 <_swiopen+0xe>
 8002188:	f7ff f978 	bl	800147c <__errno>
 800218c:	2318      	movs	r3, #24
 800218e:	6003      	str	r3, [r0, #0]
 8002190:	f04f 34ff 	mov.w	r4, #4294967295
 8002194:	4620      	mov	r0, r4
 8002196:	b016      	add	sp, #88	@ 0x58
 8002198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800219c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80021a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80021a4:	46e9      	mov	r9, sp
 80021a6:	d109      	bne.n	80021bc <_swiopen+0x54>
 80021a8:	4649      	mov	r1, r9
 80021aa:	4650      	mov	r0, sl
 80021ac:	f7ff ffbf 	bl	800212e <_stat>
 80021b0:	3001      	adds	r0, #1
 80021b2:	d003      	beq.n	80021bc <_swiopen+0x54>
 80021b4:	f7ff f962 	bl	800147c <__errno>
 80021b8:	2311      	movs	r3, #17
 80021ba:	e7e8      	b.n	800218e <_swiopen+0x26>
 80021bc:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80021c0:	f240 6301 	movw	r3, #1537	@ 0x601
 80021c4:	07b2      	lsls	r2, r6, #30
 80021c6:	bf48      	it	mi
 80021c8:	f045 0502 	orrmi.w	r5, r5, #2
 80021cc:	421e      	tst	r6, r3
 80021ce:	bf18      	it	ne
 80021d0:	f045 0504 	orrne.w	r5, r5, #4
 80021d4:	0733      	lsls	r3, r6, #28
 80021d6:	bf48      	it	mi
 80021d8:	f025 0504 	bicmi.w	r5, r5, #4
 80021dc:	4650      	mov	r0, sl
 80021de:	bf48      	it	mi
 80021e0:	f045 0508 	orrmi.w	r5, r5, #8
 80021e4:	f8cd a000 	str.w	sl, [sp]
 80021e8:	f7fe f84a 	bl	8000280 <strlen>
 80021ec:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80021f0:	2501      	movs	r5, #1
 80021f2:	4628      	mov	r0, r5
 80021f4:	4649      	mov	r1, r9
 80021f6:	beab      	bkpt	0x00ab
 80021f8:	4605      	mov	r5, r0
 80021fa:	2d00      	cmp	r5, #0
 80021fc:	db05      	blt.n	800220a <_swiopen+0xa2>
 80021fe:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002202:	4447      	add	r7, r8
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	e7c4      	b.n	8002194 <_swiopen+0x2c>
 800220a:	4628      	mov	r0, r5
 800220c:	f7ff fe86 	bl	8001f1c <error>
 8002210:	4604      	mov	r4, r0
 8002212:	e7bf      	b.n	8002194 <_swiopen+0x2c>
 8002214:	20000220 	.word	0x20000220

08002218 <_get_semihosting_exts>:
 8002218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800221c:	4606      	mov	r6, r0
 800221e:	460f      	mov	r7, r1
 8002220:	4829      	ldr	r0, [pc, #164]	@ (80022c8 <_get_semihosting_exts+0xb0>)
 8002222:	2100      	movs	r1, #0
 8002224:	4615      	mov	r5, r2
 8002226:	f7ff ff9f 	bl	8002168 <_swiopen>
 800222a:	462a      	mov	r2, r5
 800222c:	4604      	mov	r4, r0
 800222e:	2100      	movs	r1, #0
 8002230:	4630      	mov	r0, r6
 8002232:	f7ff f8d5 	bl	80013e0 <memset>
 8002236:	1c63      	adds	r3, r4, #1
 8002238:	d014      	beq.n	8002264 <_get_semihosting_exts+0x4c>
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff fe54 	bl	8001ee8 <findslot>
 8002240:	f04f 080c 	mov.w	r8, #12
 8002244:	4681      	mov	r9, r0
 8002246:	4640      	mov	r0, r8
 8002248:	4649      	mov	r1, r9
 800224a:	beab      	bkpt	0x00ab
 800224c:	4680      	mov	r8, r0
 800224e:	4640      	mov	r0, r8
 8002250:	f7ff fe72 	bl	8001f38 <checkerror>
 8002254:	2803      	cmp	r0, #3
 8002256:	dd02      	ble.n	800225e <_get_semihosting_exts+0x46>
 8002258:	1ec3      	subs	r3, r0, #3
 800225a:	42ab      	cmp	r3, r5
 800225c:	dc07      	bgt.n	800226e <_get_semihosting_exts+0x56>
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff ff14 	bl	800208c <_close>
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	b003      	add	sp, #12
 800226a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800226e:	2204      	movs	r2, #4
 8002270:	eb0d 0102 	add.w	r1, sp, r2
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff fe74 	bl	8001f62 <_read>
 800227a:	2803      	cmp	r0, #3
 800227c:	ddef      	ble.n	800225e <_get_semihosting_exts+0x46>
 800227e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002282:	2b53      	cmp	r3, #83	@ 0x53
 8002284:	d1eb      	bne.n	800225e <_get_semihosting_exts+0x46>
 8002286:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800228a:	2b48      	cmp	r3, #72	@ 0x48
 800228c:	d1e7      	bne.n	800225e <_get_semihosting_exts+0x46>
 800228e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002292:	2b46      	cmp	r3, #70	@ 0x46
 8002294:	d1e3      	bne.n	800225e <_get_semihosting_exts+0x46>
 8002296:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800229a:	2b42      	cmp	r3, #66	@ 0x42
 800229c:	d1df      	bne.n	800225e <_get_semihosting_exts+0x46>
 800229e:	2201      	movs	r2, #1
 80022a0:	4639      	mov	r1, r7
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fe77 	bl	8001f96 <_swilseek>
 80022a8:	2800      	cmp	r0, #0
 80022aa:	dbd8      	blt.n	800225e <_get_semihosting_exts+0x46>
 80022ac:	462a      	mov	r2, r5
 80022ae:	4631      	mov	r1, r6
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff fe56 	bl	8001f62 <_read>
 80022b6:	4605      	mov	r5, r0
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fee7 	bl	800208c <_close>
 80022be:	4628      	mov	r0, r5
 80022c0:	f7ff fe3a 	bl	8001f38 <checkerror>
 80022c4:	e7d0      	b.n	8002268 <_get_semihosting_exts+0x50>
 80022c6:	bf00      	nop
 80022c8:	08002480 	.word	0x08002480

080022cc <initialise_semihosting_exts>:
 80022cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022ce:	4d0a      	ldr	r5, [pc, #40]	@ (80022f8 <initialise_semihosting_exts+0x2c>)
 80022d0:	4c0a      	ldr	r4, [pc, #40]	@ (80022fc <initialise_semihosting_exts+0x30>)
 80022d2:	2100      	movs	r1, #0
 80022d4:	2201      	movs	r2, #1
 80022d6:	a801      	add	r0, sp, #4
 80022d8:	6029      	str	r1, [r5, #0]
 80022da:	6022      	str	r2, [r4, #0]
 80022dc:	f7ff ff9c 	bl	8002218 <_get_semihosting_exts>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	dd07      	ble.n	80022f4 <initialise_semihosting_exts+0x28>
 80022e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022e8:	f003 0201 	and.w	r2, r3, #1
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	602a      	str	r2, [r5, #0]
 80022f2:	6023      	str	r3, [r4, #0]
 80022f4:	b003      	add	sp, #12
 80022f6:	bd30      	pop	{r4, r5, pc}
 80022f8:	20000078 	.word	0x20000078
 80022fc:	20000074 	.word	0x20000074

08002300 <_has_ext_stdout_stderr>:
 8002300:	b510      	push	{r4, lr}
 8002302:	4c04      	ldr	r4, [pc, #16]	@ (8002314 <_has_ext_stdout_stderr+0x14>)
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da01      	bge.n	800230e <_has_ext_stdout_stderr+0xe>
 800230a:	f7ff ffdf 	bl	80022cc <initialise_semihosting_exts>
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	bd10      	pop	{r4, pc}
 8002312:	bf00      	nop
 8002314:	20000074 	.word	0x20000074

08002318 <initialise_monitor_handles>:
 8002318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231c:	b085      	sub	sp, #20
 800231e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80023d0 <initialise_monitor_handles+0xb8>
 8002322:	f8cd 9004 	str.w	r9, [sp, #4]
 8002326:	2303      	movs	r3, #3
 8002328:	2400      	movs	r4, #0
 800232a:	9303      	str	r3, [sp, #12]
 800232c:	af01      	add	r7, sp, #4
 800232e:	9402      	str	r4, [sp, #8]
 8002330:	2501      	movs	r5, #1
 8002332:	4628      	mov	r0, r5
 8002334:	4639      	mov	r1, r7
 8002336:	beab      	bkpt	0x00ab
 8002338:	4605      	mov	r5, r0
 800233a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80023d4 <initialise_monitor_handles+0xbc>
 800233e:	4623      	mov	r3, r4
 8002340:	4c20      	ldr	r4, [pc, #128]	@ (80023c4 <initialise_monitor_handles+0xac>)
 8002342:	f8c8 5000 	str.w	r5, [r8]
 8002346:	f04f 32ff 	mov.w	r2, #4294967295
 800234a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800234e:	3301      	adds	r3, #1
 8002350:	2b14      	cmp	r3, #20
 8002352:	d1fa      	bne.n	800234a <initialise_monitor_handles+0x32>
 8002354:	f7ff ffd4 	bl	8002300 <_has_ext_stdout_stderr>
 8002358:	4d1b      	ldr	r5, [pc, #108]	@ (80023c8 <initialise_monitor_handles+0xb0>)
 800235a:	b1d0      	cbz	r0, 8002392 <initialise_monitor_handles+0x7a>
 800235c:	f04f 0a03 	mov.w	sl, #3
 8002360:	2304      	movs	r3, #4
 8002362:	f8cd 9004 	str.w	r9, [sp, #4]
 8002366:	2601      	movs	r6, #1
 8002368:	f8cd a00c 	str.w	sl, [sp, #12]
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	4630      	mov	r0, r6
 8002370:	4639      	mov	r1, r7
 8002372:	beab      	bkpt	0x00ab
 8002374:	4683      	mov	fp, r0
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <initialise_monitor_handles+0xb4>)
 8002378:	f8cd 9004 	str.w	r9, [sp, #4]
 800237c:	f8c3 b000 	str.w	fp, [r3]
 8002380:	2308      	movs	r3, #8
 8002382:	f8cd a00c 	str.w	sl, [sp, #12]
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	4630      	mov	r0, r6
 800238a:	4639      	mov	r1, r7
 800238c:	beab      	bkpt	0x00ab
 800238e:	4606      	mov	r6, r0
 8002390:	602e      	str	r6, [r5, #0]
 8002392:	682b      	ldr	r3, [r5, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	bf02      	ittt	eq
 8002398:	4b0c      	ldreq	r3, [pc, #48]	@ (80023cc <initialise_monitor_handles+0xb4>)
 800239a:	681b      	ldreq	r3, [r3, #0]
 800239c:	602b      	streq	r3, [r5, #0]
 800239e:	2600      	movs	r6, #0
 80023a0:	f8d8 3000 	ldr.w	r3, [r8]
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	6066      	str	r6, [r4, #4]
 80023a8:	f7ff ffaa 	bl	8002300 <_has_ext_stdout_stderr>
 80023ac:	b130      	cbz	r0, 80023bc <initialise_monitor_handles+0xa4>
 80023ae:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <initialise_monitor_handles+0xb4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80023b6:	682b      	ldr	r3, [r5, #0]
 80023b8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80023bc:	b005      	add	sp, #20
 80023be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c2:	bf00      	nop
 80023c4:	20000220 	.word	0x20000220
 80023c8:	20000214 	.word	0x20000214
 80023cc:	20000218 	.word	0x20000218
 80023d0:	08002496 	.word	0x08002496
 80023d4:	2000021c 	.word	0x2000021c

080023d8 <_isatty>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	f7ff fd85 	bl	8001ee8 <findslot>
 80023de:	2409      	movs	r4, #9
 80023e0:	4605      	mov	r5, r0
 80023e2:	b920      	cbnz	r0, 80023ee <_isatty+0x16>
 80023e4:	f7ff f84a 	bl	800147c <__errno>
 80023e8:	6004      	str	r4, [r0, #0]
 80023ea:	2000      	movs	r0, #0
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
 80023ee:	4620      	mov	r0, r4
 80023f0:	4629      	mov	r1, r5
 80023f2:	beab      	bkpt	0x00ab
 80023f4:	4604      	mov	r4, r0
 80023f6:	2c01      	cmp	r4, #1
 80023f8:	4620      	mov	r0, r4
 80023fa:	d0f7      	beq.n	80023ec <_isatty+0x14>
 80023fc:	f7ff f83e 	bl	800147c <__errno>
 8002400:	2513      	movs	r5, #19
 8002402:	4604      	mov	r4, r0
 8002404:	2600      	movs	r6, #0
 8002406:	4628      	mov	r0, r5
 8002408:	4631      	mov	r1, r6
 800240a:	beab      	bkpt	0x00ab
 800240c:	4605      	mov	r5, r0
 800240e:	6025      	str	r5, [r4, #0]
 8002410:	e7eb      	b.n	80023ea <_isatty+0x12>
	...

08002414 <_init>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	bf00      	nop
 8002418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241a:	bc08      	pop	{r3}
 800241c:	469e      	mov	lr, r3
 800241e:	4770      	bx	lr

08002420 <_fini>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr
