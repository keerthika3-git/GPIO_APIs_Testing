
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b78  08000b78  00001b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b84  08000b84  00001b94  2**0
                  CONTENTS
  4 .ARM          00000008  08000b84  08000b84  00001b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b8c  08000b94  00001b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b8c  08000b8c  00001b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b90  08000b90  00001b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b94  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b94  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010f1  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c5  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00003080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d8  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021d9  00000000  00000000  00003288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000187c  00000000  00000000  00005461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009210  00000000  00000000  00006cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000feed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000400  00000000  00000000  0000ff30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000b60 	.word	0x08000b60

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000b60 	.word	0x08000b60

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <delay>:

#include<string.h>

#define LOW 0
#define BTN_PRESSED LOW
void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<500000;i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	@ (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <SPI2_PinsInit>:

void SPI2_PinsInit(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800021a:	4b1c      	ldr	r3, [pc, #112]	@ (800028c <SPI2_PinsInit+0x78>)
 800021c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode=5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 800022e:	2300      	movs	r3, #0
 8000230:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(SPIPins.pGPIOx, ENABLE);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2101      	movs	r1, #1
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f8e0 	bl	80003fc <GPIO_PeriClockControl>
	SPIPins.pGPIOx->MODER = 0x00000000;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
	SPIPins.pGPIOx->OSPEEDR= 0x00000000;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
	SPIPins.pGPIOx->OTYPER=0x00000000;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2200      	movs	r2, #0
 800024c:	605a      	str	r2, [r3, #4]
	SPIPins.pGPIOx->PUPDR=0x00000000;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
	SPIPins.pGPIOx->AFRL[0]=0x00000000;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	621a      	str	r2, [r3, #32]
	SPIPins.pGPIOx->AFRL[1]=0x00000000;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	@ 0x24

	//SCLK
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
//	GPIO_Init(&SPIPins);

	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_12;
 8000260:	230c      	movs	r3, #12
 8000262:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f95e 	bl	8000528 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_15;
 800026c:	230f      	movs	r3, #15
 800026e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f958 	bl	8000528 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 8000278:	230d      	movs	r3, #13
 800027a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f952 	bl	8000528 <GPIO_Init>
	//NSS
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_12;
//	GPIO_Init(&SPIPins);


}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40020400 	.word	0x40020400

08000290 <SPI2_Init>:

void SPI2_Init(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <SPI2_Init+0x38>)
 8000298:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800029a:	2301      	movs	r3, #1
 800029c:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800029e:	2300      	movs	r3, #0
 80002a0:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_SClkSpeed = SPI_SCLK_SPEED_DIV8; //generate clk of 2MHz
 80002a2:	2302      	movs	r3, #2
 80002a4:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002a6:	2301      	movs	r3, #1
 80002a8:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //hardware slave disabled for NSS pin
 80002aa:	2300      	movs	r3, #0
 80002ac:	73bb      	strb	r3, [r7, #14]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ae:	2300      	movs	r3, #0
 80002b0:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002b2:	2300      	movs	r3, #0
 80002b4:	733b      	strb	r3, [r7, #12]

	SPI_Init(&SPI2Handle);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fb45 	bl	8000948 <SPI_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40003800 	.word	0x40003800

080002cc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	GPIOBtn.pGPIOx=GPIOC;
 80002d2:	4b13      	ldr	r3, [pc, #76]	@ (8000320 <GPIO_ButtonInit+0x54>)
 80002d4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 80002d6:	230d      	movs	r3, #13
 80002d8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IN;
 80002da:	2300      	movs	r3, #0
 80002dc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOBtn.pGPIOx, ENABLE);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2101      	movs	r1, #1
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f886 	bl	80003fc <GPIO_PeriClockControl>

	GPIOBtn.pGPIOx->MODER = 0x00000000;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
	GPIOBtn.pGPIOx->OSPEEDR= 0x00000000;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
//	GPIOBtn.pGPIOx->OTYPER=0x00000000;
	GPIOBtn.pGPIOx->PUPDR=0x00000000;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
	GPIOBtn.pGPIOx->AFRL[0]=0x00000000;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
	GPIOBtn.pGPIOx->AFRL[1]=0x00000000;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIO_Init(&GPIOBtn);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f909 	bl	8000528 <GPIO_Init>
//	GPIO_PeriClockControl(GPIOBtn.pGPIOx, DISABLE);

}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40020800 	.word	0x40020800

08000324 <main>:

int main(void){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	char user_data[] ="Hello world";
 800032a:	4a1c      	ldr	r2, [pc, #112]	@ (800039c <main+0x78>)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000330:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 8000334:	f7ff ffca 	bl	80002cc <GPIO_ButtonInit>

	SPI2_PinsInit();   // to initialize GPIO pins to behave as SPI2 pins
 8000338:	f7ff ff6c 	bl	8000214 <SPI2_PinsInit>

    SPI2_Init();	   // To Initialize SPI2 peripheral parameters
 800033c:	f7ff ffa8 	bl	8000290 <SPI2_Init>

    SPI_SSOEConfig(SPI2, ENABLE); // setting SSOE enable NSS output  and when SPE=1, NSS will pulled to low and NSS pin will high when SPE=0
 8000340:	2101      	movs	r1, #1
 8000342:	4817      	ldr	r0, [pc, #92]	@ (80003a0 <main+0x7c>)
 8000344:	f000 fbc8 	bl	8000ad8 <SPI_SSOEConfig>
while(1){
    while(! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)== BTN_PRESSED);
 8000348:	bf00      	nop
 800034a:	210d      	movs	r1, #13
 800034c:	4815      	ldr	r0, [pc, #84]	@ (80003a4 <main+0x80>)
 800034e:	f000 fa67 	bl	8000820 <GPIO_ReadFromInputPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d1f8      	bne.n	800034a <main+0x26>
//    if(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) == BTN_PRESSED){

    delay();
 8000358:	f7ff ff46 	bl	80001e8 <delay>
    SPI_Peripheralcontrol(SPI2,ENABLE); // To enable SPI2 peripheral
 800035c:	2101      	movs	r1, #1
 800035e:	4810      	ldr	r0, [pc, #64]	@ (80003a0 <main+0x7c>)
 8000360:	f000 fb9b 	bl	8000a9a <SPI_Peripheralcontrol>

    uint8_t dataLen = strlen(user_data);
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff36 	bl	80001d8 <strlen>
 800036c:	4603      	mov	r3, r0
 800036e:	b2db      	uxtb	r3, r3
 8000370:	70fb      	strb	r3, [r7, #3]
    SPI_SendData(SPI2,&dataLen,1);
 8000372:	1cfb      	adds	r3, r7, #3
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	4809      	ldr	r0, [pc, #36]	@ (80003a0 <main+0x7c>)
 800037a:	f000 fb4f 	bl	8000a1c <SPI_SendData>

    SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff29 	bl	80001d8 <strlen>
 8000386:	4602      	mov	r2, r0
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	4619      	mov	r1, r3
 800038c:	4804      	ldr	r0, [pc, #16]	@ (80003a0 <main+0x7c>)
 800038e:	f000 fb45 	bl	8000a1c <SPI_SendData>


    SPI_Peripheralcontrol(SPI2,DISABLE);
 8000392:	2100      	movs	r1, #0
 8000394:	4802      	ldr	r0, [pc, #8]	@ (80003a0 <main+0x7c>)
 8000396:	f000 fb80 	bl	8000a9a <SPI_Peripheralcontrol>
while(1){
 800039a:	e7d5      	b.n	8000348 <main+0x24>
 800039c:	08000b78 	.word	0x08000b78
 80003a0:	40003800 	.word	0x40003800
 80003a4:	40020800 	.word	0x40020800

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	@ (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	@ (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	@ (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	@ (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	@ (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 fb9f 	bl	8000b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff ffa3 	bl	8000324 <main>

080003de <LoopForever>:

LoopForever:
  b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ec:	08000b94 	.word	0x08000b94
  ldr r2, =_sbss
 80003f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f4:	2000001c 	.word	0x2000001c

080003f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>
	...

080003fc <GPIO_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d13d      	bne.n	800048a <GPIO_PeriClockControl+0x8e>
		if(pGPIOx == GPIOA){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a3f      	ldr	r2, [pc, #252]	@ (8000510 <GPIO_PeriClockControl+0x114>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000416:	4b3f      	ldr	r3, [pc, #252]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041a:	4a3e      	ldr	r2, [pc, #248]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6313      	str	r3, [r2, #48]	@ 0x30
		else{
			GPIOH_PCLK_DI();
		}

	}
}
 8000422:	e06f      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a3c      	ldr	r2, [pc, #240]	@ (8000518 <GPIO_PeriClockControl+0x11c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800042c:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000430:	4a38      	ldr	r2, [pc, #224]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000432:	f043 0302 	orr.w	r3, r3, #2
 8000436:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000438:	e064      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a37      	ldr	r2, [pc, #220]	@ (800051c <GPIO_PeriClockControl+0x120>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000442:	4b34      	ldr	r3, [pc, #208]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000446:	4a33      	ldr	r2, [pc, #204]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044e:	e059      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a33      	ldr	r2, [pc, #204]	@ (8000520 <GPIO_PeriClockControl+0x124>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000458:	4b2e      	ldr	r3, [pc, #184]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045c:	4a2d      	ldr	r2, [pc, #180]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000464:	e04e      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a2e      	ldr	r2, [pc, #184]	@ (8000524 <GPIO_PeriClockControl+0x128>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800046e:	4b29      	ldr	r3, [pc, #164]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	4a28      	ldr	r2, [pc, #160]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000474:	f043 0310 	orr.w	r3, r3, #16
 8000478:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047a:	e043      	b.n	8000504 <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_EN();
 800047c:	4b25      	ldr	r3, [pc, #148]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000480:	4a24      	ldr	r2, [pc, #144]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000486:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000488:	e03c      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		if(pGPIOx == GPIOA){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a20      	ldr	r2, [pc, #128]	@ (8000510 <GPIO_PeriClockControl+0x114>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0xa4>
			GPIOA_PCLK_DI();
 8000492:	4b20      	ldr	r3, [pc, #128]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000496:	4a1f      	ldr	r2, [pc, #124]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 8000498:	f023 0301 	bic.w	r3, r3, #1
 800049c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049e:	e031      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000518 <GPIO_PeriClockControl+0x11c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0xba>
			GPIOB_PCLK_DI();
 80004a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a19      	ldr	r2, [pc, #100]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004ae:	f023 0302 	bic.w	r3, r3, #2
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b4:	e026      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a18      	ldr	r2, [pc, #96]	@ (800051c <GPIO_PeriClockControl+0x120>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0xd0>
			GPIOC_PCLK_DI();
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004c4:	f023 0304 	bic.w	r3, r3, #4
 80004c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ca:	e01b      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a14      	ldr	r2, [pc, #80]	@ (8000520 <GPIO_PeriClockControl+0x124>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0xe6>
			GPIOD_PCLK_DI();
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004da:	f023 0308 	bic.w	r3, r3, #8
 80004de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e0:	e010      	b.n	8000504 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <GPIO_PeriClockControl+0x128>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0xfc>
			GPIOE_PCLK_DI();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	4a09      	ldr	r2, [pc, #36]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004f0:	f023 0310 	bic.w	r3, r3, #16
 80004f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f6:	e005      	b.n	8000504 <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_DI();
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fc:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <GPIO_PeriClockControl+0x118>)
 80004fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000502:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40020000 	.word	0x40020000
 8000514:	40023800 	.word	0x40023800
 8000518:	40020400 	.word	0x40020400
 800051c:	40020800 	.word	0x40020800
 8000520:	40020c00 	.word	0x40020c00
 8000524:	40021000 	.word	0x40021000

08000528 <GPIO_Init>:


/* Init and DeInit  */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000528:	b480      	push	{r7}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
//	//Enable Peripheral clock
//	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);


	//1.configure modes
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG ){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d81f      	bhi.n	800057c <GPIO_Init+0x54>
       //non interrupt mode
       temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	617b      	str	r3, [r7, #20]
       pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing 2bits before setting
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	4619      	mov	r1, r3
 800055a:	2303      	movs	r3, #3
 800055c:	408b      	lsls	r3, r1
 800055e:	43db      	mvns	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	400a      	ands	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
       pGPIOHandle->pGPIOx->MODER |=temp; //setting
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6819      	ldr	r1, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e09e      	b.n	80006ba <GPIO_Init+0x192>
	 }
	 else{
		 //this for interrupt mode
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	2b04      	cmp	r3, #4
 8000582:	d117      	bne.n	80005b4 <GPIO_Init+0x8c>
			 //1. configure Falling Trigger Selection Register
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000584:	4b9d      	ldr	r3, [pc, #628]	@ (80007fc <GPIO_Init+0x2d4>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	7912      	ldrb	r2, [r2, #4]
 800058c:	4611      	mov	r1, r2
 800058e:	2201      	movs	r2, #1
 8000590:	408a      	lsls	r2, r1
 8000592:	4611      	mov	r1, r2
 8000594:	4a99      	ldr	r2, [pc, #612]	@ (80007fc <GPIO_Init+0x2d4>)
 8000596:	430b      	orrs	r3, r1
 8000598:	60d3      	str	r3, [r2, #12]
			 //clearing RTSR bit to avoid previous configuration issues
			 EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	4b98      	ldr	r3, [pc, #608]	@ (80007fc <GPIO_Init+0x2d4>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	43d2      	mvns	r2, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a93      	ldr	r2, [pc, #588]	@ (80007fc <GPIO_Init+0x2d4>)
 80005ae:	400b      	ands	r3, r1
 80005b0:	6093      	str	r3, [r2, #8]
 80005b2:	e035      	b.n	8000620 <GPIO_Init+0xf8>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b05      	cmp	r3, #5
 80005ba:	d117      	bne.n	80005ec <GPIO_Init+0xc4>
			 //1. configure Rising Trigger Selection Register
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b8f      	ldr	r3, [pc, #572]	@ (80007fc <GPIO_Init+0x2d4>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a8b      	ldr	r2, [pc, #556]	@ (80007fc <GPIO_Init+0x2d4>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6093      	str	r3, [r2, #8]
			//clearing FTSR bit to avoid previous configuration issues
             EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	4b8a      	ldr	r3, [pc, #552]	@ (80007fc <GPIO_Init+0x2d4>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	4611      	mov	r1, r2
 80005dc:	2201      	movs	r2, #1
 80005de:	408a      	lsls	r2, r1
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a85      	ldr	r2, [pc, #532]	@ (80007fc <GPIO_Init+0x2d4>)
 80005e6:	400b      	ands	r3, r1
 80005e8:	60d3      	str	r3, [r2, #12]
 80005ea:	e019      	b.n	8000620 <GPIO_Init+0xf8>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	795b      	ldrb	r3, [r3, #5]
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d115      	bne.n	8000620 <GPIO_Init+0xf8>
			 //1. configure both FTSR and RTSR
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f4:	4b81      	ldr	r3, [pc, #516]	@ (80007fc <GPIO_Init+0x2d4>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7912      	ldrb	r2, [r2, #4]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	4611      	mov	r1, r2
 8000604:	4a7d      	ldr	r2, [pc, #500]	@ (80007fc <GPIO_Init+0x2d4>)
 8000606:	430b      	orrs	r3, r1
 8000608:	60d3      	str	r3, [r2, #12]
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060a:	4b7c      	ldr	r3, [pc, #496]	@ (80007fc <GPIO_Init+0x2d4>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7912      	ldrb	r2, [r2, #4]
 8000612:	4611      	mov	r1, r2
 8000614:	2201      	movs	r2, #1
 8000616:	408a      	lsls	r2, r1
 8000618:	4611      	mov	r1, r2
 800061a:	4a78      	ldr	r2, [pc, #480]	@ (80007fc <GPIO_Init+0x2d4>)
 800061c:	430b      	orrs	r3, r1
 800061e:	6093      	str	r3, [r2, #8]
		 }
		 //2.configure GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	f003 0303 	and.w	r3, r3, #3
 8000630:	74bb      	strb	r3, [r7, #18]

		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a72      	ldr	r2, [pc, #456]	@ (8000800 <GPIO_Init+0x2d8>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d024      	beq.n	8000686 <GPIO_Init+0x15e>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a70      	ldr	r2, [pc, #448]	@ (8000804 <GPIO_Init+0x2dc>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d01d      	beq.n	8000682 <GPIO_Init+0x15a>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a6f      	ldr	r2, [pc, #444]	@ (8000808 <GPIO_Init+0x2e0>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d016      	beq.n	800067e <GPIO_Init+0x156>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a6d      	ldr	r2, [pc, #436]	@ (800080c <GPIO_Init+0x2e4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d00f      	beq.n	800067a <GPIO_Init+0x152>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a6c      	ldr	r2, [pc, #432]	@ (8000810 <GPIO_Init+0x2e8>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d008      	beq.n	8000676 <GPIO_Init+0x14e>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a6a      	ldr	r2, [pc, #424]	@ (8000814 <GPIO_Init+0x2ec>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <GPIO_Init+0x14a>
 800066e:	2307      	movs	r3, #7
 8000670:	e00a      	b.n	8000688 <GPIO_Init+0x160>
 8000672:	2300      	movs	r3, #0
 8000674:	e008      	b.n	8000688 <GPIO_Init+0x160>
 8000676:	2304      	movs	r3, #4
 8000678:	e006      	b.n	8000688 <GPIO_Init+0x160>
 800067a:	2303      	movs	r3, #3
 800067c:	e004      	b.n	8000688 <GPIO_Init+0x160>
 800067e:	2302      	movs	r3, #2
 8000680:	e002      	b.n	8000688 <GPIO_Init+0x160>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <GPIO_Init+0x160>
 8000686:	2300      	movs	r3, #0
 8000688:	747b      	strb	r3, [r7, #17]

		 SYSCFG_PCLK_EN();
 800068a:	4b63      	ldr	r3, [pc, #396]	@ (8000818 <GPIO_Init+0x2f0>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068e:	4a62      	ldr	r2, [pc, #392]	@ (8000818 <GPIO_Init+0x2f0>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000694:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 8000696:	7c7a      	ldrb	r2, [r7, #17]
 8000698:	7cbb      	ldrb	r3, [r7, #18]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	fa02 f103 	lsl.w	r1, r2, r3
 80006a0:	4a5e      	ldr	r2, [pc, #376]	@ (800081c <GPIO_Init+0x2f4>)
 80006a2:	7cfb      	ldrb	r3, [r7, #19]
 80006a4:	3302      	adds	r3, #2
 80006a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 //3.enable EXTI interrupt delivery using IMR
		 EXTI->IMR =(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	461a      	mov	r2, r3
 80006b0:	2301      	movs	r3, #1
 80006b2:	fa03 f202 	lsl.w	r2, r3, r2
 80006b6:	4b51      	ldr	r3, [pc, #324]	@ (80007fc <GPIO_Init+0x2d4>)
 80006b8:	601a      	str	r2, [r3, #0]
	 }

	 temp=0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

	 //2.configure speed

	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	461a      	mov	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	4619      	mov	r1, r3
 80006dc:	2303      	movs	r3, #3
 80006de:	408b      	lsls	r3, r1
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDR |=temp; //setting
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6899      	ldr	r1, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	609a      	str	r2, [r3, #8]

	 temp=0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

	 //3.configure output types

	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7a1b      	ldrb	r3, [r3, #8]
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 1bit before setting
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	685a      	ldr	r2, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	4619      	mov	r1, r3
 800071c:	2301      	movs	r3, #1
 800071e:	408b      	lsls	r3, r1
 8000720:	43db      	mvns	r3, r3
 8000722:	4619      	mov	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	400a      	ands	r2, r1
 800072a:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |=temp; //setting
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	430a      	orrs	r2, r1
 800073a:	605a      	str	r2, [r3, #4]

	 temp=0;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

	 //4. configure pull up/pull down

	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	4619      	mov	r1, r3
 800075e:	2303      	movs	r3, #3
 8000760:	408b      	lsls	r3, r1
 8000762:	43db      	mvns	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	400a      	ands	r2, r1
 800076c:	60da      	str	r2, [r3, #12]
     pGPIOHandle->pGPIOx->PUPDR |=temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68d9      	ldr	r1, [r3, #12]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	430a      	orrs	r2, r1
 800077c:	60da      	str	r2, [r3, #12]

	 temp=0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

	 //5.configure alternate functionality
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN ){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d131      	bne.n	80007ee <GPIO_Init+0x2c6>

		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xFF <<(4*temp2));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7c3a      	ldrb	r2, [r7, #16]
 80007a2:	3208      	adds	r2, #8
 80007a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	22ff      	movs	r2, #255	@ 0xff
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	7c3a      	ldrb	r2, [r7, #16]
 80007bc:	4001      	ands	r1, r0
 80007be:	3208      	adds	r2, #8
 80007c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	7c3a      	ldrb	r2, [r7, #16]
 80007ca:	3208      	adds	r2, #8
 80007cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7a5b      	ldrb	r3, [r3, #9]
 80007d4:	461a      	mov	r2, r3
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	4301      	orrs	r1, r0
 80007e8:	3208      	adds	r2, #8
 80007ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }

}
 80007ee:	bf00      	nop
 80007f0:	371c      	adds	r7, #28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40013c00 	.word	0x40013c00
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021000 	.word	0x40021000
 8000814:	40021c00 	.word	0x40021c00
 8000818:	40023800 	.word	0x40023800
 800081c:	40013800 	.word	0x40013800

08000820 <GPIO_ReadFromInputPin>:

}

/* Data read and write  */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	uint8_t value =(uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001); //right shifting any pin number to least significant bit by setting everything 0
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	691a      	ldr	r2, [r3, #16]
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	fa22 f303 	lsr.w	r3, r2, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
	return value;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SPI_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d132      	bne.n	80008c4 <SPI_PeriClockControl+0x78>
		if(pSPIx == SPI1){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a34      	ldr	r2, [pc, #208]	@ (8000934 <SPI_PeriClockControl+0xe8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000866:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <SPI_PeriClockControl+0xec>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a33      	ldr	r2, [pc, #204]	@ (8000938 <SPI_PeriClockControl+0xec>)
 800086c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
		}
		else{
			SPI5_PCLK_DI();
		}
	}
}
 8000872:	e059      	b.n	8000928 <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI2){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a31      	ldr	r2, [pc, #196]	@ (800093c <SPI_PeriClockControl+0xf0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800087c:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <SPI_PeriClockControl+0xec>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a2d      	ldr	r2, [pc, #180]	@ (8000938 <SPI_PeriClockControl+0xec>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000888:	e04e      	b.n	8000928 <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI3){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a2c      	ldr	r2, [pc, #176]	@ (8000940 <SPI_PeriClockControl+0xf4>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <SPI_PeriClockControl+0xec>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <SPI_PeriClockControl+0xec>)
 8000898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800089e:	e043      	b.n	8000928 <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI4){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a28      	ldr	r2, [pc, #160]	@ (8000944 <SPI_PeriClockControl+0xf8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 80008a8:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ac:	4a22      	ldr	r2, [pc, #136]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008b2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008b4:	e038      	b.n	8000928 <SPI_PeriClockControl+0xdc>
			SPI5_PCLK_EN();
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008c0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008c2:	e031      	b.n	8000928 <SPI_PeriClockControl+0xdc>
		if(pSPIx == SPI1){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <SPI_PeriClockControl+0xe8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <SPI_PeriClockControl+0x8e>
			SPI1_PCLK_DI();
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d0:	4a19      	ldr	r2, [pc, #100]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008d6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008d8:	e026      	b.n	8000928 <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI2){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a17      	ldr	r2, [pc, #92]	@ (800093c <SPI_PeriClockControl+0xf0>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <SPI_PeriClockControl+0xa4>
			SPI2_PCLK_DI();
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ee:	e01b      	b.n	8000928 <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI3){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <SPI_PeriClockControl+0xf4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d106      	bne.n	8000906 <SPI_PeriClockControl+0xba>
			SPI3_PCLK_DI();
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <SPI_PeriClockControl+0xec>)
 80008fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000904:	e010      	b.n	8000928 <SPI_PeriClockControl+0xdc>
		else if(pSPIx == SPI4){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <SPI_PeriClockControl+0xf8>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <SPI_PeriClockControl+0xd0>
			SPI4_PCLK_DI();
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <SPI_PeriClockControl+0xec>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	4a09      	ldr	r2, [pc, #36]	@ (8000938 <SPI_PeriClockControl+0xec>)
 8000914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000918:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800091a:	e005      	b.n	8000928 <SPI_PeriClockControl+0xdc>
			SPI5_PCLK_DI();
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <SPI_PeriClockControl+0xec>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000920:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <SPI_PeriClockControl+0xec>)
 8000922:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000926:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40013000 	.word	0x40013000
 8000938:	40023800 	.word	0x40023800
 800093c:	40003800 	.word	0x40003800
 8000940:	40003c00 	.word	0x40003c00
 8000944:	40013400 	.word	0x40013400

08000948 <SPI_Init>:

/* Init and DeInit  */

void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

      //Enable peripheral clock
	  SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2101      	movs	r1, #1
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff78 	bl	800084c <SPI_PeriClockControl>

	  uint32_t tempreg = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
	  //1. Configure Device Mode
	  tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	791b      	ldrb	r3, [r3, #4]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]

	  //2.Configure Bus Config
	  if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	795b      	ldrb	r3, [r3, #5]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d104      	bne.n	800097e <SPI_Init+0x36>
		  //clear bidi mode
		  tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e014      	b.n	80009a8 <SPI_Init+0x60>
	  }
	  else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	795b      	ldrb	r3, [r3, #5]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d104      	bne.n	8000990 <SPI_Init+0x48>
		  //set bidi mode
		  tempreg |= (1<<SPI_CR1_BIDIMODE);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e00b      	b.n	80009a8 <SPI_Init+0x60>
	  }
	  else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d107      	bne.n	80009a8 <SPI_Init+0x60>
		  //clear bidi mode
		  tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800099e:	60fb      	str	r3, [r7, #12]
		  //set RXONLY bit
		  tempreg |= (1<<SPI_CR1_RXONLY);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a6:	60fb      	str	r3, [r7, #12]
	  }

	  //3. configure clk speed
	  tempreg |= pSPIHandle->SPIConfig.SPI_SClkSpeed << SPI_CR1_BR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	799b      	ldrb	r3, [r3, #6]
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]

	  //4.Configure DFF
	  tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	79db      	ldrb	r3, [r3, #7]
 80009b8:	02db      	lsls	r3, r3, #11
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

	  //5. Configure CPOL
	  tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7a5b      	ldrb	r3, [r3, #9]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

	  //6.Configure CPHA
	  tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7a1b      	ldrb	r3, [r3, #8]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

	  //7.configure SSM
	  tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7a9b      	ldrb	r3, [r3, #10]
 80009dc:	025b      	lsls	r3, r3, #9
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

	  pSPIHandle->pSPIx->CR1 = tempreg;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SPI_GetFlagStatus>:
	else{
		SPI5_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SPI_SendData>:

/* Data Send and Receive  */
// This is Blocking Call

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	while (Len>0) {
 8000a28:	e027      	b.n	8000a7a <SPI_SendData+0x5e>
	        // Wait until TX buffer is empty
	        while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a2a:	bf00      	nop
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff ffe0 	bl	80009f4 <SPI_GetFlagStatus>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f8      	beq.n	8000a2c <SPI_SendData+0x10>

	        // Check DFF bit in CR1 for 8-bit or 16-bit data mode
	        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00e      	beq.n	8000a64 <SPI_SendData+0x48>
	            // 16-bit DFF: Send 2 bytes
//	            pSPIx->DR =*pString ;
//	            pString++; // Move to the next character
	            pSPIx->DR =   *((uint16_t*)pTxBuffer);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	60da      	str	r2, [r3, #12]
	            Len--;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
	            Len--;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
	            (uint16_t*)pTxBuffer++;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	e00a      	b.n	8000a7a <SPI_SendData+0x5e>
	        } else {
	            // 8-bit DFF: Send 1 byte
//	        	pSPIx->DR =*pString ;
//	            pString++; // Move to the next character
				pSPIx->DR =   *pTxBuffer;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
				Len--;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
				pTxBuffer++;
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
	while (Len>0) {
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1d4      	bne.n	8000a2a <SPI_SendData+0xe>

	        }
	    }

	while (SPI_GetFlagStatus(pSPIx, SPI_BUSY_FLAG) == FLAG_SET);
 8000a80:	bf00      	nop
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff ffb5 	bl	80009f4 <SPI_GetFlagStatus>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d0f8      	beq.n	8000a82 <SPI_SendData+0x66>


}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <SPI_Peripheralcontrol>:

void SPI_IRQHandling(SPI_Handle_t *pHandle);



void SPI_Peripheralcontrol(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d106      	bne.n	8000aba <SPI_Peripheralcontrol+0x20>
	pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	601a      	str	r2, [r3, #0]
	}
	else if(EnorDi == DISABLE){
	pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);

	}
}
 8000ab8:	e008      	b.n	8000acc <SPI_Peripheralcontrol+0x32>
	else if(EnorDi == DISABLE){
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d105      	bne.n	8000acc <SPI_Peripheralcontrol+0x32>
	pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);

		}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d106      	bne.n	8000af8 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f043 0204 	orr.w	r2, r3, #4
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	605a      	str	r2, [r3, #4]
		}
	else if(EnorDi == DISABLE){
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);

		}
}
 8000af6:	e008      	b.n	8000b0a <SPI_SSOEConfig+0x32>
	else if(EnorDi == DISABLE){
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d105      	bne.n	8000b0a <SPI_SSOEConfig+0x32>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f023 0204 	bic.w	r2, r3, #4
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	605a      	str	r2, [r3, #4]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <__libc_init_array>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b50 <__libc_init_array+0x38>)
 8000b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b54 <__libc_init_array+0x3c>)
 8000b1e:	1b64      	subs	r4, r4, r5
 8000b20:	10a4      	asrs	r4, r4, #2
 8000b22:	2600      	movs	r6, #0
 8000b24:	42a6      	cmp	r6, r4
 8000b26:	d109      	bne.n	8000b3c <__libc_init_array+0x24>
 8000b28:	4d0b      	ldr	r5, [pc, #44]	@ (8000b58 <__libc_init_array+0x40>)
 8000b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b5c <__libc_init_array+0x44>)
 8000b2c:	f000 f818 	bl	8000b60 <_init>
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	10a4      	asrs	r4, r4, #2
 8000b34:	2600      	movs	r6, #0
 8000b36:	42a6      	cmp	r6, r4
 8000b38:	d105      	bne.n	8000b46 <__libc_init_array+0x2e>
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b40:	4798      	blx	r3
 8000b42:	3601      	adds	r6, #1
 8000b44:	e7ee      	b.n	8000b24 <__libc_init_array+0xc>
 8000b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4a:	4798      	blx	r3
 8000b4c:	3601      	adds	r6, #1
 8000b4e:	e7f2      	b.n	8000b36 <__libc_init_array+0x1e>
 8000b50:	08000b8c 	.word	0x08000b8c
 8000b54:	08000b8c 	.word	0x08000b8c
 8000b58:	08000b8c 	.word	0x08000b8c
 8000b5c:	08000b90 	.word	0x08000b90

08000b60 <_init>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr

08000b6c <_fini>:
 8000b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6e:	bf00      	nop
 8000b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b72:	bc08      	pop	{r3}
 8000b74:	469e      	mov	lr, r3
 8000b76:	4770      	bx	lr
