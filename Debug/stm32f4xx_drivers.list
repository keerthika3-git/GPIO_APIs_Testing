
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001198  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001330  08001330  00003038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001330  08001330  00003038  2**0
                  CONTENTS
  4 .ARM          00000008  08001330  08001330  00002330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001338  08001338  00003038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001338  08001338  00002338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800133c  0800133c  0000233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08001340  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000038  08001378  00003038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001378  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017f1  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000560  00000000  00000000  00004859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00004dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000171  00000000  00000000  00004fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002646  00000000  00000000  00005121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020fa  00000000  00000000  00007767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a2b7  00000000  00000000  00009861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000770  00000000  00000000  00013b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000142cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001318 	.word	0x08001318

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08001318 	.word	0x08001318

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <I2C1_PinsInit>:

//receive buffer
uint8_t Tx_buf[32] = "HELLO, I AM STM32 SLAVE..";


void I2C1_PinsInit(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
     GPIO_Handle_t I2CPins;

     I2CPins.pGPIOx=GPIOB;
 80001ee:	4b19      	ldr	r3, [pc, #100]	@ (8000254 <I2C1_PinsInit+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
     I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	727b      	strb	r3, [r7, #9]
     I2CPins.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_OD;
 80001f6:	2301      	movs	r3, #1
 80001f8:	733b      	strb	r3, [r7, #12]
     I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_PU;
 80001fa:	2301      	movs	r3, #1
 80001fc:	72fb      	strb	r3, [r7, #11]
     I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001fe:	2304      	movs	r3, #4
 8000200:	737b      	strb	r3, [r7, #13]
     I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000202:	2302      	movs	r3, #2
 8000204:	72bb      	strb	r3, [r7, #10]

     GPIO_PeriClockControl(GPIOB, ENABLE);
 8000206:	2101      	movs	r1, #1
 8000208:	4812      	ldr	r0, [pc, #72]	@ (8000254 <I2C1_PinsInit+0x6c>)
 800020a:	f000 f919 	bl	8000440 <GPIO_PeriClockControl>
     I2CPins.pGPIOx->MODER = 0x00000000;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
     I2CPins.pGPIOx->OSPEEDR= 0x00000000;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
     I2CPins.pGPIOx->OTYPER=0x00000000;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2200      	movs	r2, #0
 800021e:	605a      	str	r2, [r3, #4]
     I2CPins.pGPIOx->PUPDR=0x00000000;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
     I2CPins.pGPIOx->AFRL[0]=0x00000000;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2200      	movs	r2, #0
 800022a:	621a      	str	r2, [r3, #32]
     I2CPins.pGPIOx->AFRL[1]=0x00000000;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	625a      	str	r2, [r3, #36]	@ 0x24
     //SCL
     I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_6;
 8000232:	2306      	movs	r3, #6
 8000234:	723b      	strb	r3, [r7, #8]
     GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f997 	bl	800056c <GPIO_Init>

     //SDA
     I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_9;
 800023e:	2309      	movs	r3, #9
 8000240:	723b      	strb	r3, [r7, #8]
     GPIO_Init(&I2CPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f991 	bl	800056c <GPIO_Init>


}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Inits>:

void I2C1_Inits(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx=I2C1;
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <I2C1_Inits+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <I2C1_Inits+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl =I2C_ACK_ENABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <I2C1_Inits+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_SCLSpeed=I2C_SCL_SPEED_SM;
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <I2C1_Inits+0x2c>)
 800026a:	4a08      	ldr	r2, [pc, #32]	@ (800028c <I2C1_Inits+0x34>)
 800026c:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_DeviceAddress=MY_ADDR;
 800026e:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <I2C1_Inits+0x2c>)
 8000270:	2268      	movs	r2, #104	@ 0x68
 8000272:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle=I2C_FM_DUTY_2;
 8000274:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <I2C1_Inits+0x2c>)
 8000276:	2200      	movs	r2, #0
 8000278:	729a      	strb	r2, [r3, #10]

	I2C_Init(&I2C1Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	@ (8000284 <I2C1_Inits+0x2c>)
 800027c:	f000 fc7e 	bl	8000b7c <I2C_Init>

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000054 	.word	0x20000054
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	GPIOBtn.pGPIOx=GPIOC;
 8000296:	4b13      	ldr	r3, [pc, #76]	@ (80002e4 <GPIO_ButtonInit+0x54>)
 8000298:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 800029a:	230d      	movs	r3, #13
 800029c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IN;
 800029e:	2300      	movs	r3, #0
 80002a0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 80002a2:	2302      	movs	r3, #2
 80002a4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOBtn.pGPIOx, ENABLE);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2101      	movs	r1, #1
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f8c6 	bl	8000440 <GPIO_PeriClockControl>
	GPIOBtn.pGPIOx->MODER = 0x00000000;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
	GPIOBtn.pGPIOx->OSPEEDR= 0x00000000;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
//	GpioLed.pGPIOx->OTYPER=0x00000000;
	GPIOBtn.pGPIOx->PUPDR=0x00000000;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
	GPIOBtn.pGPIOx->AFRL[0]=0x00000000;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
	GPIOBtn.pGPIOx->AFRL[1]=0x00000000;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2200      	movs	r2, #0
 80002d0:	625a      	str	r2, [r3, #36]	@ 0x24


	GPIO_Init(&GPIOBtn);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 f949 	bl	800056c <GPIO_Init>



}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40020800 	.word	0x40020800

080002e8 <main>:

int main(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0



	GPIO_ButtonInit();
 80002ec:	f7ff ffd0 	bl	8000290 <GPIO_ButtonInit>

	//i2c pin ints
	I2C1_PinsInit();
 80002f0:	f7ff ff7a 	bl	80001e8 <I2C1_PinsInit>

	//i2c peripheral config
	I2C1_Inits();
 80002f4:	f7ff ffb0 	bl	8000258 <I2C1_Inits>

	//I2C IRQ config
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80002f8:	2101      	movs	r1, #1
 80002fa:	201f      	movs	r0, #31
 80002fc:	f000 ff62 	bl	80011c4 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 8000300:	2101      	movs	r1, #1
 8000302:	2020      	movs	r0, #32
 8000304:	f000 ff5e 	bl	80011c4 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1,ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	4806      	ldr	r0, [pc, #24]	@ (8000324 <main+0x3c>)
 800030c:	f000 fb47 	bl	800099e <I2C_SlaveEnableDisableCallbackEvents>

	//enable clock for i2c peripheral
	I2C_Peripheralcontrol(I2C1,ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	4804      	ldr	r0, [pc, #16]	@ (8000324 <main+0x3c>)
 8000314:	f000 ff37 	bl	8001186 <I2C_Peripheralcontrol>

	//ACK bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8000318:	2101      	movs	r1, #1
 800031a:	4802      	ldr	r0, [pc, #8]	@ (8000324 <main+0x3c>)
 800031c:	f000 ff17 	bl	800114e <I2C_ManageAcking>


	while(1);
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <main+0x38>
 8000324:	40005400 	.word	0x40005400

08000328 <I2C1_EV_IRQHandler>:
}


void I2C1_EV_IRQHandler(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 800032c:	4802      	ldr	r0, [pc, #8]	@ (8000338 <I2C1_EV_IRQHandler+0x10>)
 800032e:	f000 fd5b 	bl	8000de8 <I2C_EV_IRQHandling>

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000054 	.word	0x20000054

0800033c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8000340:	4802      	ldr	r0, [pc, #8]	@ (800034c <I2C1_ER_IRQHandler+0x10>)
 8000342:	f000 fe2d 	bl	8000fa0 <I2C_ER_IRQHandling>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000054 	.word	0x20000054

08000350 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pHandle,uint8_t AppEvent){
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandcode=0;
	static uint8_t Cnt=0;
	if(AppEvent == I2C_EV_DATA_REQ){
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b08      	cmp	r3, #8
 8000360:	d123      	bne.n	80003aa <I2C_ApplicationEventCallback+0x5a>
    	//master wants data,slave has to send it
    	if(commandcode == 0x51){
 8000362:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <I2C_ApplicationEventCallback+0x90>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b51      	cmp	r3, #81	@ 0x51
 8000368:	d10b      	bne.n	8000382 <I2C_ApplicationEventCallback+0x32>
    		//send length information to master
    		I2C_SlaveSendData(pHandle->pI2Cx, strlen((char*)Tx_buf));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681c      	ldr	r4, [r3, #0]
 800036e:	481d      	ldr	r0, [pc, #116]	@ (80003e4 <I2C_ApplicationEventCallback+0x94>)
 8000370:	f7ff ff32 	bl	80001d8 <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	b2db      	uxtb	r3, r3
 8000378:	4619      	mov	r1, r3
 800037a:	4620      	mov	r0, r4
 800037c:	f000 fd18 	bl	8000db0 <I2C_SlaveSendData>

    }else if(AppEvent == I2C_EV_STOP){
    	//happens only during slave reception
    }

}
 8000380:	e029      	b.n	80003d6 <I2C_ApplicationEventCallback+0x86>
    	}else if(commandcode == 0x52){
 8000382:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <I2C_ApplicationEventCallback+0x90>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b52      	cmp	r3, #82	@ 0x52
 8000388:	d125      	bne.n	80003d6 <I2C_ApplicationEventCallback+0x86>
    		I2C_SlaveSendData(pHandle->pI2Cx, Tx_buf[Cnt++]);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <I2C_ApplicationEventCallback+0x98>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	1c59      	adds	r1, r3, #1
 8000394:	b2c8      	uxtb	r0, r1
 8000396:	4914      	ldr	r1, [pc, #80]	@ (80003e8 <I2C_ApplicationEventCallback+0x98>)
 8000398:	7008      	strb	r0, [r1, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <I2C_ApplicationEventCallback+0x94>)
 800039e:	5c5b      	ldrb	r3, [r3, r1]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4610      	mov	r0, r2
 80003a4:	f000 fd04 	bl	8000db0 <I2C_SlaveSendData>
}
 80003a8:	e015      	b.n	80003d6 <I2C_ApplicationEventCallback+0x86>
    else if(AppEvent == I2C_EV_DATA_RCV){
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	2b09      	cmp	r3, #9
 80003ae:	d109      	bne.n	80003c4 <I2C_ApplicationEventCallback+0x74>
    	commandcode = I2C_SlaveReceiveData(pHandle->pI2Cx);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fd0a 	bl	8000dce <I2C_SlaveReceiveData>
 80003ba:	4603      	mov	r3, r0
 80003bc:	461a      	mov	r2, r3
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <I2C_ApplicationEventCallback+0x90>)
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	e008      	b.n	80003d6 <I2C_ApplicationEventCallback+0x86>
    }else if(AppEvent == I2C_ERROR_AF){
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b05      	cmp	r3, #5
 80003c8:	d105      	bne.n	80003d6 <I2C_ApplicationEventCallback+0x86>
    	commandcode =0xff;
 80003ca:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <I2C_ApplicationEventCallback+0x90>)
 80003cc:	22ff      	movs	r2, #255	@ 0xff
 80003ce:	701a      	strb	r2, [r3, #0]
    	Cnt=0;
 80003d0:	4b05      	ldr	r3, [pc, #20]	@ (80003e8 <I2C_ApplicationEventCallback+0x98>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd90      	pop	{r4, r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000007c 	.word	0x2000007c
 80003e4:	20000000 	.word	0x20000000
 80003e8:	2000007d 	.word	0x2000007d

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	@ (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	@ (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	@ (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	@ (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	@ (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041a:	f000 ff59 	bl	80012d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff ff63 	bl	80002e8 <main>

08000422 <LoopForever>:

LoopForever:
  b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000430:	08001340 	.word	0x08001340
  ldr r2, =_sbss
 8000434:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000438:	20000080 	.word	0x20000080

0800043c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC_IRQHandler>
	...

08000440 <GPIO_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d13d      	bne.n	80004ce <GPIO_PeriClockControl+0x8e>
		if(pGPIOx == GPIOA){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a3f      	ldr	r2, [pc, #252]	@ (8000554 <GPIO_PeriClockControl+0x114>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800045a:	4b3f      	ldr	r3, [pc, #252]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a3e      	ldr	r2, [pc, #248]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
		else{
			GPIOH_PCLK_DI();
		}

	}
}
 8000466:	e06f      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a3c      	ldr	r2, [pc, #240]	@ (800055c <GPIO_PeriClockControl+0x11c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000470:	4b39      	ldr	r3, [pc, #228]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000474:	4a38      	ldr	r2, [pc, #224]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047c:	e064      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a37      	ldr	r2, [pc, #220]	@ (8000560 <GPIO_PeriClockControl+0x120>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000486:	4b34      	ldr	r3, [pc, #208]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048a:	4a33      	ldr	r2, [pc, #204]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000492:	e059      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a33      	ldr	r2, [pc, #204]	@ (8000564 <GPIO_PeriClockControl+0x124>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800049c:	4b2e      	ldr	r3, [pc, #184]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a8:	e04e      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000568 <GPIO_PeriClockControl+0x128>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004b2:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b6:	4a28      	ldr	r2, [pc, #160]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004be:	e043      	b.n	8000548 <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_EN();
 80004c0:	4b25      	ldr	r3, [pc, #148]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a24      	ldr	r2, [pc, #144]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	e03c      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		if(pGPIOx == GPIOA){
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a20      	ldr	r2, [pc, #128]	@ (8000554 <GPIO_PeriClockControl+0x114>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0xa4>
			GPIOA_PCLK_DI();
 80004d6:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a1f      	ldr	r2, [pc, #124]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004dc:	f023 0301 	bic.w	r3, r3, #1
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e2:	e031      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOB){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a1d      	ldr	r2, [pc, #116]	@ (800055c <GPIO_PeriClockControl+0x11c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0xba>
			GPIOB_PCLK_DI();
 80004ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a19      	ldr	r2, [pc, #100]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 80004f2:	f023 0302 	bic.w	r3, r3, #2
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f8:	e026      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOC){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a18      	ldr	r2, [pc, #96]	@ (8000560 <GPIO_PeriClockControl+0x120>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClockControl+0xd0>
			GPIOC_PCLK_DI();
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a14      	ldr	r2, [pc, #80]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000508:	f023 0304 	bic.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050e:	e01b      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOD){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <GPIO_PeriClockControl+0x124>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PeriClockControl+0xe6>
			GPIOD_PCLK_DI();
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051c:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 800051e:	f023 0308 	bic.w	r3, r3, #8
 8000522:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000524:	e010      	b.n	8000548 <GPIO_PeriClockControl+0x108>
		else if(pGPIOx == GPIOE){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <GPIO_PeriClockControl+0x128>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0xfc>
			GPIOE_PCLK_DI();
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000534:	f023 0310 	bic.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800053a:	e005      	b.n	8000548 <GPIO_PeriClockControl+0x108>
			GPIOH_PCLK_DI();
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000540:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <GPIO_PeriClockControl+0x118>)
 8000542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000546:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40020000 	.word	0x40020000
 8000558:	40023800 	.word	0x40023800
 800055c:	40020400 	.word	0x40020400
 8000560:	40020800 	.word	0x40020800
 8000564:	40020c00 	.word	0x40020c00
 8000568:	40021000 	.word	0x40021000

0800056c <GPIO_Init>:


/* Init and DeInit  */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800056c:	b480      	push	{r7}
 800056e:	b087      	sub	sp, #28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

//	//Enable Peripheral clock
//	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);

	//1.configure modes
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG ){
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b03      	cmp	r3, #3
 800057e:	d828      	bhi.n	80005d2 <GPIO_Init+0x66>
		 if(pGPIOHandle->pGPIOx == GPIOA){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a55      	ldr	r2, [pc, #340]	@ (80006dc <GPIO_Init+0x170>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d103      	bne.n	8000592 <GPIO_Init+0x26>
		pGPIOHandle->pGPIOx->MODER=0x00000000;}
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
       //non interrupt mode
       temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	617b      	str	r3, [r7, #20]
       pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing 2bits before setting
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	4619      	mov	r1, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	408b      	lsls	r3, r1
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	400a      	ands	r2, r1
 80005be:	601a      	str	r2, [r3, #0]
       pGPIOHandle->pGPIOx->MODER |=temp; //setting
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6819      	ldr	r1, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	430a      	orrs	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	e0ac      	b.n	800072c <GPIO_Init+0x1c0>
	 }
	 else{


		 //this for interrupt mode
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d117      	bne.n	800060a <GPIO_Init+0x9e>
			 //1. configure Falling Trigger Selection Register
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005da:	4b41      	ldr	r3, [pc, #260]	@ (80006e0 <GPIO_Init+0x174>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	4611      	mov	r1, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	408a      	lsls	r2, r1
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a3d      	ldr	r2, [pc, #244]	@ (80006e0 <GPIO_Init+0x174>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	60d3      	str	r3, [r2, #12]
			 //clearing RTSR bit to avoid previous configuration issues
			 EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f0:	4b3b      	ldr	r3, [pc, #236]	@ (80006e0 <GPIO_Init+0x174>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	7912      	ldrb	r2, [r2, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	2201      	movs	r2, #1
 80005fc:	408a      	lsls	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	4611      	mov	r1, r2
 8000602:	4a37      	ldr	r2, [pc, #220]	@ (80006e0 <GPIO_Init+0x174>)
 8000604:	400b      	ands	r3, r1
 8000606:	6093      	str	r3, [r2, #8]
 8000608:	e035      	b.n	8000676 <GPIO_Init+0x10a>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	795b      	ldrb	r3, [r3, #5]
 800060e:	2b05      	cmp	r3, #5
 8000610:	d117      	bne.n	8000642 <GPIO_Init+0xd6>
			 //1. configure Rising Trigger Selection Register
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	4b33      	ldr	r3, [pc, #204]	@ (80006e0 <GPIO_Init+0x174>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7912      	ldrb	r2, [r2, #4]
 800061a:	4611      	mov	r1, r2
 800061c:	2201      	movs	r2, #1
 800061e:	408a      	lsls	r2, r1
 8000620:	4611      	mov	r1, r2
 8000622:	4a2f      	ldr	r2, [pc, #188]	@ (80006e0 <GPIO_Init+0x174>)
 8000624:	430b      	orrs	r3, r1
 8000626:	6093      	str	r3, [r2, #8]
			//clearing FTSR bit to avoid previous configuration issues
             EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <GPIO_Init+0x174>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4611      	mov	r1, r2
 8000632:	2201      	movs	r2, #1
 8000634:	408a      	lsls	r2, r1
 8000636:	43d2      	mvns	r2, r2
 8000638:	4611      	mov	r1, r2
 800063a:	4a29      	ldr	r2, [pc, #164]	@ (80006e0 <GPIO_Init+0x174>)
 800063c:	400b      	ands	r3, r1
 800063e:	60d3      	str	r3, [r2, #12]
 8000640:	e019      	b.n	8000676 <GPIO_Init+0x10a>
		 }
		 else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	2b06      	cmp	r3, #6
 8000648:	d115      	bne.n	8000676 <GPIO_Init+0x10a>
			 //1. configure both FTSR and RTSR
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <GPIO_Init+0x174>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <GPIO_Init+0x174>)
 800065c:	430b      	orrs	r3, r1
 800065e:	60d3      	str	r3, [r2, #12]
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <GPIO_Init+0x174>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <GPIO_Init+0x174>)
 8000672:	430b      	orrs	r3, r1
 8000674:	6093      	str	r3, [r2, #8]
		 }
		 //2.configure GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	74bb      	strb	r3, [r7, #18]

		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	@ (80006dc <GPIO_Init+0x170>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d032      	beq.n	80006f8 <GPIO_Init+0x18c>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <GPIO_Init+0x178>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d01d      	beq.n	80006d8 <GPIO_Init+0x16c>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	@ (80006e8 <GPIO_Init+0x17c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d016      	beq.n	80006d4 <GPIO_Init+0x168>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <GPIO_Init+0x180>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d00f      	beq.n	80006d0 <GPIO_Init+0x164>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <GPIO_Init+0x184>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d008      	beq.n	80006cc <GPIO_Init+0x160>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <GPIO_Init+0x188>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d101      	bne.n	80006c8 <GPIO_Init+0x15c>
 80006c4:	2307      	movs	r3, #7
 80006c6:	e018      	b.n	80006fa <GPIO_Init+0x18e>
 80006c8:	2300      	movs	r3, #0
 80006ca:	e016      	b.n	80006fa <GPIO_Init+0x18e>
 80006cc:	2304      	movs	r3, #4
 80006ce:	e014      	b.n	80006fa <GPIO_Init+0x18e>
 80006d0:	2303      	movs	r3, #3
 80006d2:	e012      	b.n	80006fa <GPIO_Init+0x18e>
 80006d4:	2302      	movs	r3, #2
 80006d6:	e010      	b.n	80006fa <GPIO_Init+0x18e>
 80006d8:	2301      	movs	r3, #1
 80006da:	e00e      	b.n	80006fa <GPIO_Init+0x18e>
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40013c00 	.word	0x40013c00
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40021c00 	.word	0x40021c00
 80006f8:	2300      	movs	r3, #0
 80006fa:	747b      	strb	r3, [r7, #17]

		 SYSCFG_PCLK_EN();
 80006fc:	4b6a      	ldr	r3, [pc, #424]	@ (80008a8 <GPIO_Init+0x33c>)
 80006fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000700:	4a69      	ldr	r2, [pc, #420]	@ (80008a8 <GPIO_Init+0x33c>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1]=portcode << (temp2*4);
 8000708:	7c7a      	ldrb	r2, [r7, #17]
 800070a:	7cbb      	ldrb	r3, [r7, #18]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	fa02 f103 	lsl.w	r1, r2, r3
 8000712:	4a66      	ldr	r2, [pc, #408]	@ (80008ac <GPIO_Init+0x340>)
 8000714:	7cfb      	ldrb	r3, [r7, #19]
 8000716:	3302      	adds	r3, #2
 8000718:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 //3.enable EXTI interrupt delivery using IMR
		 EXTI->IMR =(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	461a      	mov	r2, r3
 8000722:	2301      	movs	r3, #1
 8000724:	fa03 f202 	lsl.w	r2, r3, r2
 8000728:	4b61      	ldr	r3, [pc, #388]	@ (80008b0 <GPIO_Init+0x344>)
 800072a:	601a      	str	r2, [r3, #0]
	 }

	 temp=0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
	 //2.configure speed
	 if(pGPIOHandle->pGPIOx == GPIOA){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a5f      	ldr	r2, [pc, #380]	@ (80008b4 <GPIO_Init+0x348>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d103      	bne.n	8000742 <GPIO_Init+0x1d6>

	 pGPIOHandle->pGPIOx->OSPEEDR= 0x00000000;}
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	2103      	movs	r1, #3
 8000762:	fa01 f303 	lsl.w	r3, r1, r3
 8000766:	43db      	mvns	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	400a      	ands	r2, r1
 8000770:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDR |=temp; //setting
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6899      	ldr	r1, [r3, #8]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	430a      	orrs	r2, r1
 8000780:	609a      	str	r2, [r3, #8]

	 temp=0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

	 //3.configure output types
	 if(pGPIOHandle->pGPIOx == GPIOA){
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a4a      	ldr	r2, [pc, #296]	@ (80008b4 <GPIO_Init+0x348>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d103      	bne.n	8000798 <GPIO_Init+0x22c>
	 pGPIOHandle->pGPIOx->OTYPER=0x00000000;}
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7a1b      	ldrb	r3, [r3, #8]
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 1bit before setting
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	4619      	mov	r1, r3
 80007b4:	2301      	movs	r3, #1
 80007b6:	408b      	lsls	r3, r1
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	400a      	ands	r2, r1
 80007c2:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |=temp; //setting
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6859      	ldr	r1, [r3, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	605a      	str	r2, [r3, #4]

	 temp=0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

	 //4. configure pull up/pull down
	 if(pGPIOHandle->pGPIOx == GPIOA){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a35      	ldr	r2, [pc, #212]	@ (80008b4 <GPIO_Init+0x348>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d103      	bne.n	80007ea <GPIO_Init+0x27e>
	 pGPIOHandle->pGPIOx->PUPDR=0x00000000;}
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
	 temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	79db      	ldrb	r3, [r3, #7]
 80007ee:	461a      	mov	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << 2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing 2bits before setting and 0x3 means to enable first 2bits - 0011(3)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	2103      	movs	r1, #3
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	400a      	ands	r2, r1
 8000818:	60da      	str	r2, [r3, #12]
     pGPIOHandle->pGPIOx->PUPDR |=temp;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68d9      	ldr	r1, [r3, #12]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	430a      	orrs	r2, r1
 8000828:	60da      	str	r2, [r3, #12]

	 temp=0;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

	 //5.configure alternate functionality
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN ){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d131      	bne.n	800089a <GPIO_Init+0x32e>

		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	08db      	lsrs	r3, r3, #3
 800083c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xFF <<(4*temp2));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	7c3a      	ldrb	r2, [r7, #16]
 800084e:	3208      	adds	r2, #8
 8000850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	22ff      	movs	r2, #255	@ 0xff
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	7c3a      	ldrb	r2, [r7, #16]
 8000868:	4001      	ands	r1, r0
 800086a:	3208      	adds	r2, #8
 800086c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	7c3a      	ldrb	r2, [r7, #16]
 8000876:	3208      	adds	r2, #8
 8000878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a5b      	ldrb	r3, [r3, #9]
 8000880:	461a      	mov	r2, r3
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	7c3a      	ldrb	r2, [r7, #16]
 8000892:	4301      	orrs	r1, r0
 8000894:	3208      	adds	r2, #8
 8000896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }

}
 800089a:	bf00      	nop
 800089c:	371c      	adds	r7, #28
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40013c00 	.word	0x40013c00
 80008b4:	40020000 	.word	0x40020000

080008b8 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
}

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);    //slave adress + lsb is read/write bit which must be set to 0 for write
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008d2:	78fa      	ldrb	r2, [r7, #3]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	611a      	str	r2, [r3, #16]

}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;    //slave adress + lsb is read/write bit which must be set to 1 for read
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008fe:	78fa      	ldrb	r2, [r7, #3]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	611a      	str	r2, [r3, #16]

}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1<<I2C_SR2_MSL)){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	2b00      	cmp	r3, #0
 8000924:	d01f      	beq.n	8000966 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7f1b      	ldrb	r3, [r3, #28]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d112      	bne.n	8000954 <I2C_ClearADDRFlag+0x44>

			if(pI2CHandle->RxSize == 1){
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d11f      	bne.n	8000976 <I2C_ClearADDRFlag+0x66>
				//disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fc06 	bl	800114e <I2C_ManageAcking>

				//Clear AADR flag (read SR1 and SR2)
				dummy_read=pI2CHandle->pI2Cx->SR1;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	60fb      	str	r3, [r7, #12]
				dummy_read=pI2CHandle->pI2Cx->SR2;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	60fb      	str	r3, [r7, #12]
		(void)dummy_read;

	}


}
 8000952:	e010      	b.n	8000976 <I2C_ClearADDRFlag+0x66>
				dummy_read=pI2CHandle->pI2Cx->SR1;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	60fb      	str	r3, [r7, #12]
				dummy_read=pI2CHandle->pI2Cx->SR2;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	60fb      	str	r3, [r7, #12]
}
 8000964:	e007      	b.n	8000976 <I2C_ClearADDRFlag+0x66>
		dummy_read=pI2CHandle->pI2Cx->SR1;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	60fb      	str	r3, [r7, #12]
		dummy_read=pI2CHandle->pI2Cx->SR2;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	60fb      	str	r3, [r7, #12]
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <I2C_GenerateStopCondition>:

void  I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <I2C_SlaveEnableDisableCallbackEvents>:

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx,uint8_t EnorDi){
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d112      	bne.n	80009d6 <I2C_SlaveEnableDisableCallbackEvents+0x38>
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN );
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN );
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN );
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN );
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN );

	}

}
 80009d4:	e011      	b.n	80009fa <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN );
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN );
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN );
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	605a      	str	r2, [r3, #4]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <I2C_PeriClockControl>:

/* APIs SUPPORTED BY THIS DRIVER  */

/* Peripheral Clock setup*/

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d120      	bne.n	8000a5c <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <I2C_PeriClockControl+0xa0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000a22:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}

	}
}
 8000a2e:	e035      	b.n	8000a9c <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab0 <I2C_PeriClockControl+0xa8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a38:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a42:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a44:	e02a      	b.n	8000a9c <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <I2C_PeriClockControl+0xac>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d126      	bne.n	8000a9c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a5a:	e01f      	b.n	8000a9c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <I2C_PeriClockControl+0xa0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a70:	e014      	b.n	8000a9c <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <I2C_PeriClockControl+0xa8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a80:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a86:	e009      	b.n	8000a9c <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <I2C_PeriClockControl+0xac>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d105      	bne.n	8000a9c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <I2C_PeriClockControl+0xa4>)
 8000a96:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40005800 	.word	0x40005800
 8000ab4:	40005c00 	.word	0x40005c00

08000ab8 <RCC_GetPLLOutputClock>:
uint32_t RCC_GetPLLOutputClock(){
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1;

	clksrc = ((RCC->CFGR >> 2) &0x3); //mask all bits in cfgr register except 2 and 3 bits
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <RCC_GetPCLK1Value+0xa0>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	727b      	strb	r3, [r7, #9]
	if(clksrc==0){
 8000adc:	7a7b      	ldrb	r3, [r7, #9]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000ae2:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <RCC_GetPCLK1Value+0xa4>)
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e00b      	b.n	8000b00 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==1){
 8000ae8:	7a7b      	ldrb	r3, [r7, #9]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d102      	bne.n	8000af4 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000aee:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <RCC_GetPCLK1Value+0xa8>)
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e005      	b.n	8000b00 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc==2){
 8000af4:	7a7b      	ldrb	r3, [r7, #9]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d102      	bne.n	8000b00 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000afa:	f7ff ffdd 	bl	8000ab8 <RCC_GetPLLOutputClock>
 8000afe:	60f8      	str	r0, [r7, #12]
	}

	//AHB
	temp=((RCC->CFGR >> 4) &0xF);
 8000b00:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <RCC_GetPCLK1Value+0xa0>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	091b      	lsrs	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	723b      	strb	r3, [r7, #8]
	if(temp<8){
 8000b0e:	7a3b      	ldrb	r3, [r7, #8]
 8000b10:	2b07      	cmp	r3, #7
 8000b12:	d802      	bhi.n	8000b1a <RCC_GetPCLK1Value+0x52>
		ahbp=1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	72fb      	strb	r3, [r7, #11]
 8000b18:	e005      	b.n	8000b26 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp=AHB_PresScaler[temp-8];
 8000b1a:	7a3b      	ldrb	r3, [r7, #8]
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <RCC_GetPCLK1Value+0xac>)
 8000b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b24:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp=((RCC->CFGR >> 10) &0x7);
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <RCC_GetPCLK1Value+0xa0>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	0a9b      	lsrs	r3, r3, #10
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	723b      	strb	r3, [r7, #8]
	if(temp<4){
 8000b34:	7a3b      	ldrb	r3, [r7, #8]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d802      	bhi.n	8000b40 <RCC_GetPCLK1Value+0x78>
		apb1=1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	72bb      	strb	r3, [r7, #10]
 8000b3e:	e005      	b.n	8000b4c <RCC_GetPCLK1Value+0x84>
	}else{
		apb1=APB1_PresScaler[temp-4];
 8000b40:	7a3b      	ldrb	r3, [r7, #8]
 8000b42:	3b04      	subs	r3, #4
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <RCC_GetPCLK1Value+0xb0>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp ) / apb1;
 8000b4c:	7afb      	ldrb	r3, [r7, #11]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b54:	7abb      	ldrb	r3, [r7, #10]
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	00f42400 	.word	0x00f42400
 8000b70:	007a1200 	.word	0x007a1200
 8000b74:	20000020 	.word	0x20000020
 8000b78:	20000030 	.word	0x20000030

08000b7c <I2C_Init>:

/* Init and DeInit  */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0 ;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff3a 	bl	8000a08 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7a5b      	ldrb	r3, [r3, #9]
 8000b98:	029b      	lsls	r3, r3, #10
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000bac:	f7ff ff8c 	bl	8000ac8 <RCC_GetPCLK1Value>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a47      	ldr	r2, [pc, #284]	@ (8000cd0 <I2C_Init+0x154>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000bca:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7a1b      	ldrb	r3, [r3, #8]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a36      	ldr	r2, [pc, #216]	@ (8000cd4 <I2C_Init+0x158>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d80f      	bhi.n	8000c1e <I2C_Init+0xa2>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bfe:	f7ff ff63 	bl	8000ac8 <RCC_GetPCLK1Value>
 8000c02:	4602      	mov	r2, r0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c10:	897b      	ldrh	r3, [r7, #10]
 8000c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e02c      	b.n	8000c78 <I2C_Init+0xfc>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c24:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7a9b      	ldrb	r3, [r3, #10]
 8000c2a:	039b      	lsls	r3, r3, #14
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7a9b      	ldrb	r3, [r3, #10]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10b      	bne.n	8000c52 <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c3a:	f7ff ff45 	bl	8000ac8 <RCC_GetPCLK1Value>
 8000c3e:	4601      	mov	r1, r0
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c4e:	817b      	strh	r3, [r7, #10]
 8000c50:	e00c      	b.n	8000c6c <I2C_Init+0xf0>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c52:	f7ff ff39 	bl	8000ac8 <RCC_GetPCLK1Value>
 8000c56:	4601      	mov	r1, r0
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	009a      	lsls	r2, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c6a:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c6c:	897b      	ldrh	r3, [r7, #10]
 8000c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <I2C_Init+0x158>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d809      	bhi.n	8000c9e <I2C_Init+0x122>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000c8a:	f7ff ff1d 	bl	8000ac8 <RCC_GetPCLK1Value>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <I2C_Init+0x154>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e00d      	b.n	8000cba <I2C_Init+0x13e>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000c9e:	f7ff ff13 	bl	8000ac8 <RCC_GetPCLK1Value>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ca8:	fb02 f303 	mul.w	r3, r2, r3
 8000cac:	0a5b      	lsrs	r3, r3, #9
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <I2C_Init+0x15c>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	09db      	lsrs	r3, r3, #7
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000cc4:	621a      	str	r2, [r3, #32]
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	000186a0 	.word	0x000186a0
 8000cd8:	00044b83 	.word	0x00044b83

08000cdc <I2C_MasterHandleTXEInterrupt>:

	}
	return busystate;
}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00f      	beq.n	8000d0c <I2C_MasterHandleTXEInterrupt+0x30>

	        			//1.load data
	        			pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	611a      	str	r2, [r3, #16]

	        			//2.decrement TxLen
	        			pI2CHandle->TxLen--;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	615a      	str	r2, [r3, #20]

	        			//3.Increment Buffer address
	        			pI2CHandle->pTxBuffer++;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60da      	str	r2, [r3, #12]
	        		}
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

               //do data reception
        		if(pI2CHandle->RxSize == 1){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10b      	bne.n	8000d40 <I2C_MasterHandleRXNEInterrupt+0x28>
                 *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]

                  pI2CHandle->RxLen--;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	619a      	str	r2, [r3, #24]

        		}
        		if(pI2CHandle->RxSize > 1){
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d91a      	bls.n	8000d7e <I2C_MasterHandleRXNEInterrupt+0x66>
        			if(pI2CHandle->RxLen == 2){
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d105      	bne.n	8000d5c <I2C_MasterHandleRXNEInterrupt+0x44>
        				//clear ack bit
        				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f9f9 	bl	800114e <I2C_ManageAcking>
        			}
        			//read DR
        			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	691a      	ldr	r2, [r3, #16]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	701a      	strb	r2, [r3, #0]
        			pI2CHandle->pRxBuffer++;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
        			pI2CHandle->RxLen--;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	619a      	str	r2, [r3, #24]
        		}
        		if(pI2CHandle->RxLen == 0){
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d110      	bne.n	8000da8 <I2C_MasterHandleRXNEInterrupt+0x90>
        			//close i2c data reception and notify

        			//1.generate the stop condition
        			if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d104      	bne.n	8000d9a <I2C_MasterHandleRXNEInterrupt+0x82>
        				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fdf2 	bl	800097e <I2C_GenerateStopCondition>
        			}

        			//2.close I2C rx
        			I2C_CloseReceiveData(pI2CHandle);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f986 	bl	80010ac <I2C_CloseReceiveData>

        			//3.notify the application
        			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000da0:	2101      	movs	r1, #1
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fad4 	bl	8000350 <I2C_ApplicationEventCallback>

        		}
        	}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <I2C_SlaveSendData>:


void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx,uint8_t data){
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = data;
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	611a      	str	r2, [r3, #16]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <I2C_SlaveReceiveData>:
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx){
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2Cx->DR ;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	b2db      	uxtb	r3, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <I2C_EV_IRQHandling>:





void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;
	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN );
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dfa:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN );
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e06:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]

		//1. Handle For interrupt generated by SB event
		//	Note : SB flag is only applicable in Master mode
        if(temp1 && temp3){
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d01b      	beq.n	8000e52 <I2C_EV_IRQHandling+0x6a>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d018      	beq.n	8000e52 <I2C_EV_IRQHandling+0x6a>
        	//interrupt generated because of SB event
        	//this block will not be executed in slave mode because for slave SB is always zero
            //lets execute address phase
        	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7f1b      	ldrb	r3, [r3, #28]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d108      	bne.n	8000e3a <I2C_EV_IRQHandling+0x52>
        		I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7f5b      	ldrb	r3, [r3, #29]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4610      	mov	r0, r2
 8000e34:	f7ff fd40 	bl	80008b8 <I2C_ExecuteAddressPhaseWrite>
 8000e38:	e00b      	b.n	8000e52 <I2C_EV_IRQHandling+0x6a>
        	}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7f1b      	ldrb	r3, [r3, #28]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d107      	bne.n	8000e52 <I2C_EV_IRQHandling+0x6a>
        		I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7f5b      	ldrb	r3, [r3, #29]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f7ff fd49 	bl	80008e4 <I2C_ExecuteAddressPhaseRead>

        	}
        }

    	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR );
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	60fb      	str	r3, [r7, #12]
		//2. Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
        if(temp1 && temp3){
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <I2C_EV_IRQHandling+0x88>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <I2C_EV_IRQHandling+0x88>
        	//interrupt generated because of ADDR event
            I2C_ClearADDRFlag(pI2CHandle);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fd50 	bl	8000910 <I2C_ClearADDRFlag>
        }

    	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF );
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60fb      	str	r3, [r7, #12]
		//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
        if(temp1 && temp3){
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d022      	beq.n	8000ec8 <I2C_EV_IRQHandling+0xe0>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d01f      	beq.n	8000ec8 <I2C_EV_IRQHandling+0xe0>
        	//BTF flag is set
        	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7f1b      	ldrb	r3, [r3, #28]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d11b      	bne.n	8000ec8 <I2C_EV_IRQHandling+0xe0>
        		//make sure txe is also set
        		if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE )){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d014      	beq.n	8000ec8 <I2C_EV_IRQHandling+0xe0>
        			//BTF and TxE =1

        			if(pI2CHandle->TxLen == 0){
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d110      	bne.n	8000ec8 <I2C_EV_IRQHandling+0xe0>
        			//1. generate STOP condition
        			if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d104      	bne.n	8000eba <I2C_EV_IRQHandling+0xd2>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd62 	bl	800097e <I2C_GenerateStopCondition>
        			}
					//2.reset all the member elements of the hanadle structure
					I2C_CloseSendData(pI2CHandle);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f924 	bl	8001108 <I2C_CloseSendData>

					//3.notify that transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fa44 	bl	8000350 <I2C_ApplicationEventCallback>
                      ;
        	}

        }

    	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF );
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	60fb      	str	r3, [r7, #12]
		//4. Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
    	//this block will not be executed in master mode since STOPF will not set in master mode

    	if(temp1 && temp3){
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00c      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x10c>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d009      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x10c>
        	//STOPF flag is set
            //clear the STOPF (1.read SR1  2. write to CR1)
    		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6812      	ldr	r2, [r2, #0]
 8000eea:	601a      	str	r2, [r3, #0]

    		//notify the application that STOP is detected
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000eec:	2102      	movs	r1, #2
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fa2e 	bl	8000350 <I2C_ApplicationEventCallback>
        }


    	//The below code block will not be executed by the master since STOPF will not set in master mode

    	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE );
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000efe:	60fb      	str	r3, [r7, #12]

		//5. Handle For interrupt generated by TXE event
        if(temp1 && temp2 && temp3){
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d01f      	beq.n	8000f46 <I2C_EV_IRQHandling+0x15e>
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d01c      	beq.n	8000f46 <I2C_EV_IRQHandling+0x15e>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d019      	beq.n	8000f46 <I2C_EV_IRQHandling+0x15e>
         	//Txe flag is set
        	//we have to do data transmission

        	//Check for device mode
        	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <I2C_EV_IRQHandling+0x148>
               //master mode
        	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7f1b      	ldrb	r3, [r3, #28]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d10e      	bne.n	8000f46 <I2C_EV_IRQHandling+0x15e>
        		I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fed7 	bl	8000cdc <I2C_MasterHandleTXEInterrupt>
 8000f2e:	e00a      	b.n	8000f46 <I2C_EV_IRQHandling+0x15e>
        	}
        	}
        	else{
        		//slave mode
        		if(pI2CHandle->pI2Cx->SR2 &(1 << I2C_SR2_TRA)){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <I2C_EV_IRQHandling+0x15e>
        		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);}
 8000f3e:	2108      	movs	r1, #8
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fa05 	bl	8000350 <I2C_ApplicationEventCallback>
        	}
         }

    	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE );
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f50:	60fb      	str	r3, [r7, #12]

		//6. Handle For interrupt generated by RXNE event
        if(temp1 && temp2 && temp3){
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d01f      	beq.n	8000f98 <I2C_EV_IRQHandling+0x1b0>
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d01c      	beq.n	8000f98 <I2C_EV_IRQHandling+0x1b0>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d019      	beq.n	8000f98 <I2C_EV_IRQHandling+0x1b0>
        	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <I2C_EV_IRQHandling+0x19a>

        		//device is master
        		//RXNE flag is set
        	if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7f1b      	ldrb	r3, [r3, #28]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10e      	bne.n	8000f98 <I2C_EV_IRQHandling+0x1b0>

        		I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fecc 	bl	8000d18 <I2C_MasterHandleRXNEInterrupt>
        		if(pI2CHandle->pI2Cx->SR2 &(1 << I2C_SR2_TRA)){
          		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);}

        	}
}
}
 8000f80:	e00a      	b.n	8000f98 <I2C_EV_IRQHandling+0x1b0>
        		if(pI2CHandle->pI2Cx->SR2 &(1 << I2C_SR2_TRA)){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <I2C_EV_IRQHandling+0x1b0>
          		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);}
 8000f90:	2109      	movs	r1, #9
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff f9dc 	bl	8000350 <I2C_ApplicationEventCallback>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <I2C_ER_IRQHandling>:

 void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
		uint32_t temp1,temp2;

	    //Know the status of  ITERREN control bit in the CR2
		temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb2:	60fb      	str	r3, [r7, #12]


	/***********************Check for Bus error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fbe:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2 )
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00e      	beq.n	8000fe4 <I2C_ER_IRQHandling+0x44>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <I2C_ER_IRQHandling+0x44>
		{
			//This is Bus error

			//Implement the code to clear the buss error flag
			pI2CHandle->pI2Cx->SR1 &= ~(1<<I2C_SR1_BERR);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fda:	615a      	str	r2, [r3, #20]

            //Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000fdc:	2103      	movs	r1, #3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff f9b6 	bl	8000350 <I2C_ApplicationEventCallback>
		}

	/***********************Check for arbitration lost error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fee:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00e      	beq.n	8001014 <I2C_ER_IRQHandling+0x74>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00b      	beq.n	8001014 <I2C_ER_IRQHandling+0x74>
		{
			//This is arbitration lost error

			//Implement the code to clear the arbitration lost error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800100a:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 800100c:	2104      	movs	r1, #4
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff f99e 	bl	8000350 <I2C_ApplicationEventCallback>

		}

	/***********************Check for ACK failure  error************************************/

		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101e:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00e      	beq.n	8001044 <I2C_ER_IRQHandling+0xa4>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <I2C_ER_IRQHandling+0xa4>
		{
			//This is ACK failure error

		    //Implement the code to clear the ACK failure error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800103a:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 800103c:	2105      	movs	r1, #5
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff f986 	bl	8000350 <I2C_ApplicationEventCallback>
		}

	/***********************Check for Overrun/underrun error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800104e:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00e      	beq.n	8001074 <I2C_ER_IRQHandling+0xd4>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <I2C_ER_IRQHandling+0xd4>
		{
			//This is Overrun/underrun

		    //Implement the code to clear the Overrun/underrun error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800106a:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 800106c:	2106      	movs	r1, #6
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff f96e 	bl	8000350 <I2C_ApplicationEventCallback>
		}

	/***********************Check for Time out error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107e:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00e      	beq.n	80010a4 <I2C_ER_IRQHandling+0x104>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <I2C_ER_IRQHandling+0x104>
		{
			//This is Time out error

		    //Implement the code to clear the Time out error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800109a:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 800109c:	2107      	movs	r1, #7
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff f956 	bl	8000350 <I2C_ApplicationEventCallback>
		}

 }
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <I2C_CloseReceiveData>:

 void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

	 //Implement the code to disable ITBUFEN control Bit
	 pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITBUFEN);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010c2:	605a      	str	r2, [r3, #4]

	 //Implement the code to disable ITEVTEN control bIt
	 pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITEVTEN);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80010d2:	605a      	str	r2, [r3, #4]

	 pI2CHandle->TxRxState=I2C_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	771a      	strb	r2, [r3, #28]
	 pI2CHandle->pRxBuffer=NULL;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
	 pI2CHandle->RxLen=0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
	 pI2CHandle->RxSize=0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]

	 if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7a5b      	ldrb	r3, [r3, #9]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d105      	bne.n	8001100 <I2C_CloseReceiveData+0x54>
	 I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f827 	bl	800114e <I2C_ManageAcking>
	 }

 }
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <I2C_CloseSendData>:
 void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

	 //Implement the code to disable ITBUFEN control Bit
	 pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITBUFEN);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800111e:	605a      	str	r2, [r3, #4]

	 //Implement the code to disable ITEVTEN control bIt
	 pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITEVTEN);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800112e:	605a      	str	r2, [r3, #4]

	 pI2CHandle->TxRxState=I2C_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	771a      	strb	r2, [r3, #28]
	 pI2CHandle->pTxBuffer=NULL;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
	 pI2CHandle->TxLen=0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]

 }
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <I2C_ManageAcking>:

/*
 * peripheral control APIs
 */

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE){
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d106      	bne.n	800116e <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
	}
	else{
		//disable the ack
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 800116c:	e005      	b.n	800117a <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <I2C_Peripheralcontrol>:

void I2C_Peripheralcontrol(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <I2C_Peripheralcontrol+0x20>
	pI2Cx->CR1 |= (1<<I2C_CR1_PE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]
	}
	else if(EnorDi == DISABLE){
	pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);

	}
}
 80011a4:	e008      	b.n	80011b8 <I2C_Peripheralcontrol+0x32>
	else if(EnorDi == DISABLE){
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <I2C_Peripheralcontrol+0x32>
	pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f023 0201 	bic.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <I2C_IRQInterruptConfig>:



void I2C_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnorDis){
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]

	if(EnorDis == ENABLE)
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d133      	bne.n	8001242 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b1f      	cmp	r3, #31
 80011de:	d80a      	bhi.n	80011f6 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80011e0:	4b35      	ldr	r3, [pc, #212]	@ (80012b8 <I2C_IRQInterruptConfig+0xf4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	4611      	mov	r1, r2
 80011ee:	4a32      	ldr	r2, [pc, #200]	@ (80012b8 <I2C_IRQInterruptConfig+0xf4>)
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80011f4:	e059      	b.n	80012aa <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b1f      	cmp	r3, #31
 80011fa:	d90f      	bls.n	800121c <I2C_IRQInterruptConfig+0x58>
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001200:	d80c      	bhi.n	800121c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001202:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <I2C_IRQInterruptConfig+0xf8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	f002 021f 	and.w	r2, r2, #31
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	4611      	mov	r1, r2
 8001214:	4a29      	ldr	r2, [pc, #164]	@ (80012bc <I2C_IRQInterruptConfig+0xf8>)
 8001216:	430b      	orrs	r3, r1
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e046      	b.n	80012aa <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001220:	d943      	bls.n	80012aa <I2C_IRQInterruptConfig+0xe6>
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b5f      	cmp	r3, #95	@ 0x5f
 8001226:	d840      	bhi.n	80012aa <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8001228:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <I2C_IRQInterruptConfig+0xfc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	4611      	mov	r1, r2
 800123a:	4a21      	ldr	r2, [pc, #132]	@ (80012c0 <I2C_IRQInterruptConfig+0xfc>)
 800123c:	430b      	orrs	r3, r1
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	e033      	b.n	80012aa <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b1f      	cmp	r3, #31
 8001246:	d80a      	bhi.n	800125e <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <I2C_IRQInterruptConfig+0x100>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	4611      	mov	r1, r2
 8001256:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <I2C_IRQInterruptConfig+0x100>)
 8001258:	430b      	orrs	r3, r1
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	e025      	b.n	80012aa <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b1f      	cmp	r3, #31
 8001262:	d90f      	bls.n	8001284 <I2C_IRQInterruptConfig+0xc0>
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b3f      	cmp	r3, #63	@ 0x3f
 8001268:	d80c      	bhi.n	8001284 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800126a:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <I2C_IRQInterruptConfig+0x104>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	79fa      	ldrb	r2, [r7, #7]
 8001270:	f002 021f 	and.w	r2, r2, #31
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4611      	mov	r1, r2
 800127c:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <I2C_IRQInterruptConfig+0x104>)
 800127e:	430b      	orrs	r3, r1
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e012      	b.n	80012aa <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d90f      	bls.n	80012aa <I2C_IRQInterruptConfig+0xe6>
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b5f      	cmp	r3, #95	@ 0x5f
 800128e:	d80c      	bhi.n	80012aa <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <I2C_IRQInterruptConfig+0x108>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	79fa      	ldrb	r2, [r7, #7]
 8001296:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	4611      	mov	r1, r2
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <I2C_IRQInterruptConfig+0x108>)
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	e7ff      	b.n	80012aa <I2C_IRQInterruptConfig+0xe6>
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000e104 	.word	0xe000e104
 80012c0:	e000e10c 	.word	0xe000e10c
 80012c4:	e000e180 	.word	0xe000e180
 80012c8:	e000e184 	.word	0xe000e184
 80012cc:	e000e18c 	.word	0xe000e18c

080012d0 <__libc_init_array>:
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	4d0d      	ldr	r5, [pc, #52]	@ (8001308 <__libc_init_array+0x38>)
 80012d4:	4c0d      	ldr	r4, [pc, #52]	@ (800130c <__libc_init_array+0x3c>)
 80012d6:	1b64      	subs	r4, r4, r5
 80012d8:	10a4      	asrs	r4, r4, #2
 80012da:	2600      	movs	r6, #0
 80012dc:	42a6      	cmp	r6, r4
 80012de:	d109      	bne.n	80012f4 <__libc_init_array+0x24>
 80012e0:	4d0b      	ldr	r5, [pc, #44]	@ (8001310 <__libc_init_array+0x40>)
 80012e2:	4c0c      	ldr	r4, [pc, #48]	@ (8001314 <__libc_init_array+0x44>)
 80012e4:	f000 f818 	bl	8001318 <_init>
 80012e8:	1b64      	subs	r4, r4, r5
 80012ea:	10a4      	asrs	r4, r4, #2
 80012ec:	2600      	movs	r6, #0
 80012ee:	42a6      	cmp	r6, r4
 80012f0:	d105      	bne.n	80012fe <__libc_init_array+0x2e>
 80012f2:	bd70      	pop	{r4, r5, r6, pc}
 80012f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f8:	4798      	blx	r3
 80012fa:	3601      	adds	r6, #1
 80012fc:	e7ee      	b.n	80012dc <__libc_init_array+0xc>
 80012fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001302:	4798      	blx	r3
 8001304:	3601      	adds	r6, #1
 8001306:	e7f2      	b.n	80012ee <__libc_init_array+0x1e>
 8001308:	08001338 	.word	0x08001338
 800130c:	08001338 	.word	0x08001338
 8001310:	08001338 	.word	0x08001338
 8001314:	0800133c 	.word	0x0800133c

08001318 <_init>:
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	bf00      	nop
 800131c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131e:	bc08      	pop	{r3}
 8001320:	469e      	mov	lr, r3
 8001322:	4770      	bx	lr

08001324 <_fini>:
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001326:	bf00      	nop
 8001328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800132a:	bc08      	pop	{r3}
 800132c:	469e      	mov	lr, r3
 800132e:	4770      	bx	lr
